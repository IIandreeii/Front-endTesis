{
    "sourceFile": "src/components/component/messenger-chat.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1731369259074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731369308296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,12 @@\n 'use client'\n \n import React, { useState } from 'react'\n+import PropTypes from 'prop-types'\n import { Send } from 'lucide-react'\n \n-interface Message {\n-  id: number\n-  text: string\n-  sender: 'user' | 'other'\n-}\n-\n export function MessengerChat() {\n-  const [messages, setMessages] = useState<Message[]>([\n+  const [messages, setMessages] = useState([\n     { id: 1, text: \"Hola, ¿cómo estás?\", sender: 'other' },\n     { id: 2, text: \"¡Hola! Estoy bien, gracias. ¿Y tú?\", sender: 'user' },\n     { id: 3, text: \"Muy bien también, gracias por preguntar.\", sender: 'other' },\n   ])\n@@ -58,5 +53,17 @@\n         </div>\n       </div>\n     </div>\n   )\n+}\n+\n+MessengerChat.propTypes = {\n+  messages: PropTypes.arrayOf(\n+    PropTypes.shape({\n+      id: PropTypes.number.isRequired,\n+      text: PropTypes.string.isRequired,\n+      sender: PropTypes.oneOf(['user', 'other']).isRequired,\n+    })\n+  ),\n+  newMessage: PropTypes.string,\n+  handleSend: PropTypes.func,\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731369486823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+'use client'\n+\n+import React, { useState } from 'react'\n+import PropTypes from 'prop-types'\n+import { Send } from 'lucide-react'\n+\n+import\n+\n+export function MessengerChat() {\n+  const [messages, setMessages] = useState([\n+    { id: 1, text: \"Hola, ¿cómo estás?\", sender: 'other' },\n+    { id: 2, text: \"¡Hola! Estoy bien, gracias. ¿Y tú?\", sender: 'user' },\n+    { id: 3, text: \"Muy bien también, gracias por preguntar.\", sender: 'other' },\n+  ])\n+  const [newMessage, setNewMessage] = useState('')\n+\n+  const handleSend = () => {\n+    if (newMessage.trim()) {\n+      setMessages([...messages, { id: messages.length + 1, text: newMessage, sender: 'user' }])\n+      setNewMessage('')\n+    }\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col h-screen max-w-md mx-auto bg-[#D8C7A9]\">\n+      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+        {messages.map((message) => (\n+          <div\n+            key={message.id}\n+            className={`max-w-[70%] p-3 rounded-lg ${\n+              message.sender === 'user'\n+                ? 'ml-auto bg-[#ECE3D4]'\n+                : 'bg-[#E1DDBF]'\n+            }`}\n+          >\n+            <p className=\"text-[#042637]\">{message.text}</p>\n+          </div>\n+        ))}\n+      </div>\n+      <div className=\"p-4 bg-[#D8C7A9]\">\n+        <div className=\"flex items-center bg-white rounded-full\">\n+          <input\n+            type=\"text\"\n+            value={newMessage}\n+            onChange={(e) => setNewMessage(e.target.value)}\n+            placeholder=\"Escribe un mensaje...\"\n+            className=\"flex-1 p-2 bg-transparent outline-none text-[#042637]\"\n+          />\n+          <button\n+            onClick={handleSend}\n+            className=\"p-2 text-[#042637] hover:text-[#E1DDBF] transition-colors\"\n+          >\n+            <Send size={20} />\n+          </button>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+MessengerChat.propTypes = {\n+  messages: PropTypes.arrayOf(\n+    PropTypes.shape({\n+      id: PropTypes.number.isRequired,\n+      text: PropTypes.string.isRequired,\n+      sender: PropTypes.oneOf(['user', 'other']).isRequired,\n+    })\n+  ),\n+  newMessage: PropTypes.string,\n+  handleSend: PropTypes.func,\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731369492433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+'use client'\n+\n+import React, { useState } from 'react'\n+import PropTypes from 'prop-types'\n+import { Send } from 'lucide-react'\n+\n+import socket from '@/lib/socket'\n+\n+export function MessengerChat() {\n+  const [messages, setMessages] = useState([\n+    { id: 1, text: \"Hola, ¿cómo estás?\", sender: 'other' },\n+    { id: 2, text: \"¡Hola! Estoy bien, gracias. ¿Y tú?\", sender: 'user' },\n+    { id: 3, text: \"Muy bien también, gracias por preguntar.\", sender: 'other' },\n+  ])\n+  const [newMessage, setNewMessage] = useState('')\n+\n+  const handleSend = () => {\n+    if (newMessage.trim()) {\n+      setMessages([...messages, { id: messages.length + 1, text: newMessage, sender: 'user' }])\n+      setNewMessage('')\n+    }\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col h-screen max-w-md mx-auto bg-[#D8C7A9]\">\n+      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+        {messages.map((message) => (\n+          <div\n+            key={message.id}\n+            className={`max-w-[70%] p-3 rounded-lg ${\n+              message.sender === 'user'\n+                ? 'ml-auto bg-[#ECE3D4]'\n+                : 'bg-[#E1DDBF]'\n+            }`}\n+          >\n+            <p className=\"text-[#042637]\">{message.text}</p>\n+          </div>\n+        ))}\n+      </div>\n+      <div className=\"p-4 bg-[#D8C7A9]\">\n+        <div className=\"flex items-center bg-white rounded-full\">\n+          <input\n+            type=\"text\"\n+            value={newMessage}\n+            onChange={(e) => setNewMessage(e.target.value)}\n+            placeholder=\"Escribe un mensaje...\"\n+            className=\"flex-1 p-2 bg-transparent outline-none text-[#042637]\"\n+          />\n+          <button\n+            onClick={handleSend}\n+            className=\"p-2 text-[#042637] hover:text-[#E1DDBF] transition-colors\"\n+          >\n+            <Send size={20} />\n+          </button>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+MessengerChat.propTypes = {\n+  messages: PropTypes.arrayOf(\n+    PropTypes.shape({\n+      id: PropTypes.number.isRequired,\n+      text: PropTypes.string.isRequired,\n+      sender: PropTypes.oneOf(['user', 'other']).isRequired,\n+    })\n+  ),\n+  newMessage: PropTypes.string,\n+  handleSend: PropTypes.func,\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731369498035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,79 +5,10 @@\n import { Send } from 'lucide-react'\n \n import socket from '@/lib/socket'\n \n-export function MessengerChat() {\n-  const [messages, setMessages] = useState([\n-    { id: 1, text: \"Hola, ¿cómo estás?\", sender: 'other' },\n-    { id: 2, text: \"¡Hola! Estoy bien, gracias. ¿Y tú?\", sender: 'user' },\n-    { id: 3, text: \"Muy bien también, gracias por preguntar.\", sender: 'other' },\n-  ])\n-  const [newMessage, setNewMessage] = useState('')\n \n-  const handleSend = () => {\n-    if (newMessage.trim()) {\n-      setMessages([...messages, { id: messages.length + 1, text: newMessage, sender: 'user' }])\n-      setNewMessage('')\n-    }\n-  }\n \n-  return (\n-    <div className=\"flex flex-col h-screen max-w-md mx-auto bg-[#D8C7A9]\">\n-      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-        {messages.map((message) => (\n-          <div\n-            key={message.id}\n-            className={`max-w-[70%] p-3 rounded-lg ${\n-              message.sender === 'user'\n-                ? 'ml-auto bg-[#ECE3D4]'\n-                : 'bg-[#E1DDBF]'\n-            }`}\n-          >\n-            <p className=\"text-[#042637]\">{message.text}</p>\n-          </div>\n-        ))}\n-      </div>\n-      <div className=\"p-4 bg-[#D8C7A9]\">\n-        <div className=\"flex items-center bg-white rounded-full\">\n-          <input\n-            type=\"text\"\n-            value={newMessage}\n-            onChange={(e) => setNewMessage(e.target.value)}\n-            placeholder=\"Escribe un mensaje...\"\n-            className=\"flex-1 p-2 bg-transparent outline-none text-[#042637]\"\n-          />\n-          <button\n-            onClick={handleSend}\n-            className=\"p-2 text-[#042637] hover:text-[#E1DDBF] transition-colors\"\n-          >\n-            <Send size={20} />\n-          </button>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-MessengerChat.propTypes = {\n-  messages: PropTypes.arrayOf(\n-    PropTypes.shape({\n-      id: PropTypes.number.isRequired,\n-      text: PropTypes.string.isRequired,\n-      sender: PropTypes.oneOf(['user', 'other']).isRequired,\n-    })\n-  ),\n-  newMessage: PropTypes.string,\n-  handleSend: PropTypes.func,\n-}\n-'use client'\n-\n-import React, { useState } from 'react'\n-import PropTypes from 'prop-types'\n-import { Send } from 'lucide-react'\n-\n-import\n-\n export function MessengerChat() {\n   const [messages, setMessages] = useState([\n     { id: 1, text: \"Hola, ¿cómo estás?\", sender: 'other' },\n     { id: 2, text: \"¡Hola! Estoy bien, gracias. ¿Y tú?\", sender: 'user' },\n@@ -138,74 +69,5 @@\n     })\n   ),\n   newMessage: PropTypes.string,\n   handleSend: PropTypes.func,\n-}\n-'use client'\n-\n-import React, { useState } from 'react'\n-import PropTypes from 'prop-types'\n-import { Send } from 'lucide-react'\n-\n-export function MessengerChat() {\n-  const [messages, setMessages] = useState([\n-    { id: 1, text: \"Hola, ¿cómo estás?\", sender: 'other' },\n-    { id: 2, text: \"¡Hola! Estoy bien, gracias. ¿Y tú?\", sender: 'user' },\n-    { id: 3, text: \"Muy bien también, gracias por preguntar.\", sender: 'other' },\n-  ])\n-  const [newMessage, setNewMessage] = useState('')\n-\n-  const handleSend = () => {\n-    if (newMessage.trim()) {\n-      setMessages([...messages, { id: messages.length + 1, text: newMessage, sender: 'user' }])\n-      setNewMessage('')\n-    }\n-  }\n-\n-  return (\n-    <div className=\"flex flex-col h-screen max-w-md mx-auto bg-[#D8C7A9]\">\n-      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-        {messages.map((message) => (\n-          <div\n-            key={message.id}\n-            className={`max-w-[70%] p-3 rounded-lg ${\n-              message.sender === 'user'\n-                ? 'ml-auto bg-[#ECE3D4]'\n-                : 'bg-[#E1DDBF]'\n-            }`}\n-          >\n-            <p className=\"text-[#042637]\">{message.text}</p>\n-          </div>\n-        ))}\n-      </div>\n-      <div className=\"p-4 bg-[#D8C7A9]\">\n-        <div className=\"flex items-center bg-white rounded-full\">\n-          <input\n-            type=\"text\"\n-            value={newMessage}\n-            onChange={(e) => setNewMessage(e.target.value)}\n-            placeholder=\"Escribe un mensaje...\"\n-            className=\"flex-1 p-2 bg-transparent outline-none text-[#042637]\"\n-          />\n-          <button\n-            onClick={handleSend}\n-            className=\"p-2 text-[#042637] hover:text-[#E1DDBF] transition-colors\"\n-          >\n-            <Send size={20} />\n-          </button>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-MessengerChat.propTypes = {\n-  messages: PropTypes.arrayOf(\n-    PropTypes.shape({\n-      id: PropTypes.number.isRequired,\n-      text: PropTypes.string.isRequired,\n-      sender: PropTypes.oneOf(['user', 'other']).isRequired,\n-    })\n-  ),\n-  newMessage: PropTypes.string,\n-  handleSend: PropTypes.func,\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731369505417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import React, { useState } from 'react'\n import PropTypes from 'prop-types'\n import { Send } from 'lucide-react'\n \n-import socket from '@/lib/socket'\n+import io from 'socket.io-client'\n \n \n \n export function MessengerChat() {\n"
                },
                {
                    "date": 1731369737082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,11 @@\n import React, { useState } from 'react'\n import PropTypes from 'prop-types'\n import { Send } from 'lucide-react'\n \n-import io from 'socket.io-client'\n \n-const socket = io('http://localhost:3001')\n \n \n-\n export function MessengerChat() {\n   const [messages, setMessages] = useState([\n     { id: 1, text: \"Hola, ¿cómo estás?\", sender: 'other' },\n     { id: 2, text: \"¡Hola! Estoy bien, gracias. ¿Y tú?\", sender: 'user' },\n"
                },
                {
                    "date": 1731369860230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+'use client'\n+\n+import React, { useState } from 'react'\n+import PropTypes from 'prop-types'\n+import { Send } from 'lucide-react'\n+\n+const MessengerChat = () => {\n+  const [messages, setMessages] = useState([\n+    { id: 1, text: \"Hola, ¿cómo estás?\", sender: 'other' },\n+    { id: 2, text: \"¡Hola! Estoy bien, gracias. ¿Y tú?\", sender: 'user' },\n+    { id: 3, text: \"Muy bien también, gracias por preguntar.\", sender: 'other' },\n+  ])\n+  const [newMessage, setNewMessage] = useState('')\n+\n+  const handleSend = () => {\n+    if (newMessage.trim()) {\n+      setMessages([...messages, { id: messages.length + 1, text: newMessage, sender: 'user' }])\n+      setNewMessage('')\n+    }\n+  }\n+\n+  return (\n+    <div className=\"flex flex-col h-screen max-w-md mx-auto bg-[#D8C7A9]\">\n+      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+        {messages.map((message) => (\n+          <div\n+            key={message.id}\n+            className={`max-w-[70%] p-3 rounded-lg ${\n+              message.sender === 'user'\n+                ? 'ml-auto bg-[#ECE3D4]'\n+                : 'bg-[#E1DDBF]'\n+            }`}\n+          >\n+            <p className=\"text-[#042637]\">{message.text}</p>\n+          </div>\n+        ))}\n+      </div>\n+      <div className=\"p-4 bg-[#D8C7A9]\">\n+        <div className=\"flex items-center bg-white rounded-full\">\n+          <input\n+            type=\"text\"\n+            value={newMessage}\n+            onChange={(e) => setNewMessage(e.target.value)}\n+            placeholder=\"Escribe un mensaje...\"\n+            className=\"flex-1 p-2 bg-transparent outline-none text-[#042637]\"\n+          />\n+          <button\n+            onClick={handleSend}\n+            className=\"p-2 text-[#042637] hover:text-[#E1DDBF] transition-colors\"\n+          >\n+            <Send size={20} />\n+          </button>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+MessengerChat.propTypes = {\n+  messages: PropTypes.arrayOf(\n+    PropTypes.shape({\n+      id: PropTypes.number.isRequired,\n+      text: PropTypes.string.isRequired,\n+      sender: PropTypes.oneOf(['user', 'other']).isRequired,\n+    })\n+  ),\n+  newMessage: PropTypes.string,\n+  handleSend: PropTypes.func,\n+}\n+\n+export default MessengerChat\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731369259074,
            "name": "Commit-0",
            "content": "'use client'\n\nimport React, { useState } from 'react'\nimport { Send } from 'lucide-react'\n\ninterface Message {\n  id: number\n  text: string\n  sender: 'user' | 'other'\n}\n\nexport function MessengerChat() {\n  const [messages, setMessages] = useState<Message[]>([\n    { id: 1, text: \"Hola, ¿cómo estás?\", sender: 'other' },\n    { id: 2, text: \"¡Hola! Estoy bien, gracias. ¿Y tú?\", sender: 'user' },\n    { id: 3, text: \"Muy bien también, gracias por preguntar.\", sender: 'other' },\n  ])\n  const [newMessage, setNewMessage] = useState('')\n\n  const handleSend = () => {\n    if (newMessage.trim()) {\n      setMessages([...messages, { id: messages.length + 1, text: newMessage, sender: 'user' }])\n      setNewMessage('')\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col h-screen max-w-md mx-auto bg-[#D8C7A9]\">\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.map((message) => (\n          <div\n            key={message.id}\n            className={`max-w-[70%] p-3 rounded-lg ${\n              message.sender === 'user'\n                ? 'ml-auto bg-[#ECE3D4]'\n                : 'bg-[#E1DDBF]'\n            }`}\n          >\n            <p className=\"text-[#042637]\">{message.text}</p>\n          </div>\n        ))}\n      </div>\n      <div className=\"p-4 bg-[#D8C7A9]\">\n        <div className=\"flex items-center bg-white rounded-full\">\n          <input\n            type=\"text\"\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n            placeholder=\"Escribe un mensaje...\"\n            className=\"flex-1 p-2 bg-transparent outline-none text-[#042637]\"\n          />\n          <button\n            onClick={handleSend}\n            className=\"p-2 text-[#042637] hover:text-[#E1DDBF] transition-colors\"\n          >\n            <Send size={20} />\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}"
        }
    ]
}