{
    "sourceFile": "src/components/component/panel-donaciones.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 60,
            "patches": [
                {
                    "date": 1731952718189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731952991574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,169 +0,0 @@\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b)\n-  }, [donaciones])\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#042637]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">${totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#042637]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#042637]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">${mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#042637]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#042637]\">Donante</TableHead>\n-                <TableHead className=\"text-[#042637]\">Producto</TableHead>\n-                <TableHead className=\"text-[#042637]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#042637]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#042637]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#042637]\">Total</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">${donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">${donacion.totalValue.toFixed(2)}</TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731953154497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n"
                },
                {
                    "date": 1731953161634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,4 +167,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731953212852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,11 @@\n                 <TableHead className=\"text-white\">Donante</TableHead>\n                 <TableHead className=\"text-white\">Producto</TableHead>\n                 <TableHead className=\"text-white\">Cantidad</TableHead>\n                 <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor \n+                  \n+                </TableHead>\n                 <TableHead className=\"text-white\">Total</TableHead>\n               </TableRow>\n             </TableHeader>\n             <TableBody>\n"
                },
                {
                    "date": 1731953222325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad/kg\n+                </TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731953812553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731953840361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-red\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731953852687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n       </div>\n \n       <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n         <CardHeader>\n-          <CardTitle className=\"text-red\">Lista de Donaciones</CardTitle>\n+          <CardTitle className=\"bg-[#E1DDBF]\">Lista de Donaciones</CardTitle>\n         </CardHeader>\n         <CardContent>\n           <Table>\n             <TableHeader>\n@@ -209,563 +209,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad/kg\n-                </TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor \n-                  \n-                </TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731953863151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n       </div>\n \n       <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n         <CardHeader>\n-          <CardTitle className=\"bg-[#E1DDBF]\">Lista de Donaciones</CardTitle>\n+          <CardTitle className=\"text-E1DDBF\">Lista de Donaciones</CardTitle>\n         </CardHeader>\n         <CardContent>\n           <Table>\n             <TableHeader>\n"
                },
                {
                    "date": 1731953872636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731953937031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731953950379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731953957559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n       \n       <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n         <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n           <CardHeader>\n-            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n+            <CardTitle className=\"text-[#E1DDBF]\">Total Donaciones</CardTitle>\n           </CardHeader>\n           <CardContent>\n             <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n           </CardContent>\n@@ -209,644 +209,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-E1DDBF\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731953965142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n       </div>\n \n       <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n         <CardHeader>\n-          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n+          <CardTitle className=\"[#E1DDBF]\">Lista de Donaciones</CardTitle>\n         </CardHeader>\n         <CardContent>\n           <Table>\n             <TableHeader>\n"
                },
                {
                    "date": 1731953977507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#E1DDBF]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#E1DDBF]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731953991264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#E1DDBF]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731954007986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n         </Card>\n       </div>\n       \n       <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#E1DDBF] text-white\">\n           Reporte Semanal\n         </Button>\n         <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n           Reporte Mensual\n@@ -209,431 +209,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#E1DDBF]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#E1DDBF]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"[#E1DDBF]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731954020605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#E1DDBF]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731954026945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#E1DDBF]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#E1DDBF]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#E1DDBF]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#E1DDBF]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#E1DDBF]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731990161644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,639 +0,0 @@\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#E1DDBF]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#E1DDBF]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#E1DDBF]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#E1DDBF]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#E1DDBF]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#E1DDBF]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#E1DDBF] text-white\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#E1DDBF]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731990461824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-white\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-red-600 text-white mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-white\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731990470015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-white\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-red-600 text-[#042637] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-white\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731990506685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,9 +190,9 @@\n         </Card>\n       </div>\n       \n       <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-text-[#042637]\">\n           Reporte Semanal\n         </Button>\n         <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n           Reporte Mensual\n@@ -231,9 +231,9 @@\n                   <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n                   <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n                   <TableCell className=\"text-[#042637]\">\n                     <Button onClick={() => handleEditDonation(donacion)} className=\"bg-red-600 text-[#042637] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-white\">Eliminar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#042637]\">Eliminar</Button>\n                   </TableCell>\n                 </TableRow>\n               ))}\n             </TableBody>\n@@ -252,261 +252,5 @@\n         />\n       )}\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-white\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-red-600 text-white mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-white\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731990512263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,12 +190,12 @@\n         </Card>\n       </div>\n       \n       <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-text-[#042637]\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#042637]\">\n           Reporte Semanal\n         </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#042637]\">\n           Reporte Mensual\n         </Button>\n         <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n           Reporte Anual\n"
                },
                {
                    "date": 1731990533432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,12 +190,12 @@\n         </Card>\n       </div>\n       \n       <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#042637]\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n           Reporte Semanal\n         </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#042637]\">\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n           Reporte Mensual\n         </Button>\n         <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n           Reporte Anual\n"
                },
                {
                    "date": 1731990565079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         </Card>\n         \n         <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n           <CardHeader>\n-            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n+            <CardTitle className=\"text-text-[#042637]\">Total Productos</CardTitle>\n           </CardHeader>\n           <CardContent>\n             <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n           </CardContent>\n"
                },
                {
                    "date": 1731990582003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-white\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-red-600 text-[#042637] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#042637]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731990846133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#ECE3D4]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#ECE3D4]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#ECE3D4]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#ECE3D4]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-white\">Donante</TableHead>\n+                <TableHead className=\"text-white\">Producto</TableHead>\n+                <TableHead className=\"text-white\">Cantidad</TableHead>\n+                <TableHead className=\"text-white\">Unidad</TableHead>\n+                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-white\">Total</TableHead>\n+                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-white\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#ECE3D4]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#ECE3D4]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#ECE3D4]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#ECE3D4]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#ECE3D4]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#ECE3D4]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#ECE3D4]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#ECE3D4]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-red-600 text-white mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-white\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731991352415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,257 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import DonationForm from \"@/components/component/donationsform\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <DonationForm\n+          charity={{ _id: charityId, nombre: \"Nombre de la organización\" }} // Asegúrate de pasar la información correcta de la organización\n+          initialData={editingDonation}\n+          onCancel={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731991624050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { useRouter } from 'next/navigation'\n import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n import { Button } from \"@/components/ui/button\"\n-import DonationForm from \"@/components/component/donationsform\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n \n export function PanelDonacionesComponent() {\n   const [donaciones, setDonaciones] = useState([])\n   const [isAuthenticated, setIsAuthenticated] = useState(false)\n@@ -241,265 +241,8 @@\n         </CardContent>\n       </Card>\n \n       {editingDonation && (\n-        <DonationForm\n-          charity={{ _id: charityId, nombre: \"Nombre de la organización\" }} // Asegúrate de pasar la información correcta de la organización\n-          initialData={editingDonation}\n-          onCancel={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#ECE3D4]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#ECE3D4]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#ECE3D4]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#ECE3D4]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-white\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#ECE3D4]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#ECE3D4]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#ECE3D4]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#ECE3D4]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#ECE3D4]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#ECE3D4]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#ECE3D4]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#ECE3D4]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-red-600 text-white mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-white\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n         <FormularioDonacionComponent\n           initialData={editingDonation}\n           onClose={() => setEditingDonation(null)}\n           onSave={() => {\n@@ -509,517 +252,5 @@\n         />\n       )}\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-white\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-red-600 text-[#042637] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#042637]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-text-[#042637]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-white\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-white\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-white\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-white\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-white\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-white\">Donante</TableHead>\n-                <TableHead className=\"text-white\">Producto</TableHead>\n-                <TableHead className=\"text-white\">Cantidad</TableHead>\n-                <TableHead className=\"text-white\">Unidad</TableHead>\n-                <TableHead className=\"text-white\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-white\">Total</TableHead>\n-                <TableHead className=\"text-white\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-white\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-red-600 text-[#042637] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#042637]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731991691512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-[#042637] text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731991729576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,9 @@\n         <CardContent>\n           <Table>\n             <TableHeader>\n               <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"[#042637]\">Donante</TableHead>\n                 <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n                 <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n                 <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n                 <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n"
                },
                {
                    "date": 1731991741340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,10 +209,10 @@\n         <CardContent>\n           <Table>\n             <TableHeader>\n               <TableRow>\n-                <TableHead className=\"[#042637]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#042637]\">Donante</TableHead>\n+                <TableHead className=\"text-[#042637]\">Producto</TableHead>\n                 <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n                 <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n                 <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n                 <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n@@ -252,261 +252,5 @@\n         />\n       )}\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731991747225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#042637]\">Donante</TableHead>\n+                <TableHead className=\"text-[#042637]\">Producto</TableHead>\n+                <TableHead className=\"text-[#042637]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#042637]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#042637]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-[#042637] text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731991753317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#042637]\">Donante</TableHead>\n+                <TableHead className=\"text-[#042637]\">Producto</TableHead>\n+                <TableHead className=\"text-[#042637]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#042637]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#042637]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#042637]\">Total</TableHead>\n+                <TableHead className=\"text-[#042637]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#042637]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-[#042637] text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731992167289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731992491973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1024 +0,0 @@\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#042637]\">Donante</TableHead>\n-                <TableHead className=\"text-[#042637]\">Producto</TableHead>\n-                <TableHead className=\"text-[#042637]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#042637]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#042637]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#042637]\">Total</TableHead>\n-                <TableHead className=\"text-[#042637]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#042637]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-[#042637] text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#042637]\">Donante</TableHead>\n-                <TableHead className=\"text-[#042637]\">Producto</TableHead>\n-                <TableHead className=\"text-[#042637]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#042637]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#042637]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-[#042637] text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#042637]\">Donante</TableHead>\n-                <TableHead className=\"text-[#042637]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-[#042637] text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731992597214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731992722718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731993031235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731993373430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,768 +0,0 @@\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731993790411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion._id}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731993831271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,259 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        \n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion._id}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731993852398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+        console\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion._id}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731993887910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,8 @@\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n           }\n         })\n-        console\n         if (!res.ok) {\n           throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n         }\n \n@@ -254,522 +253,5 @@\n         />\n       )}\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        \n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion._id}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion._id}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731993893148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        console.\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion._id}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731994067294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        console.log('Donaciones:', data)\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731994304935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        console.log('Donaciones:', data)\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user', donationId })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731994621395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,778 +254,5 @@\n         />\n       )}\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        console.log('Donaciones:', data)\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        console.\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion._id}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user' })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion._id !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion._id}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion._id)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731995001148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,260 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        console.log('Donaciones:', data)\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const token = localStorage.getItem('authToken')\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user', donationId })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731995218611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,263 +256,5 @@\n         />\n       )}\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        console.log('Donaciones:', data)\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user', donationId })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731995448075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,260 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        console.log('Donaciones:', data)\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const token = localStorage.getItem('authToken')\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user', donationId })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={() => setEditingDonation(null)}\n+          onSave={() => {\n+            setEditingDonation(null)\n+            fetchDonaciones()\n+          }}\n+        />\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731995723440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,520 +0,0 @@\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        console.log('Donaciones:', data)\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const token = localStorage.getItem('authToken')\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user', donationId })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        console.log('Donaciones:', data)\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const token = localStorage.getItem('authToken')\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user', donationId })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <FormularioDonacionComponent\n-          initialData={editingDonation}\n-          onClose={() => setEditingDonation(null)}\n-          onSave={() => {\n-            setEditingDonation(null)\n-            fetchDonaciones()\n-          }}\n-        />\n-      )}\n-    </div>\n-  )\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731996924253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,270 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        console.log('Donaciones:', data)\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const token = localStorage.getItem('authToken')\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user', donationId })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"mb-4 flex justify-end\">\n+        <Button onClick={() => router.push('/formularioD')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Crear Donación\n+        </Button>\n+      </div>\n+\n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\n+          <div className=\"bg-white p-4 rounded-lg shadow-lg\">\n+            <FormularioDonacionComponent\n+              initialData={editingDonation}\n+              onClose={() => setEditingDonation(null)}\n+              onSave={() => {\n+                setEditingDonation(null)\n+                fetchDonaciones()\n+              }}\n+            />\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731997293761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,270 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!charityId) return\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        console.log('Donaciones:', data)\n+        setDonaciones(data.report)\n+        setTotalValue(data.totalValue)\n+      } catch (error) {\n+        console.error('Error fetching donations:', error)\n+      }\n+    }\n+\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const token = localStorage.getItem('authToken')\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user', donationId })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"mb-4 flex justify-end\">\n+        <Button onClick={() => router.push('/formularioD')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Crear Donación\n+        </Button>\n+      </div>\n+\n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\n+          <div className=\"bg-white p-4 rounded-lg shadow-lg\">\n+            <FormularioDonacionComponent\n+              initialData={editingDonation}\n+              onClose={() => setEditingDonation(null)}\n+              onSave={() => {\n+                setEditingDonation(null)\n+                fetchDonaciones()\n+              }}\n+            />\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731997327073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,304 +53,34 @@\n   useEffect(() => {\n     checkAuthentication()\n   }, [])\n \n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n+  const fetchDonaciones = async () => {\n+    if (!charityId) return\n \n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        console.log('Donaciones:', data)\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n     try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n         method: 'GET',\n         headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Content-Type': 'application/json',\n           'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n         }\n       })\n \n       if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+        throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n       }\n \n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const token = localStorage.getItem('authToken')\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user', donationId })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"mb-4 flex justify-end\">\n-        <Button onClick={() => router.push('/formularioD')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Crear Donación\n-        </Button>\n-      </div>\n-\n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\n-          <div className=\"bg-white p-4 rounded-lg shadow-lg\">\n-            <FormularioDonacionComponent\n-              initialData={editingDonation}\n-              onClose={() => setEditingDonation(null)}\n-              onSave={() => {\n-                setEditingDonation(null)\n-                fetchDonaciones()\n-              }}\n-            />\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n       const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n+      console.log('Donaciones:', data)\n+      setDonaciones(data.report)\n+      setTotalValue(data.totalValue)\n     } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n+      console.error('Error fetching donations:', error)\n     }\n   }\n \n   useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!charityId) return\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        console.log('Donaciones:', data)\n-        setDonaciones(data.report)\n-        setTotalValue(data.totalValue)\n-      } catch (error) {\n-        console.error('Error fetching donations:', error)\n-      }\n-    }\n-\n     if (isAuthenticated && isOrganization) {\n       fetchDonaciones()\n     }\n   }, [charityId, isAuthenticated, isOrganization])\n"
                },
                {
                    "date": 1731997402915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,191 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+import Modal from \"@/components/ui/modal\" // Supuesto componente Modal\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const [isModalOpen, setIsModalOpen] = useState(false)\n+  const router = useRouter()\n+\n+  // Verifica la autenticación\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error('Error al obtener perfil')\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id)\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error(error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  // Obtiene donaciones\n+  const fetchDonaciones = async () => {\n+    if (!charityId) return\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error('Error al obtener donaciones')\n+      }\n+\n+      const data = await res.json()\n+      setDonaciones(data.report)\n+      setTotalValue(data.totalValue)\n+    } catch (error) {\n+      console.error(error)\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  useEffect(() => {\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  // Calcula datos para estadísticas\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      acc[donacion.donorName] = (acc[donacion.donorName] || 0) + donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+    setIsModalOpen(true)\n+  }\n+\n+  const handleCloseModal = () => {\n+    setEditingDonation(null)\n+    setIsModalOpen(false)\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#042637]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#042637]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#042637]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+\n+      <div className=\"mb-4 flex justify-end\">\n+        <Button onClick={() => setIsModalOpen(true)} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Crear Donación\n+        </Button>\n+      </div>\n+\n+      <Table>\n+        <TableHeader>\n+          <TableRow>\n+            <TableHead>Nombre</TableHead>\n+            <TableHead>Producto</TableHead>\n+            <TableHead>Cantidad</TableHead>\n+            <TableHead>Acciones</TableHead>\n+          </TableRow>\n+        </TableHeader>\n+        <TableBody>\n+          {donaciones.map((donacion) => (\n+            <TableRow key={donacion.donationId}>\n+              <TableCell>{donacion.donorName}</TableCell>\n+              <TableCell>{donacion.itemType}</TableCell>\n+              <TableCell>{donacion.quantity}</TableCell>\n+              <TableCell>\n+                <Button onClick={() => handleEditDonation(donacion)}>Editar</Button>\n+              </TableCell>\n+            </TableRow>\n+          ))}\n+        </TableBody>\n+      </Table>\n+\n+      {isModalOpen && (\n+        <Modal onClose={handleCloseModal}>\n+          <FormularioDonacionComponent\n+            initialData={editingDonation}\n+            onClose={handleCloseModal}\n+            onSave={fetchDonaciones}\n+          />\n+        </Modal>\n+      )}\n+    </div>\n+  )\n+}\n"
                },
                {
                    "date": 1731997413873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,461 +0,0 @@\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-import Modal from \"@/components/ui/modal\" // Supuesto componente Modal\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const [isModalOpen, setIsModalOpen] = useState(false)\n-  const router = useRouter()\n-\n-  // Verifica la autenticación\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error('Error al obtener perfil')\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id)\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error(error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  // Obtiene donaciones\n-  const fetchDonaciones = async () => {\n-    if (!charityId) return\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error('Error al obtener donaciones')\n-      }\n-\n-      const data = await res.json()\n-      setDonaciones(data.report)\n-      setTotalValue(data.totalValue)\n-    } catch (error) {\n-      console.error(error)\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  useEffect(() => {\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  // Calcula datos para estadísticas\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      acc[donacion.donorName] = (acc[donacion.donorName] || 0) + donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-    setIsModalOpen(true)\n-  }\n-\n-  const handleCloseModal = () => {\n-    setEditingDonation(null)\n-    setIsModalOpen(false)\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#042637]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#042637]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#042637]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-\n-      <div className=\"mb-4 flex justify-end\">\n-        <Button onClick={() => setIsModalOpen(true)} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Crear Donación\n-        </Button>\n-      </div>\n-\n-      <Table>\n-        <TableHeader>\n-          <TableRow>\n-            <TableHead>Nombre</TableHead>\n-            <TableHead>Producto</TableHead>\n-            <TableHead>Cantidad</TableHead>\n-            <TableHead>Acciones</TableHead>\n-          </TableRow>\n-        </TableHeader>\n-        <TableBody>\n-          {donaciones.map((donacion) => (\n-            <TableRow key={donacion.donationId}>\n-              <TableCell>{donacion.donorName}</TableCell>\n-              <TableCell>{donacion.itemType}</TableCell>\n-              <TableCell>{donacion.quantity}</TableCell>\n-              <TableCell>\n-                <Button onClick={() => handleEditDonation(donacion)}>Editar</Button>\n-              </TableCell>\n-            </TableRow>\n-          ))}\n-        </TableBody>\n-      </Table>\n-\n-      {isModalOpen && (\n-        <Modal onClose={handleCloseModal}>\n-          <FormularioDonacionComponent\n-            initialData={editingDonation}\n-            onClose={handleCloseModal}\n-            onSave={fetchDonaciones}\n-          />\n-        </Modal>\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect, useMemo } from 'react'\n-import { useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Button } from \"@/components/ui/button\"\n-import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n-\n-export function PanelDonacionesComponent() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [isAuthenticated, setIsAuthenticated] = useState(false)\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [charityId, setCharityId] = useState(\"\")\n-  const [totalValue, setTotalValue] = useState(0)\n-  const [editingDonation, setEditingDonation] = useState(null)\n-  const router = useRouter()\n-\n-  const checkAuthentication = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) {\n-      router.push('/logind')\n-      return\n-    }\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      if (data.charity && data.charity.userType === 'charity') {\n-        setIsAuthenticated(true)\n-        setIsOrganization(true)\n-        setCharityId(data.charity.id) // Guardar charityId en el estado\n-      } else {\n-        router.push('/logind')\n-      }\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      router.push('/logind')\n-    }\n-  }\n-\n-  useEffect(() => {\n-    checkAuthentication()\n-  }, [])\n-\n-  const fetchDonaciones = async () => {\n-    if (!charityId) return\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      console.log('Donaciones:', data)\n-      setDonaciones(data.report)\n-      setTotalValue(data.totalValue)\n-    } catch (error) {\n-      console.error('Error fetching donations:', error)\n-    }\n-  }\n-\n-  useEffect(() => {\n-    if (isAuthenticated && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isAuthenticated, isOrganization])\n-\n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error generating report:', error)\n-    }\n-  }\n-\n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n-  }\n-\n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const token = localStorage.getItem('authToken')\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user', donationId })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n-  }\n-\n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"mb-4 flex justify-end\">\n-        <Button onClick={() => router.push('/formularioD')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Crear Donación\n-        </Button>\n-      </div>\n-\n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-        <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n-              </TableRow>\n-            </TableHeader>\n-            <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n-        </CardContent>\n-      </Card>\n-\n-      {editingDonation && (\n-        <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\n-          <div className=\"bg-white p-4 rounded-lg shadow-lg\">\n-            <FormularioDonacionComponent\n-              initialData={editingDonation}\n-              onClose={() => setEditingDonation(null)}\n-              onSave={() => {\n-                setEditingDonation(null)\n-                fetchDonaciones()\n-              }}\n-            />\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  )\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731997803970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,218 +53,92 @@\n   useEffect(() => {\n     checkAuthentication()\n   }, [])\n \n-  const fetchDonaciones = async () => {\n-    if (!charityId) return\n-\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      console.log('Donaciones:', data)\n-      setDonaciones(data.report)\n-      setTotalValue(data.totalValue)\n-    } catch (error) {\n-      console.error('Error fetching donations:', error)\n-    }\n-  }\n-\n   useEffect(() => {\n-    if (isAuthenticated && isOrganization) {\n+    if (isAuthenticated && isOrganization && charityId) {\n       fetchDonaciones()\n     }\n-  }, [charityId, isAuthenticated, isOrganization])\n+  }, [isAuthenticated, isOrganization, charityId])\n \n-  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n-\n-  const mayorDonante = useMemo(() => {\n-    if (donaciones.length === 0) return [\"N/A\", 0]\n-\n-    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n-      if (!acc[donacion.donorName]) {\n-        acc[donacion.donorName] = 0\n-      }\n-      acc[donacion.donorName] += donacion.totalValue\n-      return acc\n-    }, {})\n-\n-    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n-  }, [donaciones])\n-\n-  const handleGenerateReport = async (period) => {\n+  const fetchDonaciones = async () => {\n     try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n-        }\n-      })\n-\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind?charityId=${charityId}`)\n       if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+        throw new Error(`Error al obtener las donaciones: ${res.status} ${res.statusText}`)\n       }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n+      const data = await res.json()\n+      setDonaciones(data.donations)\n+      const total = data.donations.reduce((sum, donacion) => sum + (donacion.valuePerUnit * donacion.quantity), 0)\n+      setTotalValue(total)\n     } catch (error) {\n-      console.error('Error generating report:', error)\n+      console.error('Error al obtener las donaciones:', error)\n     }\n   }\n \n-  const handleEditDonation = (donation) => {\n-    setEditingDonation(donation)\n+  const handleEditar = (donacion) => {\n+    setEditingDonation(donacion)\n   }\n \n-  const handleDeleteDonation = async (donationId) => {\n-    try {\n-      const token = localStorage.getItem('authToken')\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n-        method: 'DELETE',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user', donationId })\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n-      }\n-\n-      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n-    } catch (error) {\n-      console.error('Error deleting donation:', error)\n-    }\n+  const handleCerrarFormulario = () => {\n+    setEditingDonation(null)\n   }\n \n-  if (!isAuthenticated || !isOrganization) {\n-    return <div>Cargando...</div>\n+  const handleGuardar = () => {\n+    setEditingDonation(null)\n+    fetchDonaciones()\n   }\n \n+  const columns = useMemo(() => [\n+    { label: 'Nombre', accessor: 'donorName' },\n+    { label: 'Producto', accessor: 'itemType' },\n+    { label: 'Cantidad', accessor: 'quantity' },\n+    { label: 'Unidad', accessor: 'unit' },\n+    { label: 'Valor por Unidad', accessor: 'valuePerUnit' },\n+    { label: 'Total', accessor: 'total' }\n+  ], [])\n+\n   return (\n-    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n-      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n-      \n-      <div className=\"mb-4 flex justify-end\">\n-        <Button onClick={() => router.push('/formularioD')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Crear Donación\n-        </Button>\n-      </div>\n-\n-      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-        \n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n-          </CardContent>\n-        </Card>\n-\n-        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n-          <CardHeader>\n-            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n-            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n-          </CardContent>\n-        </Card>\n-      </div>\n-      \n-      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Semanal\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Mensual\n-        </Button>\n-        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n-          Reporte Anual\n-        </Button>\n-      </div>\n-\n-      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+    <div className=\"min-h-screen flex flex-col items-center bg-[#ECE3D4]\">\n+      <h1 className=\"text-3xl font-bold text-[#042637] mt-8\">Panel de Donaciones</h1>\n+      <Card className=\"w-full max-w-4xl mt-6\">\n         <CardHeader>\n-          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+          <CardTitle>Donaciones In-kind</CardTitle>\n         </CardHeader>\n         <CardContent>\n           <Table>\n             <TableHeader>\n               <TableRow>\n-                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n-                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+                {columns.map(column => (\n+                  <TableCell key={column.accessor}>{column.label}</TableCell>\n+                ))}\n+                <TableCell>Acciones</TableCell>\n               </TableRow>\n             </TableHeader>\n             <TableBody>\n-              {donaciones.map((donacion, index) => (\n-                <TableRow key={index}>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n\\ No newline at end of file\n-                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n-                  <TableCell className=\"text-[#042637]\">\n-                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n-                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+              {donaciones.map((donacion) => (\n+                <TableRow key={donacion.donationId}>\n+                  {columns.map((column) => (\n+                    <TableCell key={column.accessor}>{donacion[column.accessor]}</TableCell>\n+                  ))}\n+                  <TableCell>\n+                    <Button onClick={() => handleEditar(donacion)}>Editar</Button>\n                   </TableCell>\n                 </TableRow>\n               ))}\n             </TableBody>\n           </Table>\n+          <div className=\"mt-4\">\n+            <h2>Total Donado: S/{totalValue}</h2>\n+          </div>\n         </CardContent>\n       </Card>\n-\n       {editingDonation && (\n-        <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\n-          <div className=\"bg-white p-4 rounded-lg shadow-lg\">\n-            <FormularioDonacionComponent\n-              initialData={editingDonation}\n-              onClose={() => setEditingDonation(null)}\n-              onSave={() => {\n-                setEditingDonation(null)\n-                fetchDonaciones()\n-              }}\n-            />\n-          </div>\n-        </div>\n+        <FormularioDonacionComponent\n+          initialData={editingDonation}\n+          onClose={handleCerrarFormulario}\n+          onSave={handleGuardar}\n+        />\n       )}\n     </div>\n   )\n-}\n+}\n"
                },
                {
                    "date": 1731997932757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,269 @@\n+'use client'\n+\n+import { useState, useEffect, useMemo } from 'react'\n+import { useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Button } from \"@/components/ui/button\"\n+import { FormularioDonacionComponent } from \"@/components/component/formulario-donacion\"\n+\n+export function PanelDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [isAuthenticated, setIsAuthenticated] = useState(false)\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [charityId, setCharityId] = useState(\"\")\n+  const [totalValue, setTotalValue] = useState(0)\n+  const [editingDonation, setEditingDonation] = useState(null)\n+  const router = useRouter()\n+\n+  const checkAuthentication = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) {\n+      router.push('/logind')\n+      return\n+    }\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      if (data.charity && data.charity.userType === 'charity') {\n+        setIsAuthenticated(true)\n+        setIsOrganization(true)\n+        setCharityId(data.charity.id) // Guardar charityId en el estado\n+      } else {\n+        router.push('/logind')\n+      }\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      router.push('/logind')\n+    }\n+  }\n+\n+  useEffect(() => {\n+    checkAuthentication()\n+  }, [])\n+\n+  const fetchDonaciones = async () => {\n+    if (!charityId) return\n+\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      console.log('Donaciones:', data)\n+      setDonaciones(data.report)\n+      setTotalValue(data.totalValue)\n+    } catch (error) {\n+      console.error('Error fetching donations:', error)\n+    }\n+  }\n+\n+  useEffect(() => {\n+    if (isAuthenticated && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isAuthenticated, isOrganization])\n+\n+  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n+\n+  const mayorDonante = useMemo(() => {\n+    if (donaciones.length === 0) return [\"N/A\", 0]\n+\n+    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n+      if (!acc[donacion.donorName]) {\n+        acc[donacion.donorName] = 0\n+      }\n+      acc[donacion.donorName] += donacion.totalValue\n+      return acc\n+    }, {})\n+\n+    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b, [\"N/A\", 0])\n+  }, [donaciones])\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/excel/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n+        }\n+      })\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error generating report:', error)\n+    }\n+  }\n+\n+  const handleEditDonation = (donation) => {\n+    setEditingDonation(donation)\n+  }\n+\n+  const handleDeleteDonation = async (donationId) => {\n+    try {\n+      const token = localStorage.getItem('authToken')\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${donationId}`, {\n+        method: 'DELETE',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+        body: JSON.stringify({ userId: charityId, reason: 'Deleted by user', donationId })\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error deleting donation: ${res.status} ${res.statusText}`)\n+      }\n+\n+      setDonaciones(donaciones.filter(donacion => donacion.donationId !== donationId))\n+    } catch (error) {\n+      console.error('Error deleting donation:', error)\n+    }\n+  }\n+\n+  if (!isAuthenticated || !isOrganization) {\n+    return <div>Cargando...</div>\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n+      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n+      \n+      <div className=\"mb-4 flex justify-end\">\n+        <Button onClick={() => router.push('/formularioD')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Crear Donación\n+        </Button>\n+      </div>\n+\n+      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Donaciones</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">S/{totalValue.toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+        \n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Total Productos</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n+          </CardContent>\n+        </Card>\n+\n+        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+          <CardHeader>\n+            <CardTitle className=\"text-[#ECE3D4]\">Mayor Donante</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n+            <p className=\"text-lg text-[#042637]\">S/{mayorDonante[1].toFixed(2)}</p>\n+          </CardContent>\n+        </Card>\n+      </div>\n+      \n+      <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+        <Button onClick={() => handleGenerateReport('weekly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Semanal\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('monthly')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Mensual\n+        </Button>\n+        <Button onClick={() => handleGenerateReport('annual')} className=\"bg-[#042637] text-[#ECE3D4]\">\n+          Reporte Anual\n+        </Button>\n+      </div>\n+\n+      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n+        <CardHeader>\n+          <CardTitle className=\"text-[#ECE3D4]\">Lista de Donaciones</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <Table>\n+            <TableHeader>\n+              <TableRow>\n+                <TableHead className=\"text-[#ECE3D4]\">ID</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Donante</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Producto</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Cantidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Valor por Unidad</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Total</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Fecha y Hora</TableHead>\n+                <TableHead className=\"text-[#ECE3D4]\">Acciones</TableHead>\n+              </TableRow>\n+            </TableHeader>\n+            <TableBody>\n+              {donaciones.map((donacion, index) => (\n+                <TableRow key={index}>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donationId}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.valuePerUnit.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">S/{donacion.totalValue.toFixed(2)}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">{new Date(donacion.createdAt).toLocaleString()}</TableCell>\n+                  <TableCell className=\"text-[#042637]\">\n+                    <Button onClick={() => handleEditDonation(donacion)} className=\"bg-[#042637] text-[#ECE3D4] mr-2\">Modificar</Button>\n+                    <Button onClick={() => handleDeleteDonation(donacion.donationId)} className=\"bg-red-600 text-[#ECE3D4]\">Eliminar</Button>\n+                  </TableCell>\n+                </TableRow>\n+              ))}\n+            </TableBody>\n+          </Table>\n+        </CardContent>\n+      </Card>\n+\n+      {editingDonation && (\n+        <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\n+          <div className=\"bg-white p-4 rounded-lg shadow-lg\">\n+            <FormularioDonacionComponent\n+              initialData={editingDonation}\n+              onClose={() => setEditingDonation(null)}\n+              onSave={() => {\n+                setEditingDonation(null)\n+                fetchDonaciones()\n+              }}\n+            />\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731952718189,
            "name": "Commit-0",
            "content": "'use client'\n\nimport { useState, useEffect, useMemo } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n\nexport function PanelDonacionesComponent() {\n  const [donaciones, setDonaciones] = useState([])\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n  const [isOrganization, setIsOrganization] = useState(false)\n  const [charityId, setCharityId] = useState(\"\")\n  const [totalValue, setTotalValue] = useState(0)\n  const router = useRouter()\n\n  const checkAuthentication = async () => {\n    const token = localStorage.getItem('authToken')\n    if (!token) {\n      router.push('/logind')\n      return\n    }\n\n    try {\n      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n      })\n\n      if (!res.ok) {\n        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n      }\n\n      const data = await res.json()\n      if (data.charity && data.charity.userType === 'charity') {\n        setIsAuthenticated(true)\n        setIsOrganization(true)\n        setCharityId(data.charity.id) // Guardar charityId en el estado\n      } else {\n        router.push('/logind')\n      }\n    } catch (error) {\n      console.error('Error obteniendo el usuario:', error)\n      router.push('/logind')\n    }\n  }\n\n  useEffect(() => {\n    checkAuthentication()\n  }, [])\n\n  useEffect(() => {\n    const fetchDonaciones = async () => {\n      if (!charityId) return\n\n      try {\n        const res = await fetch(`http://localhost:3001/mercadopago/report/in-kind/${charityId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        })\n\n        if (!res.ok) {\n          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n        }\n\n        const data = await res.json()\n        setDonaciones(data.report)\n        setTotalValue(data.totalValue)\n      } catch (error) {\n        console.error('Error fetching donations:', error)\n      }\n    }\n\n    if (isAuthenticated && isOrganization) {\n      fetchDonaciones()\n    }\n  }, [charityId, isAuthenticated, isOrganization])\n\n  const totalProductos = donaciones.reduce((acc, donacion) => acc + donacion.quantity, 0)\n\n  const mayorDonante = useMemo(() => {\n    const donantesAgrupados = donaciones.reduce((acc, donacion) => {\n      if (!acc[donacion.donorName]) {\n        acc[donacion.donorName] = 0\n      }\n      acc[donacion.donorName] += donacion.totalValue\n      return acc\n    }, {})\n\n    return Object.entries(donantesAgrupados).reduce((a, b) => a[1] > b[1] ? a : b)\n  }, [donaciones])\n\n  if (!isAuthenticated || !isOrganization) {\n    return <div>Cargando...</div>\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#ECE3D4] p-8\">\n      <h1 className=\"text-3xl font-bold mb-6 text-[#042637] text-center\">Panel de Donaciones</h1>\n      \n      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n          <CardHeader>\n            <CardTitle className=\"text-[#042637]\">Total Donaciones</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold text-[#042637]\">${totalValue.toFixed(2)}</p>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n          <CardHeader>\n            <CardTitle className=\"text-[#042637]\">Total Productos</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold text-[#042637]\">{totalProductos}</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n          <CardHeader>\n            <CardTitle className=\"text-[#042637]\">Mayor Donante</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-xl font-bold text-[#042637]\">{mayorDonante[0]}</p>\n            <p className=\"text-lg text-[#042637]\">${mayorDonante[1].toFixed(2)}</p>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <Card className=\"bg-[#E1DDBF] border-[#042637]\">\n        <CardHeader>\n          <CardTitle className=\"text-[#042637]\">Lista de Donaciones</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"text-[#042637]\">Donante</TableHead>\n                <TableHead className=\"text-[#042637]\">Producto</TableHead>\n                <TableHead className=\"text-[#042637]\">Cantidad</TableHead>\n                <TableHead className=\"text-[#042637]\">Unidad</TableHead>\n                <TableHead className=\"text-[#042637]\">Valor por Unidad</TableHead>\n                <TableHead className=\"text-[#042637]\">Total</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {donaciones.map((donacion, index) => (\n                <TableRow key={index}>\n                  <TableCell className=\"text-[#042637]\">{donacion.donorName}</TableCell>\n                  <TableCell className=\"text-[#042637]\">{donacion.itemType}</TableCell>\n                  <TableCell className=\"text-[#042637]\">{donacion.quantity}</TableCell>\n                  <TableCell className=\"text-[#042637]\">{donacion.unit}</TableCell>\n                  <TableCell className=\"text-[#042637]\">${donacion.valuePerUnit.toFixed(2)}</TableCell>\n                  <TableCell className=\"text-[#042637]\">${donacion.totalValue.toFixed(2)}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}"
        }
    ]
}