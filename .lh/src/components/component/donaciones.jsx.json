{
    "sourceFile": "src/components/component/donaciones.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 52,
            "patches": [
                {
                    "date": 1731024358197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731944896444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react';\n+import { useRouter, useSearchParams } from 'next/navigation';\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Badge } from \"@/components/ui/badge\";\n+import { Button } from \"@/components/ui/button\"; // Asegúrate de tener un componente Button\n+\n+// Función para formatear fechas\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  });\n+};\n+\n+// Función para formatear montos\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount);\n+};\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([]);\n+  const [error, setError] = useState('');\n+  const searchParams = useSearchParams();\n+  const charityId = searchParams.get('charityId');\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        });\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`);\n+        }\n+\n+        const data = await res.json();\n+        setDonaciones(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setError('Error fetching donations');\n+      }\n+    };\n+\n+    if (charityId) {\n+      fetchDonaciones();\n+    }\n+  }, [charityId]);\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/pdf'\n+        }\n+      });\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`);\n+      }\n+\n+      const blob = await res.blob();\n+      const url = window.URL.createObjectURL(blob);\n+      const a = document.createElement('a');\n+      a.href = url;\n+      a.download = `reporte_${period}_${charityId}.pdf`;\n+      document.body.appendChild(a);\n+      a.click();\n+      a.remove();\n+    } catch (error) {\n+      console.error('Error:', error);\n+      setError('Error generating report');\n+    }\n+  };\n+\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\n+  if (donaciones.length === 0) return <p>Loading...</p>;\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold  bg-[#042637]\">Registro de Donaciones</CardTitle>\n+          <CardDescription className=\" bg-[#042637]/70\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')}>Reporte Semanal</Button>\n+            <Button onClick={() => handleGenerateReport('monthly')}>Reporte Mensual</Button>\n+            <Button onClick={() => handleGenerateReport('annual')}>Reporte Anual</Button>\n+          </div>\n+          <div className=\"overflow-x-auto\">\n+            <Table>\n+              <TableHeader>\n+                <TableRow>\n+                  <TableHead className=\"text-[#042637]\">Donante</TableHead>\n+                  <TableHead className=\"text-[#042637]\">Monto</TableHead>\n+                  <TableHead className=\"text-[#042637]\">Estado</TableHead>\n+                  <TableHead className=\"text-[#042637]\">Método de Pago</TableHead>\n+                  <TableHead className=\"text-[#042637]\">Fecha de Pago</TableHead>\n+                </TableRow>\n+              </TableHeader>\n+              <TableBody>\n+                {donaciones.map((donacion, index) => (\n+                  <TableRow key={index}>\n+                    <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                    <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                    <TableCell>\n+                      <Badge \n+                        variant=\"outline\" \n+                        className={`\n+                          ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                          ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                        `}\n+                      >\n+                        {donacion.paymentStatus}\n+                      </Badge>\n+                    </TableCell>\n+                    <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                    <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                  </TableRow>\n+                ))}\n+              </TableBody>\n+            </Table>\n+          </div>\n+        </CardContent>\n+      </Card>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731946013013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react';\n+import { useSearchParams } from 'next/navigation';\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Badge } from \"@/components/ui/badge\";\n+import { Button } from \"@/components/ui/button\"; // Asegúrate de tener un componente Button\n+\n+// Función para formatear fechas\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  });\n+};\n+\n+// Función para formatear montos\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount);\n+};\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([]);\n+  const [error, setError] = useState('');\n+  const searchParams = useSearchParams();\n+  const charityId = searchParams.get('charityId');\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        });\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`);\n+        }\n+\n+        const data = await res.json();\n+        setDonaciones(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setError('Error fetching donations');\n+      }\n+    };\n+\n+    if (charityId) {\n+      fetchDonaciones();\n+    }\n+  }, [charityId]);\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      });\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`);\n+      }\n+\n+      const blob = await res.blob();\n+      const url = window.URL.createObjectURL(blob);\n+      const a = document.createElement('a');\n+      a.href = url;\n+      a.download = `reporte_${period}_${charityId}.xlsx`;\n+      document.body.appendChild(a);\n+      a.click();\n+      a.remove();\n+    } catch (error) {\n+      console.error('Error:', error);\n+      setError('Error generating report');\n+    }\n+  };\n+\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\n+  if (donaciones.length === 0) return <p>Loading...</p>;\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold  bg-[#042637]\">Registro de Donaciones</CardTitle>\n+          <CardDescription className=\" bg-[#042637]/70\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')}>Reporte Semanal</Button>\n+            <Button onClick={() => handleGenerateReport('monthly')}>Reporte Mensual</Button>\n+            <Button onClick={() => handleGenerateReport('annual')}>Reporte Anual</Button>\n+          </div>\n+          <div className=\"overflow-x-auto\">\n+            <Table>\n+              <TableHeader>\n+                <TableRow>\n+                  <TableHead className=\"text-[#042637]\">Donante</TableHead>\n+                  <TableHead className=\"text-[#042637]\">Monto</TableHead>\n+                  <TableHead className=\"text-[#042637]\">Estado</TableHead>\n+                  <TableHead className=\"text-[#042637]\">Método de Pago</TableHead>\n+                  <TableHead className=\"text-[#042637]\">Fecha de Pago</TableHead>\n+                </TableRow>\n+              </TableHeader>\n+              <TableBody>\n+                {donaciones.map((donacion, index) => (\n+                  <TableRow key={index}>\n+                    <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                    <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                    <TableCell>\n+                      <Badge \n+                        variant=\"outline\" \n+                        className={`\n+                          ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                          ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                        `}\n+                      >\n+                        {donacion.paymentStatus}\n+                      </Badge>\n+                    </TableCell>\n+                    <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                    <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                  </TableRow>\n+                ))}\n+              </TableBody>\n+            </Table>\n+          </div>\n+        </CardContent>\n+      </Card>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731946285758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,268 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('Error al cargar las donaciones')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731946375886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,268 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export function TablaDonacionesComponent() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('Error al cargar las donaciones')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731946399095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n const formatAmount = (amount, currency) => {\n   return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n }\n \n-export function TablaDonacionesComponent() {\n+export default function TablaDonaciones() {\n   const [donaciones, setDonaciones] = useState([])\n   const [filteredDonaciones, setFilteredDonaciones] = useState([])\n   const [loading, setLoading] = useState(true)\n   const [error, setError] = useState('')\n"
                },
                {
                    "date": 1731947629818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         setDonaciones(data)\n         setFilteredDonaciones(data)\n       } catch (error) {\n         console.error('Error:', error)\n-        setError('Error al cargar las donaciones')\n+        setError('N')\n       } finally {\n         setLoading(false)\n       }\n     }\n@@ -264,666 +264,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('Error al cargar las donaciones')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react';\n-import { useSearchParams } from 'next/navigation';\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n-import { Badge } from \"@/components/ui/badge\";\n-import { Button } from \"@/components/ui/button\"; // Asegúrate de tener un componente Button\n-\n-// Función para formatear fechas\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  });\n-};\n-\n-// Función para formatear montos\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount);\n-};\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([]);\n-  const [error, setError] = useState('');\n-  const searchParams = useSearchParams();\n-  const charityId = searchParams.get('charityId');\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        });\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`);\n-        }\n-\n-        const data = await res.json();\n-        setDonaciones(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setError('Error fetching donations');\n-      }\n-    };\n-\n-    if (charityId) {\n-      fetchDonaciones();\n-    }\n-  }, [charityId]);\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      });\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`);\n-      }\n-\n-      const blob = await res.blob();\n-      const url = window.URL.createObjectURL(blob);\n-      const a = document.createElement('a');\n-      a.href = url;\n-      a.download = `reporte_${period}_${charityId}.xlsx`;\n-      document.body.appendChild(a);\n-      a.click();\n-      a.remove();\n-    } catch (error) {\n-      console.error('Error:', error);\n-      setError('Error generating report');\n-    }\n-  };\n-\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\n-  if (donaciones.length === 0) return <p>Loading...</p>;\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold  bg-[#042637]\">Registro de Donaciones</CardTitle>\n-          <CardDescription className=\" bg-[#042637]/70\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')}>Reporte Semanal</Button>\n-            <Button onClick={() => handleGenerateReport('monthly')}>Reporte Mensual</Button>\n-            <Button onClick={() => handleGenerateReport('annual')}>Reporte Anual</Button>\n-          </div>\n-          <div className=\"overflow-x-auto\">\n-            <Table>\n-              <TableHeader>\n-                <TableRow>\n-                  <TableHead className=\"text-[#042637]\">Donante</TableHead>\n-                  <TableHead className=\"text-[#042637]\">Monto</TableHead>\n-                  <TableHead className=\"text-[#042637]\">Estado</TableHead>\n-                  <TableHead className=\"text-[#042637]\">Método de Pago</TableHead>\n-                  <TableHead className=\"text-[#042637]\">Fecha de Pago</TableHead>\n-                </TableRow>\n-              </TableHeader>\n-              <TableBody>\n-                {donaciones.map((donacion, index) => (\n-                  <TableRow key={index}>\n-                    <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                    <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                    <TableCell>\n-                      <Badge \n-                        variant=\"outline\" \n-                        className={`\n-                          ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                          ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                        `}\n-                      >\n-                        {donacion.paymentStatus}\n-                      </Badge>\n-                    </TableCell>\n-                    <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                    <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                  </TableRow>\n-                ))}\n-              </TableBody>\n-            </Table>\n-          </div>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  );\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react';\n-import { useRouter, useSearchParams } from 'next/navigation';\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n-import { Badge } from \"@/components/ui/badge\";\n-import { Button } from \"@/components/ui/button\"; // Asegúrate de tener un componente Button\n-\n-// Función para formatear fechas\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  });\n-};\n-\n-// Función para formatear montos\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount);\n-};\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([]);\n-  const [error, setError] = useState('');\n-  const searchParams = useSearchParams();\n-  const charityId = searchParams.get('charityId');\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        });\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`);\n-        }\n-\n-        const data = await res.json();\n-        setDonaciones(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setError('Error fetching donations');\n-      }\n-    };\n-\n-    if (charityId) {\n-      fetchDonaciones();\n-    }\n-  }, [charityId]);\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/pdf'\n-        }\n-      });\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`);\n-      }\n-\n-      const blob = await res.blob();\n-      const url = window.URL.createObjectURL(blob);\n-      const a = document.createElement('a');\n-      a.href = url;\n-      a.download = `reporte_${period}_${charityId}.pdf`;\n-      document.body.appendChild(a);\n-      a.click();\n-      a.remove();\n-    } catch (error) {\n-      console.error('Error:', error);\n-      setError('Error generating report');\n-    }\n-  };\n-\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\n-  if (donaciones.length === 0) return <p>Loading...</p>;\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold  bg-[#042637]\">Registro de Donaciones</CardTitle>\n-          <CardDescription className=\" bg-[#042637]/70\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')}>Reporte Semanal</Button>\n-            <Button onClick={() => handleGenerateReport('monthly')}>Reporte Mensual</Button>\n-            <Button onClick={() => handleGenerateReport('annual')}>Reporte Anual</Button>\n-          </div>\n-          <div className=\"overflow-x-auto\">\n-            <Table>\n-              <TableHeader>\n-                <TableRow>\n-                  <TableHead className=\"text-[#042637]\">Donante</TableHead>\n-                  <TableHead className=\"text-[#042637]\">Monto</TableHead>\n-                  <TableHead className=\"text-[#042637]\">Estado</TableHead>\n-                  <TableHead className=\"text-[#042637]\">Método de Pago</TableHead>\n-                  <TableHead className=\"text-[#042637]\">Fecha de Pago</TableHead>\n-                </TableRow>\n-              </TableHeader>\n-              <TableBody>\n-                {donaciones.map((donacion, index) => (\n-                  <TableRow key={index}>\n-                    <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                    <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                    <TableCell>\n-                      <Badge \n-                        variant=\"outline\" \n-                        className={`\n-                          ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                          ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                        `}\n-                      >\n-                        {donacion.paymentStatus}\n-                      </Badge>\n-                    </TableCell>\n-                    <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                    <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                  </TableRow>\n-                ))}\n-              </TableBody>\n-            </Table>\n-          </div>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  );\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react';\n-import { useRouter, useSearchParams } from 'next/navigation';\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n-import { Badge } from \"@/components/ui/badge\";\n-\n-// Función para formatear fechas\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  });\n-};\n-\n-// Función para formatear montos\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount);\n-};\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([]);\n-  const [error, setError] = useState('');\n-  const searchParams = useSearchParams();\n-  const charityId = searchParams.get('charityId');\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        });\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`);\n-        }\n-\n-        const data = await res.json();\n-        setDonaciones(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setError('Error fetching donations');\n-      }\n-    };\n-\n-    if (charityId) {\n-      fetchDonaciones();\n-    }\n-  }, [charityId]);\n-\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\n-  if (donaciones.length === 0) return <p>Loading...</p>;\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold  bg-[#042637]\">Registro de Donaciones</CardTitle>\n-          <CardDescription className=\" bg-[#042637]/70\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"overflow-x-auto\">\n-            <Table>\n-              <TableHeader>\n-                <TableRow>\n-                  <TableHead className=\"text-[#042637]\">Donante</TableHead>\n-                  <TableHead className=\"text-[#042637]\">Monto</TableHead>\n-                  <TableHead className=\"text-[#042637]\">Estado</TableHead>\n-                  <TableHead className=\"text-[#042637]\">Método de Pago</TableHead>\n-                  <TableHead className=\"text-[#042637]\">Fecha de Pago</TableHead>\n-                </TableRow>\n-              </TableHeader>\n-              <TableBody>\n-                {donaciones.map((donacion, index) => (\n-                  <TableRow key={index}>\n-                    <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                    <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                    <TableCell>\n-                      <Badge \n-                        variant=\"outline\" \n-                        className={`\n-                          ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                          ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                        `}\n-                      >\n-                        {donacion.paymentStatus}\n-                      </Badge>\n-                    </TableCell>\n-                    <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                    <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                  </TableRow>\n-                ))}\n-              </TableBody>\n-            </Table>\n-          </div>\n-        </CardContent>\n-      </Card>\n-    </div>\n-  );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731947635592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         setDonaciones(data)\n         setFilteredDonaciones(data)\n       } catch (error) {\n         console.error('Error:', error)\n-        setError('N')\n+        setError('NO se encontro ')\n       } finally {\n         setLoading(false)\n       }\n     }\n"
                },
                {
                    "date": 1731947652825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         setDonaciones(data)\n         setFilteredDonaciones(data)\n       } catch (error) {\n         console.error('Error:', error)\n-        setError('NO se encontro ')\n+        setError('NO se encontro ninguna donación asegurece de tener donaciones ')\n       } finally {\n         setLoading(false)\n       }\n     }\n"
                },
                {
                    "date": 1731947660611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         setDonaciones(data)\n         setFilteredDonaciones(data)\n       } catch (error) {\n         console.error('Error:', error)\n-        setError('NO se encontro ninguna donación asegurece de tener donaciones ')\n+        setError('N se encontro ninguna donación asegurece de tener donaciones')\n       } finally {\n         setLoading(false)\n       }\n     }\n"
                },
                {
                    "date": 1731947667267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,268 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontro ninguna donación asegurece de tener donaciones')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731947773892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,268 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontro ninguna donación asegurece de tener donaciones')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731947943280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n 'use client'\n \n import { useState, useEffect } from 'react'\n-import { useSearchParams } from 'next/navigation'\n+import { useSearchParams, useRouter } from 'next/navigation'\n import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n import { Badge } from \"@/components/ui/badge\"\n import { Button } from \"@/components/ui/button\"\n@@ -32,548 +32,61 @@\n   const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n   const [currentPage, setCurrentPage] = useState(1)\n   const [searchTerm, setSearchTerm] = useState('')\n   const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n   const itemsPerPage = 10\n   const searchParams = useSearchParams()\n   const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n \n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontro ninguna donación asegurece de tener donaciones')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n   }\n \n-  const handleGenerateReport = async (period) => {\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n     try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n         method: 'GET',\n         headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n       })\n \n       if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n       }\n \n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n+      const data = await res.json()\n+      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n     } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n     }\n   }\n \n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-\n   useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontro ninguna donación asegurece de tener donaciones')\n-      } finally {\n-        setLoading(false)\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n       }\n-    }\n \n-    if (charityId) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      const user = await getUserFromToken()\n+      if (!user || user.userType !== 'organization') {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n       }\n \n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n+      setIsOrganization(true)\n     }\n-  }\n \n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n+    checkAuthentication()\n+  }, [router])\n \n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-\n   useEffect(() => {\n     const fetchDonaciones = async () => {\n       try {\n         setLoading(true)\n@@ -592,18 +105,18 @@\n         setDonaciones(data)\n         setFilteredDonaciones(data)\n       } catch (error) {\n         console.error('Error:', error)\n-        setError('N se encontro ninguna donación asegurece de tener donaciones')\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n       } finally {\n         setLoading(false)\n       }\n     }\n \n-    if (charityId) {\n+    if (charityId && isOrganization) {\n       fetchDonaciones()\n     }\n-  }, [charityId])\n+  }, [charityId, isOrganization])\n \n   useEffect(() => {\n     let result = donaciones\n     if (searchTerm) {\n@@ -685,9 +198,9 @@\n   return (\n     <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n       <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n         <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones</CardTitle>\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n           <CardDescription className=\"text-gray-200\">\n             Tabla con todas las donaciones recibidas\n           </CardDescription>\n         </CardHeader>\n"
                },
                {
                    "date": 1731947954773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,317 +0,0 @@\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user || user.userType !== 'organization') {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731947990747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,316 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+      const user = await getUserFromToken()\n+      if (!user || user.userType !== 'organization') {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      setIsOrganization(true)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948275645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,324 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user || user.userType !== 'organization') {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      setIsOrganization(true)\n+      setUserCharityId(user.charityId)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948407067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,324 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user || user.userType !== 'organization') {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      setIsOrganization(true)\n+      setUserCharityId(user.charityId)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948490970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n \n       if (!res.ok) {\n         throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n       }\n-\n+      console\n       const data = await res.json()\n       return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n     } catch (error) {\n       console.error('Error obteniendo el usuario:', error)\n@@ -320,645 +320,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user || user.userType !== 'organization') {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-      setUserCharityId(user.charityId)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-      const user = await getUserFromToken()\n-      if (!user || user.userType !== 'organization') {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948498680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,324 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+      console.log(data)\n+      const data = await res.json()\n+      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user || user.userType !== 'organization') {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      setIsOrganization(true)\n+      setUserCharityId(user.charityId)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948513791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,10 +57,9 @@\n       })\n \n       if (!res.ok) {\n         throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-      console.log(data)\n+ \n       const data = await res.json()\n       return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n     } catch (error) {\n       console.error('Error obteniendo el usuario:', error)\n@@ -320,329 +319,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-      console\n-      const data = await res.json()\n-      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user || user.userType !== 'organization') {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-      setUserCharityId(user.charityId)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948520335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,324 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+      \n+      const data = await res.json()\n+      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user || user.userType !== 'organization') {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      setIsOrganization(true)\n+      setUserCharityId(user.charityId)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948546721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,324 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+      \n+      const data = await res.json()\n+      console// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user || user.userType !== 'organization') {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      setIsOrganization(true)\n+      setUserCharityId(user.charityId)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948553616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n       }\n       \n       const data = await res.json()\n-      console// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+      console.log(data)// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n     } catch (error) {\n       console.error('Error obteniendo el usuario:', error)\n       return null\n     }\n@@ -320,652 +320,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-      \n-      const data = await res.json()\n-      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user || user.userType !== 'organization') {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-      setUserCharityId(user.charityId)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n- \n-      const data = await res.json()\n-      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user || user.userType !== 'organization') {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-      setUserCharityId(user.charityId)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948573634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,324 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+      \n+      const data = await res.json()\n+      console.log(data)// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user || user.userType !== 'organization') {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      setIsOrganization(true)\n+      setUserCharityId(user.charity_Id)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948578885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,324 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+      \n+      const data = await res.json()\n+      re// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user || user.userType !== 'organization') {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      setIsOrganization(true)\n+      setUserCharityId(user.charity_Id)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948625374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n         return\n       }\n \n       const user = await getUserFromToken()\n-      if (!user || user.userType !== 'organization') {\n+      if (!user || user.userType !== 'cha') {\n         setError('No tienes permiso para ver esta página.')\n         return\n       }\n \n"
                },
                {
                    "date": 1731948664585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n       }\n       \n       const data = await res.json()\n-      re// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+      return data// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n     } catch (error) {\n       console.error('Error obteniendo el usuario:', error)\n       return null\n     }\n@@ -75,9 +75,9 @@\n         return\n       }\n \n       const user = await getUserFromToken()\n-      if (!user || user.userType !== 'cha') {\n+      if (!user || user.userType !== \"charity\") {\n         setError('No tienes permiso para ver esta página.')\n         return\n       }\n \n@@ -320,653 +320,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-      \n-      const data = await res.json()\n-      console.log(data)// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user || user.userType !== 'organization') {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-      setUserCharityId(user.charity_Id)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-      \n-      const data = await res.json()\n-      console.log(data)// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user || user.userType !== 'organization') {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-      setUserCharityId(user.charityId)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948683043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,324 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+      \n+      const data = await res.json()\n+      return data// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user || user. !== \"charity\") {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      setIsOrganization(true)\n+      setUserCharityId(user.charity_Id)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948694679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+      \n+      const data = await res.json()\n+      console\n+      return data// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user || user.userType !== \"charity\") {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      setIsOrganization(true)\n+      setUserCharityId(user.charity_Id)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948723101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n       }\n       \n       const data = await res.json()\n-      console\n+      console.log('Usuario:', data)\n       return data// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n     } catch (error) {\n       console.error('Error obteniendo el usuario:', error)\n       return null\n@@ -76,9 +76,9 @@\n         return\n       }\n \n       const user = await getUserFromToken()\n-      if (!user || user.userType !== \"charity\") {\n+      if (!user || user.userType !== charity\") {\n         setError('No tienes permiso para ver esta página.')\n         return\n       }\n \n@@ -321,653 +321,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-      \n-      const data = await res.json()\n-      return data// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user || user. !== \"charity\") {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-      setUserCharityId(user.charity_Id)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-      \n-      const data = await res.json()\n-      return data// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user || user.userType !== \"charity\") {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-      setUserCharityId(user.charity_Id)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948728989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+      \n+      const data = await res.json()\n+      console.log('Usuario:', data)\n+      return data// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user || user.userType !== 'charity') {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      setIsOrganization(true)\n+      setUserCharityId(user.charity_Id)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948739665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n         return\n       }\n \n       setIsOrganization(true)\n-      setUserCharityId(user.charity_Id)\n+      setUserCharityId(user.charityId)\n     }\n \n     checkAuthentication()\n   }, [router])\n"
                },
                {
                    "date": 1731948772931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+      \n+      const data = await res.json()\n+      console.log('Usuario:', data)\n+      return data// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (user.userType !== 'charity') {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      setIsOrganization(true)\n+      setUserCharityId(user.charityId)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948915090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+      \n+      const data = await res.json()\n+      console.log('Usuario:', data)\n+      return data// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (user.userType !== 'charity') {\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      setIsOrganization(true)\n+      setUserCharityId(user.Id)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948931522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n         return\n       }\n \n       setIsOrganization(true)\n-      setUserCharityId(user.Id)\n+      setUserCharityId(user._Id)\n     }\n \n     checkAuthentication()\n   }, [router])\n@@ -321,980 +321,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-      \n-      const data = await res.json()\n-      console.log('Usuario:', data)\n-      return data// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (user.userType !== 'charity') {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-      setUserCharityId(user.charityId)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-      \n-      const data = await res.json()\n-      console.log('Usuario:', data)\n-      return data// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user || user.userType !== 'charity') {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-      setUserCharityId(user.charityId)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-      \n-      const data = await res.json()\n-      console.log('Usuario:', data)\n-      return data// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user || user.userType !== charity\") {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-      setUserCharityId(user.charity_Id)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731948944432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      console.log('Datos del perfil:', data)\n+      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        console.log('Usuario no autenticado, redirigiendo a login')\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user) {\n+        console.log('No se pudo obtener el usuario')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      console.log('Usuario autenticado:', user)\n+      if (user.userType !== 'charity') {\n+        console.log('Usuario no es una organización')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      console.log('Usuario es una organización:', user)\n+      setIsOrganization(true)\n+      setUserCharityId(user.charityId)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        console.log('Usuario no autorizado para ver estas donaciones')\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        console.log('Datos de donaciones:', data)\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731949163072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      console.log('Datos del perfil:', data)\n+      return data.charity // Asegúrate de que la respuesta tiene los campos de la organización en `charity`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        console.log('Usuario no autenticado, redirigiendo a login')\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user) {\n+        console.log('No se pudo obtener el usuario')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      console.log('Usuario autenticado:', user)\n+      if (user.userType !== 'charity') {\n+        console.log('Usuario no es una organización')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      console.log('Usuario es una organización:', user)\n+      setIsOrganization(true)\n+      setUserCharityId(user.id)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        console.log('Usuario no autorizado para ver estas donaciones')\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        console.log('Datos de donaciones:', data)\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731949213012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+\n+      return data.charity // Asegúrate de que la respuesta tiene los campos de la organización en `charity`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        console.log('Usuario no autenticado, redirigiendo a login')\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user) {\n+        console.log('No se pudo obtener el usuario')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      console.log('Usuario autenticado:', user)\n+      if (user.userType !== 'charity') {\n+        console.log('Usuario no es una organización')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      console.log('Usuario es una organización:', user)\n+      setIsOrganization(true)\n+      setUserCharityId(user.id)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        console.log('Usuario no autorizado para ver estas donaciones')\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        console.log('Datos de donaciones:', data)\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731949251112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,346 +83,9 @@\n         setError('No tienes permiso para ver esta página.')\n         return\n       }\n \n-      console.log('Usuario autenticado:', user)\n-      if (user.userType !== 'charity') {\n-        console.log('Usuario no es una organización')\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n \n-      console.log('Usuario es una organización:', user)\n-      setIsOrganization(true)\n-      setUserCharityId(user.id)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        console.log('Usuario no autorizado para ver estas donaciones')\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        console.log('Datos de donaciones:', data)\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      console.log('Datos del perfil:', data)\n-      return data.charity // Asegúrate de que la respuesta tiene los campos de la organización en `charity`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        console.log('Usuario no autenticado, redirigiendo a login')\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user) {\n-        console.log('No se pudo obtener el usuario')\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      console.log('Usuario autenticado:', user)\n       if (user.userType !== 'charity') {\n         console.log('Usuario no es una organización')\n         setError('No tienes permiso para ver esta página.')\n         return\n@@ -670,667 +333,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-      console.log('Datos del perfil:', data)\n-      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        console.log('Usuario no autenticado, redirigiendo a login')\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user) {\n-        console.log('No se pudo obtener el usuario')\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      console.log('Usuario autenticado:', user)\n-      if (user.userType !== 'charity') {\n-        console.log('Usuario no es una organización')\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      console.log('Usuario es una organización:', user)\n-      setIsOrganization(true)\n-      setUserCharityId(user.charityId)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        console.log('Usuario no autorizado para ver estas donaciones')\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        console.log('Datos de donaciones:', data)\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-      \n-      const data = await res.json()\n-      console.log('Usuario:', data)\n-      return data// Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (user.userType !== 'charity') {\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-      setIsOrganization(true)\n-      setUserCharityId(user._Id)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731949258597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,10 +89,8 @@\n         console.log('Usuario no es una organización')\n         setError('No tienes permiso para ver esta página.')\n         return\n       }\n-\n-      console.log('Usuario es una organización:', user)\n       setIsOrganization(true)\n       setUserCharityId(user.id)\n     }\n \n@@ -120,9 +118,9 @@\n           throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n         }\n \n         const data = await res.json()\n-        console.log('Datos de donaciones:', data)\n+\n         setDonaciones(data)\n         setFilteredDonaciones(data)\n       } catch (error) {\n         console.error('Error:', error)\n"
                },
                {
                    "date": 1731949308174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,335 +0,0 @@\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-\n-      return data.charity // Asegúrate de que la respuesta tiene los campos de la organización en `charity`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        console.log('Usuario no autenticado, redirigiendo a login')\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user) {\n-        console.log('No se pudo obtener el usuario')\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-\n-      if (user.userType !== 'charity') {\n-        console.log('Usuario no es una organización')\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-      setIsOrganization(true)\n-      setUserCharityId(user.id)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        console.log('Usuario no autorizado para ver estas donaciones')\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731949314449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      console.log('Datos del perfil:', data)\n+      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        console.log('Usuario no autenticado, redirigiendo a login')\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user) {\n+        console.log('No se pudo obtener el usuario')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      console.log('Usuario autenticado:', user)\n+      if (user.userType !== 'charity') {\n+        console.log('Usuario no es una organización')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      console.log('Usuario es una organización:', user)\n+      setIsOrganization(true)\n+      setUserCharityId(user.charityId)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        console.log('Usuario no autorizado para ver estas donaciones')\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        console.log('Datos de donaciones:', data)\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731949322337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,10 +60,10 @@\n         throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n       }\n \n       const data = await res.json()\n-      console.log('Datos del perfil:', data)\n-      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+\n+      return data.charity // Asegúrate de que la respuesta tiene los campos de la organización en `charity`\n     } catch (error) {\n       console.error('Error obteniendo el usuario:', error)\n       return null\n     }\n@@ -83,18 +83,16 @@\n         setError('No tienes permiso para ver esta página.')\n         return\n       }\n \n-      console.log('Usuario autenticado:', user)\n+\n       if (user.userType !== 'charity') {\n         console.log('Usuario no es una organización')\n         setError('No tienes permiso para ver esta página.')\n         return\n       }\n-\n-      console.log('Usuario es una organización:', user)\n       setIsOrganization(true)\n-      setUserCharityId(user.charityId)\n+      setUserCharityId(user.id)\n     }\n \n     checkAuthentication()\n   }, [router])\n@@ -120,9 +118,9 @@\n           throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n         }\n \n         const data = await res.json()\n-        console.log('Datos de donaciones:', data)\n+\n         setDonaciones(data)\n         setFilteredDonaciones(data)\n       } catch (error) {\n         console.error('Error:', error)\n"
                },
                {
                    "date": 1731949335675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+      console.log('Datos del perfil:', data)\n+      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        console.log('Usuario no autenticado, redirigiendo a login')\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user) {\n+        console.log('No se pudo obtener el usuario')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      console.log('Usuario autenticado:', user)\n+      if (user.userType !== 'charity') {\n+        console.log('Usuario no es una organización')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+      console.log('Usuario es una organización:', user)\n+      setIsOrganization(true)\n+      setUserCharityId(user.charityId)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        console.log('Usuario no autorizado para ver estas donaciones')\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+        console.log('Datos de donaciones:', data)\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731949342204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,10 +60,10 @@\n         throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n       }\n \n       const data = await res.json()\n-      console.log('Datos del perfil:', data)\n-      return data.user // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+\n+      return data.charity // Asegúrate de que la respuesta tiene los campos de la organización en `charity`\n     } catch (error) {\n       console.error('Error obteniendo el usuario:', error)\n       return null\n     }\n@@ -83,18 +83,16 @@\n         setError('No tienes permiso para ver esta página.')\n         return\n       }\n \n-      console.log('Usuario autenticado:', user)\n+\n       if (user.userType !== 'charity') {\n         console.log('Usuario no es una organización')\n         setError('No tienes permiso para ver esta página.')\n         return\n       }\n-\n-      console.log('Usuario es una organización:', user)\n       setIsOrganization(true)\n-      setUserCharityId(user.charityId)\n+      setUserCharityId(user.id)\n     }\n \n     checkAuthentication()\n   }, [router])\n@@ -120,9 +118,9 @@\n           throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n         }\n \n         const data = await res.json()\n-        console.log('Datos de donaciones:', data)\n+\n         setDonaciones(data)\n         setFilteredDonaciones(data)\n       } catch (error) {\n         console.error('Error:', error)\n"
                },
                {
                    "date": 1732066218798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n   const getUserFromToken = async () => {\n     const token = localStorage.getItem('authToken')\n     if (!token) return null\n     try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+      const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms//profile?secret_token=${token}`, {\n         method: 'GET',\n         headers: {\n           'Content-Type': 'application/json',\n           'Authorization': `Bearer ${token}`\n@@ -331,340 +331,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-\n-      return data.charity // Asegúrate de que la respuesta tiene los campos de la organización en `charity`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        console.log('Usuario no autenticado, redirigiendo a login')\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user) {\n-        console.log('No se pudo obtener el usuario')\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-\n-      if (user.userType !== 'charity') {\n-        console.log('Usuario no es una organización')\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-      setIsOrganization(true)\n-      setUserCharityId(user.id)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        console.log('Usuario no autorizado para ver estas donaciones')\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732066231249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n   const getUserFromToken = async () => {\n     const token = localStorage.getItem('authToken')\n     if (!token) return null\n     try {\n-      const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms//profile?secret_token=${token}`, {\n+      const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n         method: 'GET',\n         headers: {\n           'Content-Type': 'application/json',\n           'Authorization': `Bearer ${token}`\n@@ -106,9 +106,9 @@\n       }\n \n       try {\n         setLoading(true)\n-        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/mercadopago/donations/${charityId}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json'\n           }\n"
                },
                {
                    "date": 1732066239423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,335 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+\n+      return data.charity // Asegúrate de que la respuesta tiene los campos de la organización en `charity`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        console.log('Usuario no autenticado, redirigiendo a login')\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user) {\n+        console.log('No se pudo obtener el usuario')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+\n+      if (user.userType !== 'charity') {\n+        console.log('Usuario no es una organización')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+      setIsOrganization(true)\n+      setUserCharityId(user.id)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        console.log('Usuario no autorizado para ver estas donaciones')\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms//mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732153871115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n   const getUserFromToken = async () => {\n     const token = localStorage.getItem('authToken')\n     if (!token) return null\n     try {\n-      const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+      const res = await fetch(`lo/profile?secret_token=${token}`, {\n         method: 'GET',\n         headers: {\n           'Content-Type': 'application/json',\n           'Authorization': `Bearer ${token}`\n@@ -165,9 +165,9 @@\n \n   const handleGenerateReport = async (period) => {\n     try {\n       setLoading(true)\n-      const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms//mercadopago/report/${period}/${charityId}`, {\n+      const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/mercadopago/report/${period}/${charityId}`, {\n         method: 'GET',\n         headers: {\n           'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n         }\n@@ -331,340 +331,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-\n-      return data.charity // Asegúrate de que la respuesta tiene los campos de la organización en `charity`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        console.log('Usuario no autenticado, redirigiendo a login')\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user) {\n-        console.log('No se pudo obtener el usuario')\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-\n-      if (user.userType !== 'charity') {\n-        console.log('Usuario no es una organización')\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-      setIsOrganization(true)\n-      setUserCharityId(user.id)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        console.log('Usuario no autorizado para ver estas donaciones')\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`http://localhost:3001/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732153892318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,335 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3000//profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+\n+      return data.charity // Asegúrate de que la respuesta tiene los campos de la organización en `charity`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        console.log('Usuario no autenticado, redirigiendo a login')\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user) {\n+        console.log('No se pudo obtener el usuario')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+\n+      if (user.userType !== 'charity') {\n+        console.log('Usuario no es una organización')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+      setIsOrganization(true)\n+      setUserCharityId(user.id)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        console.log('Usuario no autorizado para ver estas donaciones')\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732153919746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n   const getUserFromToken = async () => {\n     const token = localStorage.getItem('authToken')\n     if (!token) return null\n     try {\n-      const res = await fetch(`http://localhost:3000//profile?secret_token=${token}`, {\n+      const res = await fetch(`http://localhost:3000/profile?secret_token=${token}`, {\n         method: 'GET',\n         headers: {\n           'Content-Type': 'application/json',\n           'Authorization': `Bearer ${token}`\n@@ -106,9 +106,9 @@\n       }\n \n       try {\n         setLoading(true)\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/mercadopago/donations/${charityId}`, {\n+        const res = await fetch(`http://localhost:3000/mercadopago/donations/${charityId}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json'\n           }\n@@ -331,340 +331,5 @@\n         </CardContent>\n       </Card>\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useEffect } from 'react'\n-import { useSearchParams, useRouter } from 'next/navigation'\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n-import { Badge } from \"@/components/ui/badge\"\n-import { Button } from \"@/components/ui/button\"\n-import { Input } from \"@/components/ui/input\"\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n-\n-const formatDate = (dateString) => {\n-  return new Date(dateString).toLocaleString('es-ES', {\n-    year: 'numeric',\n-    month: 'long',\n-    day: 'numeric',\n-    hour: '2-digit',\n-    minute: '2-digit'\n-  })\n-}\n-\n-const formatAmount = (amount, currency) => {\n-  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n-}\n-\n-export default function TablaDonaciones() {\n-  const [donaciones, setDonaciones] = useState([])\n-  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('all')\n-  const [isOrganization, setIsOrganization] = useState(false)\n-  const [userCharityId, setUserCharityId] = useState(null)\n-  const itemsPerPage = 10\n-  const searchParams = useSearchParams()\n-  const charityId = searchParams.get('charityId')\n-  const router = useRouter()\n-\n-  const isAuthenticated = () => {\n-    return localStorage.getItem('authToken')\n-  }\n-\n-  const getUserFromToken = async () => {\n-    const token = localStorage.getItem('authToken')\n-    if (!token) return null\n-    try {\n-      const res = await fetch(`lo/profile?secret_token=${token}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${token}`\n-        },\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const data = await res.json()\n-\n-      return data.charity // Asegúrate de que la respuesta tiene los campos de la organización en `charity`\n-    } catch (error) {\n-      console.error('Error obteniendo el usuario:', error)\n-      return null\n-    }\n-  }\n-\n-  useEffect(() => {\n-    const checkAuthentication = async () => {\n-      if (!isAuthenticated()) {\n-        console.log('Usuario no autenticado, redirigiendo a login')\n-        router.push('/logind') // Redirige al login si no está autenticado\n-        return\n-      }\n-\n-      const user = await getUserFromToken()\n-      if (!user) {\n-        console.log('No se pudo obtener el usuario')\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-\n-\n-      if (user.userType !== 'charity') {\n-        console.log('Usuario no es una organización')\n-        setError('No tienes permiso para ver esta página.')\n-        return\n-      }\n-      setIsOrganization(true)\n-      setUserCharityId(user.id)\n-    }\n-\n-    checkAuthentication()\n-  }, [router])\n-\n-  useEffect(() => {\n-    const fetchDonaciones = async () => {\n-      if (!isOrganization || userCharityId !== charityId) {\n-        console.log('Usuario no autorizado para ver estas donaciones')\n-        setError('No tienes permiso para ver estas donaciones.')\n-        return\n-      }\n-\n-      try {\n-        setLoading(true)\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/mercadopago/donations/${charityId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n-        }\n-\n-        const data = await res.json()\n-\n-        setDonaciones(data)\n-        setFilteredDonaciones(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n-      } finally {\n-        setLoading(false)\n-      }\n-    }\n-\n-    if (charityId && isOrganization) {\n-      fetchDonaciones()\n-    }\n-  }, [charityId, isOrganization, userCharityId])\n-\n-  useEffect(() => {\n-    let result = donaciones\n-    if (searchTerm) {\n-      result = result.filter(donacion => \n-        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n-      )\n-    }\n-    if (statusFilter !== 'all') {\n-      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n-    }\n-    setFilteredDonaciones(result)\n-    setCurrentPage(1)\n-  }, [searchTerm, statusFilter, donaciones])\n-\n-  const handleSort = (key) => {\n-    let direction = 'ascending'\n-    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n-      direction = 'descending'\n-    }\n-    setSortConfig({ key, direction })\n-    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n-      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n-      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n-      return 0\n-    }))\n-  }\n-\n-  const handleGenerateReport = async (period) => {\n-    try {\n-      setLoading(true)\n-      const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/mercadopago/report/${period}/${charityId}`, {\n-        method: 'GET',\n-        headers: {\n-          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n-        }\n-      })\n-\n-      if (!res.ok) {\n-        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n-      }\n-\n-      const blob = await res.blob()\n-      const url = window.URL.createObjectURL(blob)\n-      const a = document.createElement('a')\n-      a.href = url\n-      a.download = `reporte_${period}_${charityId}.xlsx`\n-      document.body.appendChild(a)\n-      a.click()\n-      a.remove()\n-    } catch (error) {\n-      console.error('Error:', error)\n-      setError('Error al generar el reporte')\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n-  const paginatedDonaciones = filteredDonaciones.slice(\n-    (currentPage - 1) * itemsPerPage,\n-    currentPage * itemsPerPage\n-  )\n-\n-  if (error) {\n-    return (\n-      <Card className=\"max-w-lg mx-auto mt-8\">\n-        <CardHeader>\n-          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <p>{error}</p>\n-          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n-        </CardContent>\n-      </Card>\n-    )\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n-      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n-        <CardHeader className=\"bg-[#042637] text-white\">\n-          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n-          <CardDescription className=\"text-gray-200\">\n-            Tabla con todas las donaciones recibidas\n-          </CardDescription>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n-            <div className=\"flex-1 w-full sm:w-auto\">\n-              <Input\n-                placeholder=\"Buscar por donante o método de pago\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"w-full\"\n-              />\n-            </div>\n-            <Select value={statusFilter} onValueChange={setStatusFilter}>\n-              <SelectTrigger className=\"w-full sm:w-[180px]\">\n-                <SelectValue placeholder=\"Filtrar por estado\" />\n-              </SelectTrigger>\n-              <SelectContent>\n-                <SelectItem value=\"all\">Todos los estados</SelectItem>\n-                <SelectItem value=\"approved\">Aprobado</SelectItem>\n-                <SelectItem value=\"pending\">Pendiente</SelectItem>\n-              </SelectContent>\n-            </Select>\n-          </div>\n-          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n-            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Semanal\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Mensual\n-            </Button>\n-            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n-              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n-              Reporte Anual\n-            </Button>\n-          </div>\n-          {loading ? (\n-            <div className=\"flex justify-center items-center h-64\">\n-              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n-            </div>\n-          ) : (\n-            <>\n-              <div className=\"overflow-x-auto\">\n-                <Table>\n-                  <TableHeader>\n-                    <TableRow>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n-                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n-                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n-                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n-                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n-                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n-                      </TableHead>\n-                    </TableRow>\n-                  </TableHeader>\n-                  <TableBody>\n-                    {paginatedDonaciones.map((donacion, index) => (\n-                      <TableRow key={index}>\n-                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n-                        <TableCell>\n-                          <Badge \n-                            variant=\"outline\" \n-                            className={`\n-                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n-                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n-                            `}\n-                          >\n-                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n-                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n-                      </TableRow>\n-                    ))}\n-                  </TableBody>\n-                </Table>\n-              </div>\n-              <div className=\"mt-4 flex justify-between items-center\">\n-                <p className=\"text-sm text-gray-600\">\n-                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n-                </p>\n-                <div className=\"flex space-x-2\">\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    Anterior\n-                  </Button>\n-                  <Button\n-                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n-                    disabled={currentPage === pageCount}\n-                  >\n-                    Siguiente\n-                  </Button>\n-                </div>\n-              </div>\n-            </>\n-          )}\n-        </CardContent>\n-      </Card>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732153926651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n   const getUserFromToken = async () => {\n     const token = localStorage.getItem('authToken')\n     if (!token) return null\n     try {\n-      const res = await fetch(`http://localhost:3000/profile?secret_token=${token}`, {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n         method: 'GET',\n         headers: {\n           'Content-Type': 'application/json',\n           'Authorization': `Bearer ${token}`\n"
                },
                {
                    "date": 1732153941731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,335 @@\n+'use client'\n+\n+import { useState, useEffect } from 'react'\n+import { useSearchParams, useRouter } from 'next/navigation'\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n+import { Badge } from \"@/components/ui/badge\"\n+import { Button } from \"@/components/ui/button\"\n+import { Input } from \"@/components/ui/input\"\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n+import { ArrowUpDown, Download, Loader2 } from 'lucide-react'\n+\n+const formatDate = (dateString) => {\n+  return new Date(dateString).toLocaleString('es-ES', {\n+    year: 'numeric',\n+    month: 'long',\n+    day: 'numeric',\n+    hour: '2-digit',\n+    minute: '2-digit'\n+  })\n+}\n+\n+const formatAmount = (amount, currency) => {\n+  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount)\n+}\n+\n+export default function TablaDonaciones() {\n+  const [donaciones, setDonaciones] = useState([])\n+  const [filteredDonaciones, setFilteredDonaciones] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' })\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('all')\n+  const [isOrganization, setIsOrganization] = useState(false)\n+  const [userCharityId, setUserCharityId] = useState(null)\n+  const itemsPerPage = 10\n+  const searchParams = useSearchParams()\n+  const charityId = searchParams.get('charityId')\n+  const router = useRouter()\n+\n+  const isAuthenticated = () => {\n+    return localStorage.getItem('authToken')\n+  }\n+\n+  const getUserFromToken = async () => {\n+    const token = localStorage.getItem('authToken')\n+    if (!token) return null\n+    try {\n+      const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${token}`\n+        },\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const data = await res.json()\n+\n+      return data.charity // Asegúrate de que la respuesta tiene los campos de la organización en `charity`\n+    } catch (error) {\n+      console.error('Error obteniendo el usuario:', error)\n+      return null\n+    }\n+  }\n+\n+  useEffect(() => {\n+    const checkAuthentication = async () => {\n+      if (!isAuthenticated()) {\n+        console.log('Usuario no autenticado, redirigiendo a login')\n+        router.push('/logind') // Redirige al login si no está autenticado\n+        return\n+      }\n+\n+      const user = await getUserFromToken()\n+      if (!user) {\n+        console.log('No se pudo obtener el usuario')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+\n+\n+      if (user.userType !== 'charity') {\n+        console.log('Usuario no es una organización')\n+        setError('No tienes permiso para ver esta página.')\n+        return\n+      }\n+      setIsOrganization(true)\n+      setUserCharityId(user.id)\n+    }\n+\n+    checkAuthentication()\n+  }, [router])\n+\n+  useEffect(() => {\n+    const fetchDonaciones = async () => {\n+      if (!isOrganization || userCharityId !== charityId) {\n+        console.log('Usuario no autorizado para ver estas donaciones')\n+        setError('No tienes permiso para ver estas donaciones.')\n+        return\n+      }\n+\n+      try {\n+        setLoading(true)\n+        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`)\n+        }\n+\n+        const data = await res.json()\n+\n+        setDonaciones(data)\n+        setFilteredDonaciones(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+        setError('No se encontró ninguna donación, asegúrese de tener donaciones.')\n+      } finally {\n+        setLoading(false)\n+      }\n+    }\n+\n+    if (charityId && isOrganization) {\n+      fetchDonaciones()\n+    }\n+  }, [charityId, isOrganization, userCharityId])\n+\n+  useEffect(() => {\n+    let result = donaciones\n+    if (searchTerm) {\n+      result = result.filter(donacion => \n+        donacion.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        donacion.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())\n+      )\n+    }\n+    if (statusFilter !== 'all') {\n+      result = result.filter(donacion => donacion.paymentStatus === statusFilter)\n+    }\n+    setFilteredDonaciones(result)\n+    setCurrentPage(1)\n+  }, [searchTerm, statusFilter, donaciones])\n+\n+  const handleSort = (key) => {\n+    let direction = 'ascending'\n+    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n+      direction = 'descending'\n+    }\n+    setSortConfig({ key, direction })\n+    setFilteredDonaciones(filteredDonaciones.sort((a, b) => {\n+      if (a[key] < b[key]) return direction === 'ascending' ? -1 : 1\n+      if (a[key] > b[key]) return direction === 'ascending' ? 1 : -1\n+      return 0\n+    }))\n+  }\n+\n+  const handleGenerateReport = async (period) => {\n+    try {\n+      setLoading(true)\n+      const res = await fetch(`http://localhost:3000/mercadopago/report/${period}/${charityId}`, {\n+        method: 'GET',\n+        headers: {\n+          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n+        }\n+      })\n+\n+      if (!res.ok) {\n+        throw new Error(`Error generating report: ${res.status} ${res.statusText}`)\n+      }\n+\n+      const blob = await res.blob()\n+      const url = window.URL.createObjectURL(blob)\n+      const a = document.createElement('a')\n+      a.href = url\n+      a.download = `reporte_${period}_${charityId}.xlsx`\n+      document.body.appendChild(a)\n+      a.click()\n+      a.remove()\n+    } catch (error) {\n+      console.error('Error:', error)\n+      setError('Error al generar el reporte')\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  const pageCount = Math.ceil(filteredDonaciones.length / itemsPerPage)\n+  const paginatedDonaciones = filteredDonaciones.slice(\n+    (currentPage - 1) * itemsPerPage,\n+    currentPage * itemsPerPage\n+  )\n+\n+  if (error) {\n+    return (\n+      <Card className=\"max-w-lg mx-auto mt-8\">\n+        <CardHeader>\n+          <CardTitle className=\"text-2xl font-bold text-red-600\">Error</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <p>{error}</p>\n+          <Button className=\"mt-4\" onClick={() => window.location.reload()}>Intentar de nuevo</Button>\n+        </CardContent>\n+      </Card>\n+    )\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n+      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n+        <CardHeader className=\"bg-[#042637] text-white\">\n+          <CardTitle className=\"text-2xl font-bold\">Registro de Donaciones De mercado pago</CardTitle>\n+          <CardDescription className=\"text-gray-200\">\n+            Tabla con todas las donaciones recibidas\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n+            <div className=\"flex-1 w-full sm:w-auto\">\n+              <Input\n+                placeholder=\"Buscar por donante o método de pago\"\n+                value={searchTerm}\n+                onChange={(e) => setSearchTerm(e.target.value)}\n+                className=\"w-full\"\n+              />\n+            </div>\n+            <Select value={statusFilter} onValueChange={setStatusFilter}>\n+              <SelectTrigger className=\"w-full sm:w-[180px]\">\n+                <SelectValue placeholder=\"Filtrar por estado\" />\n+              </SelectTrigger>\n+              <SelectContent>\n+                <SelectItem value=\"all\">Todos los estados</SelectItem>\n+                <SelectItem value=\"approved\">Aprobado</SelectItem>\n+                <SelectItem value=\"pending\">Pendiente</SelectItem>\n+              </SelectContent>\n+            </Select>\n+          </div>\n+          <div className=\"mb-4 flex flex-wrap justify-end space-x-2\">\n+            <Button onClick={() => handleGenerateReport('weekly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Semanal\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('monthly')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Mensual\n+            </Button>\n+            <Button onClick={() => handleGenerateReport('annual')} disabled={loading}>\n+              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Download className=\"mr-2 h-4 w-4\" />}\n+              Reporte Anual\n+            </Button>\n+          </div>\n+          {loading ? (\n+            <div className=\"flex justify-center items-center h-64\">\n+              <Loader2 className=\"h-8 w-8 animate-spin text-[#042637]\" />\n+            </div>\n+          ) : (\n+            <>\n+              <div className=\"overflow-x-auto\">\n+                <Table>\n+                  <TableHeader>\n+                    <TableRow>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('donorName')}>\n+                        Donante <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('amount')}>\n+                        Monto <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentStatus')}>\n+                        Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentMethod')}>\n+                        Método de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                      <TableHead className=\"text-[#042637] cursor-pointer\" onClick={() => handleSort('paymentDate')}>\n+                        Fecha de Pago <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n+                      </TableHead>\n+                    </TableRow>\n+                  </TableHeader>\n+                  <TableBody>\n+                    {paginatedDonaciones.map((donacion, index) => (\n+                      <TableRow key={index}>\n+                        <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n+                        <TableCell>\n+                          <Badge \n+                            variant=\"outline\" \n+                            className={`\n+                              ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n+                              ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n+                            `}\n+                          >\n+                            {donacion.paymentStatus === 'approved' ? 'Aprobado' : 'Pendiente'}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n+                        <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n+                      </TableRow>\n+                    ))}\n+                  </TableBody>\n+                </Table>\n+              </div>\n+              <div className=\"mt-4 flex justify-between items-center\">\n+                <p className=\"text-sm text-gray-600\">\n+                  Mostrando {Math.min(filteredDonaciones.length, currentPage * itemsPerPage)} de {filteredDonaciones.length} donaciones\n+                </p>\n+                <div className=\"flex space-x-2\">\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    Anterior\n+                  </Button>\n+                  <Button\n+                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))}\n+                    disabled={currentPage === pageCount}\n+                  >\n+                    Siguiente\n+                  </Button>\n+                </div>\n+              </div>\n+            </>\n+          )}\n+        </CardContent>\n+      </Card>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731024358197,
            "name": "Commit-0",
            "content": "'use client'\n\nimport { useState, useEffect } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Función para formatear fechas\nconst formatDate = (dateString) => {\n  return new Date(dateString).toLocaleString('es-ES', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\n// Función para formatear montos\nconst formatAmount = (amount, currency) => {\n  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: currency }).format(amount);\n};\n\nexport default function TablaDonaciones() {\n  const [donaciones, setDonaciones] = useState([]);\n  const [error, setError] = useState('');\n  const searchParams = useSearchParams();\n  const charityId = searchParams.get('charityId');\n\n  useEffect(() => {\n    const fetchDonaciones = async () => {\n      try {\n        const res = await fetch(`http://localhost:3001/mercadopago/donations/${charityId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (!res.ok) {\n          throw new Error(`Error fetching donations: ${res.status} ${res.statusText}`);\n        }\n\n        const data = await res.json();\n        setDonaciones(data);\n      } catch (error) {\n        console.error('Error:', error);\n        setError('Error fetching donations');\n      }\n    };\n\n    if (charityId) {\n      fetchDonaciones();\n    }\n  }, [charityId]);\n\n  if (error) return <p className=\"text-red-500\">{error}</p>;\n  if (donaciones.length === 0) return <p>Loading...</p>;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#ECE3D4] to-[#E1DDBF] p-8\">\n      <Card className=\"max-w-6xl mx-auto\" style={{ backgroundColor: '#D8C7A9' }}>\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-bold  bg-[#042637]\">Registro de Donaciones</CardTitle>\n          <CardDescription className=\" bg-[#042637]/70\">\n            Tabla con todas las donaciones recibidas\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"text-[#042637]\">Donante</TableHead>\n                  <TableHead className=\"text-[#042637]\">Monto</TableHead>\n                  <TableHead className=\"text-[#042637]\">Estado</TableHead>\n                  <TableHead className=\"text-[#042637]\">Método de Pago</TableHead>\n                  <TableHead className=\"text-[#042637]\">Fecha de Pago</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {donaciones.map((donacion, index) => (\n                  <TableRow key={index}>\n                    <TableCell className=\"font-medium text-[#042637]\">{donacion.donorName}</TableCell>\n                    <TableCell className=\"text-[#042637]\">{formatAmount(donacion.amount, donacion.currency)}</TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"outline\" \n                        className={`\n                          ${donacion.paymentStatus === 'approved' ? 'bg-green-100 text-green-800 border-green-300' : ''}\n                          ${donacion.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : ''}\n                        `}\n                      >\n                        {donacion.paymentStatus}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-[#042637]\">{donacion.paymentMethod}</TableCell>\n                    <TableCell className=\"text-[#042637]\">{formatDate(donacion.paymentDate)}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}"
        }
    ]
}