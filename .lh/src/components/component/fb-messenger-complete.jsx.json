{
    "sourceFile": "src/components/component/fb-messenger-complete.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 111,
            "patches": [
                {
                    "date": 1731385961299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731386124429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,296 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerComplete = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+  const [showSidebar, setShowSidebar] = useState(false)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  const toggleSidebar = () => {\n+    setShowSidebar(!showSidebar)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat._id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat._id === chat._id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n+              <Info size={20} />\n+              <span className=\"sr-only\">Información del chat</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg) => (\n+            <div key={msg.id} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n+              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n+                <p className=\"text-[#042637]\">{msg.content}</p>\n+                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Barra lateral de información */}\n+      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n+        <div className=\"p-4\">\n+          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n+          {activeChat && (\n+            <>\n+              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n+              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n+              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n+            </>\n+          )}\n+          <div className=\"space-y-2\">\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Ver archivos compartidos\n+            </button>\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Ver fotos compartidas\n+            </button>\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Buscar en la conversación\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731386166628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,297 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerComplete = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+  const [showSidebar, setShowSidebar] = useState(false)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  const toggleSidebar = () => {\n+    setShowSidebar(!showSidebar)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat._id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat._id === chat._id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n+              <Info size={20} />\n+              <span className=\"sr-only\">Información del chat</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg) => (\n+            <div key={msg.id} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n+              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n+                <p className=\"text-[#042637]\">{msg.content}</p>\n+                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Barra lateral de información */}\n+      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n+        <div className=\"p-4\">\n+          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n+          {activeChat && (\n+            <>\n+              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n+              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n+              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n+            </>\n+          )}\n+          <div className=\"space-y-2\">\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Ver archivos compartidos\n+            </button>\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Ver fotos compartidas\n+            </button>\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Buscar en la conversación\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731386405070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,11 +151,11 @@\n         </div>\n         <div className=\"flex-1 overflow-y-auto\">\n           {chatPreviews.map((chat) => (\n             <div\n-              key={chat._id}\n+              key={chat.id}\n               className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat._id === chat._id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n               }`}\n               onClick={() => {\n                 setActiveChat(chat)\n                 if (window.innerWidth < 768) {\n@@ -293,597 +293,5 @@\n     </div>\n   )\n }\n \n-export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerComplete = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-  const [showSidebar, setShowSidebar] = useState(false)\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  const toggleSidebar = () => {\n-    setShowSidebar(!showSidebar)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat._id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat._id === chat._id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n-              <Info size={20} />\n-              <span className=\"sr-only\">Información del chat</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg) => (\n-            <div key={msg.id} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n-              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n-                <p className=\"text-[#042637]\">{msg.content}</p>\n-                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Barra lateral de información */}\n-      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n-        <div className=\"p-4\">\n-          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n-          {activeChat && (\n-            <>\n-              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n-              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n-              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n-            </>\n-          )}\n-          <div className=\"space-y-2\">\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver archivos compartidos\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver fotos compartidas\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Buscar en la conversación\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerComplete = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-  const [showSidebar, setShowSidebar] = useState(false)\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  const toggleSidebar = () => {\n-    setShowSidebar(!showSidebar)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat._id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat._id === chat._id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n-              <Info size={20} />\n-              <span className=\"sr-only\">Información del chat</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg) => (\n-            <div key={msg.id} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n-              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n-                <p className=\"text-[#042637]\">{msg.content}</p>\n-                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Barra lateral de información */}\n-      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n-        <div className=\"p-4\">\n-          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n-          {activeChat && (\n-            <>\n-              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n-              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n-              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n-            </>\n-          )}\n-          <div className=\"space-y-2\">\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver archivos compartidos\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver fotos compartidas\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Buscar en la conversación\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731386546490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,297 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerComplete = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+  const [showSidebar, setShowSidebar] = useState(false)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  const toggleSidebar = () => {\n+    setShowSidebar(!showSidebar)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n+              <Info size={20} />\n+              <span className=\"sr-only\">Información del chat</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg) => (\n+            <div key={msg.id} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n+              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n+                <p className=\"text-[#042637]\">{msg.content}</p>\n+                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Barra lateral de información */}\n+      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n+        <div className=\"p-4\">\n+          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n+          {activeChat && (\n+            <>\n+              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n+              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n+              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n+            </>\n+          )}\n+          <div className=\"space-y-2\">\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Ver archivos compartidos\n+            </button>\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Ver fotos compartidas\n+            </button>\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Buscar en la conversación\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731386681950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,297 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerComplete = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+  const [showSidebar, setShowSidebar] = useState(false)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  const toggleSidebar = () => {\n+    setShowSidebar(!showSidebar)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n+              <Info size={20} />\n+              <span className=\"sr-only\">Información del chat</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg) => (\n+            <div key={msg.id} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n+              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n+                <p className=\"text-[#042637]\">{msg.content}</p>\n+                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Barra lateral de información */}\n+      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n+        <div className=\"p-4\">\n+          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n+          {activeChat && (\n+            <>\n+              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n+              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n+              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n+            </>\n+          )}\n+          <div className=\"space-y-2\">\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Ver archivos compartidos\n+            </button>\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Ver fotos compartidas\n+            </button>\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Buscar en la conversación\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731386886406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,302 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerComplete = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+  const [showSidebar, setShowSidebar] = useState(false)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Chat previews:', data) // Log the chat previews\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        console.log('New chat created:', newChat) // Log the new chat\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Messages:', data) // Log the messages\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      console.log('Received message:', message) // Log the received message\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      console.log('Sending message:', newMessage) // Log the message being sent\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  const toggleSidebar = () => {\n+    setShowSidebar(!showSidebar)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n+              <Info size={20} />\n+              <span className=\"sr-only\">Información del chat</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg, index) => (\n+            <div key={index} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n+              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n+                <p className=\"text-[#042637]\">{msg.content}</p>\n+                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Barra lateral de información */}\n+      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n+        <div className=\"p-4\">\n+          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n+          {activeChat && (\n+            <>\n+              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n+              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n+              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n+            </>\n+          )}\n+          <div className=\"space-y-2\">\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Ver archivos compartidos\n+            </button>\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Ver fotos compartidas\n+            </button>\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Buscar en la conversación\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731387437825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,285 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerComplete = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+  const [showSidebar, setShowSidebar] = useState(false)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Chat previews:', data) // Log the chat previews\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        console.log('New chat created:', newChat) // Log the new chat\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Messages:', data) // Log the messages\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      console.log('Received message:', message) // Log the received message\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      console.log('Sending message:', newMessage) // Log the message being sent\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  const toggleSidebar = () => {\n+    setShowSidebar(!showSidebar)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamar</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Info size={20} />\n+              <span className=\"sr-only\">Información</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg, index) => (\n+            <div\n+              key={index}\n+              className={`mb-2 ${msg.senderId === user.id ? 'text-right' : 'text-left'}`}\n+            >\n+              <div\n+                className={`inline-block p-2 rounded-lg ${\n+                  msg.senderId === user.id ? 'bg-[#D8C7A9] text-[#042637]' : 'bg-[#E1DDBF] text-[#042637]'\n+                }`}\n+              >\n+                {msg.text}\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Paperclip size={20} />\n+              <span className=\"sr-only\">Adjuntar archivo</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Image size={20} />\n+              <span className=\"sr-only\">Adjuntar imagen</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"flex-1 p-2 rounded-full bg-[#E1DDBF] text-[#042637] placeholder-[#042637]/70 focus:outline-none\"\n+            />\n+            <button onClick={handleSend} className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Sidebar de información del chat */}\n+      <div\n+        className={`w-full md:w-[320px] lg:w-[360px] bg-[#E1DDBF] border-l border-[#D8C7A9] flex flex-col ${\n+          showSidebar ? 'block' : 'hidden'\n+        }`}\n+      >\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h2 className=\"font-semibold text-xl text-[#042637]\">Detalles del chat</h2>\n+        </div>\n+        <div className=\"p-4\">\n+          {/* Aquí puedes agregar más contenido relacionado con la información del chat */}\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false })\n"
                },
                {
                    "date": 1731392446927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+import { useState, useEffect } from 'react';\n+import { useRouter } from 'next/router';\n+\n+const FbMessengerComplete = () => {\n+  const [chats, setChats] = useState([]);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [showSidebar, setShowSidebar] = useState(false);\n+  const router = useRouter();\n+  const user = { id: '670447d138c6cbf0d6bc255e' }; // Simula un usuario para pruebas\n+\n+  // Fetch chats from the API\n+  useEffect(() => {\n+    async function fetchChats() {\n+      try {\n+        const response = await fetch(`http://localhost:3001/chats?userId=${user.id}`);\n+\n+        if (!response.ok) {\n+          console.error('Error al obtener los chats:', response.statusText);\n+          return;\n+        }\n+\n+        const data = await response.json();\n+\n+        // Mostrar los datos por consola\n+        console.log(\"Datos de la API:\", data); // Esto mostrará lo que recibes de la API en la consola\n+\n+        setChats(data);\n+      } catch (error) {\n+        console.error('Error en la solicitud de chats:', error);\n+      }\n+    }\n+\n+    fetchChats();\n+  }, []);\n+\n+  // Handle sending messages\n+  const handleSend = () => {\n+    if (message) {\n+      // Aquí enviarías el mensaje a la API, solo se muestra el cambio de estado para la demostración.\n+      setMessage('');\n+    }\n+  };\n+\n+  // Handle selecting an active chat\n+  const handleSelectChat = (chat) => {\n+    console.log(\"Chat seleccionado:\", chat); // Muestra el chat seleccionado\n+    setActiveChat(chat);\n+    setShowSidebar(true);\n+  };\n+\n+  return (\n+    <div className=\"flex\">\n+      {/* Barra lateral de chats */}\n+      <div className=\"w-[300px] bg-[#ECE3D4] p-4 border-r border-[#E1DDBF]\">\n+        <h2 className=\"text-xl font-semibold mb-4\">Chats</h2>\n+        <div className=\"space-y-4\">\n+          {chats.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className=\"flex items-center justify-between p-3 bg-[#D8C7A9] rounded-lg cursor-pointer hover:bg-[#BFB1A5] transition-colors\"\n+              onClick={() => handleSelectChat(chat)}\n+            >\n+              <div className=\"flex items-center space-x-3\">\n+                <div className=\"bg-[#042637] text-white p-2 rounded-full\">\n+                  {chat.name.charAt(0).toUpperCase()} {/* Muestra la inicial del nombre */}\n+                </div>\n+                <div>\n+                  <p className=\"font-semibold text-[#042637]\">{chat.name}</p>\n+                  <p className=\"text-sm text-[#042637]\">{chat.lastMessage}</p>\n+                </div>\n+              </div>\n+              <span className=\"text-sm text-[#042637]\">{new Date(chat.time).toLocaleTimeString()}</span>\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Área de chat activo */}\n+      {showSidebar && activeChat && (\n+        <div className=\"flex-1 p-4 bg-white\">\n+          <h2 className=\"text-xl font-semibold\">{activeChat.name}</h2>\n+          <div className=\"mt-4\">\n+            <p>{activeChat.lastMessage}</p>\n+          </div>\n+          <input\n+            type=\"text\"\n+            value={message}\n+            onChange={(e) => setMessage(e.target.value)}\n+            placeholder=\"Escribe un mensaje...\"\n+            className=\"w-full p-2 border rounded-lg mt-4\"\n+          />\n+          <button onClick={handleSend} className=\"bg-[#042637] text-white p-2 rounded-lg mt-2\">Enviar</button>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default FbMessengerComplete;\n"
                },
                {
                    "date": 1731392460981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+import { useEffect, useState } from 'react';\n+import { io } from 'socket.io-client';\n+\n+const ChatComponent = () => {\n+  const [chats, setChats] = useState([]);\n+  const [messages, setMessages] = useState([]);\n+  const [newMessage, setNewMessage] = useState('');\n+  const [activeChat, setActiveChat] = useState(null);\n+  const socket = io('http://localhost:3001'); // Conecta con el backend\n+\n+  useEffect(() => {\n+    // Obtener chats desde la API\n+    const fetchChats = async () => {\n+      const response = await fetch('http://localhost:3001/chats?userId=USER_ID');  // Reemplaza con tu ID\n+      const data = await response.json();\n+      setChats(data);\n+    };\n+\n+    fetchChats();\n+\n+    // Escuchar mensajes en tiempo real\n+    socket.on('receiveMessage', (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    });\n+\n+    return () => {\n+      socket.off('receiveMessage'); // Limpiar el evento cuando el componente se desmonte\n+    };\n+  }, []);\n+\n+  const handleChatSelect = async (chatId) => {\n+    // Obtener mensajes del chat seleccionado\n+    const response = await fetch(`http://localhost:3001/messages?senderId=USER_ID&receiverId=${chatId}`);\n+    const data = await response.json();\n+    setMessages(data);\n+    setActiveChat(chatId);\n+  };\n+\n+  const handleSendMessage = () => {\n+    if (newMessage && activeChat) {\n+      socket.emit('sendMessage', {\n+        senderId: 'USER_ID', // Reemplaza con el ID del usuario actual\n+        receiverId: activeChat,\n+        message: newMessage,\n+      });\n+      setNewMessage('');\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <div>\n+        <h1>Chats</h1>\n+        <div>\n+          {chats.map(chat => (\n+            <div key={chat.id} onClick={() => handleChatSelect(chat.id)}>\n+              <p>{chat.name}</p>\n+              <p>{chat.lastMessage}</p>\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {activeChat && (\n+        <div>\n+          <h2>Chat with {activeChat}</h2>\n+          <div>\n+            {messages.map((msg, index) => (\n+              <div key={index}>{msg.text}</div>\n+            ))}\n+          </div>\n+          <input\n+            type=\"text\"\n+            value={newMessage}\n+            onChange={(e) => setNewMessage(e.target.value)}\n+            placeholder=\"Escribe un mensaje\"\n+          />\n+          <button onClick={handleSendMessage}>Enviar</button>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default ChatComponent;\n"
                },
                {
                    "date": 1731392530280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+'use client';  // Marcar como un componente del cliente\n+\n import { useEffect, useState } from 'react';\n import { io } from 'socket.io-client';\n \n const ChatComponent = () => {\n@@ -7,12 +9,14 @@\n   const [newMessage, setNewMessage] = useState('');\n   const [activeChat, setActiveChat] = useState(null);\n   const socket = io('http://localhost:3001'); // Conecta con el backend\n \n+  const userId = 'USER_ID'; // Reemplaza esto con el ID real del usuario\n+\n   useEffect(() => {\n     // Obtener chats desde la API\n     const fetchChats = async () => {\n-      const response = await fetch('http://localhost:3001/chats?userId=USER_ID');  // Reemplaza con tu ID\n+      const response = await fetch(`http://localhost:3001/chats?userId=${userId}`);  // Reemplaza con tu ID\n       const data = await response.json();\n       setChats(data);\n     };\n \n@@ -29,19 +33,25 @@\n   }, []);\n \n   const handleChatSelect = async (chatId) => {\n     // Obtener mensajes del chat seleccionado\n-    const response = await fetch(`http://localhost:3001/messages?senderId=USER_ID&receiverId=${chatId}`);\n+    const chat = chats.find(c => c.id === chatId);\n+    const receiverId = chat.participants.find(p => p._id !== userId)._id;\n+\n+    const response = await fetch(`http://localhost:3001/messages?senderId=${userId}&receiverId=${receiverId}`);\n     const data = await response.json();\n     setMessages(data);\n     setActiveChat(chatId);\n   };\n \n   const handleSendMessage = () => {\n     if (newMessage && activeChat) {\n+      const chat = chats.find(c => c.id === activeChat);\n+      const receiverId = chat.participants.find(p => p._id !== userId)._id;\n+\n       socket.emit('sendMessage', {\n-        senderId: 'USER_ID', // Reemplaza con el ID del usuario actual\n-        receiverId: activeChat,\n+        senderId: userId, // Reemplaza con el ID del usuario actual\n+        receiverId: receiverId,\n         message: newMessage,\n       });\n       setNewMessage('');\n     }\n@@ -53,8 +63,9 @@\n         <h1>Chats</h1>\n         <div>\n           {chats.map(chat => (\n             <div key={chat.id} onClick={() => handleChatSelect(chat.id)}>\n+              <img src={chat.avatar} alt={chat.name} />\n               <p>{chat.name}</p>\n               <p>{chat.lastMessage}</p>\n             </div>\n           ))}\n@@ -82,1582 +93,4 @@\n   );\n };\n \n export default ChatComponent;\n-import { useState, useEffect } from 'react';\n-import { useRouter } from 'next/router';\n-\n-const FbMessengerComplete = () => {\n-  const [chats, setChats] = useState([]);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [showSidebar, setShowSidebar] = useState(false);\n-  const router = useRouter();\n-  const user = { id: '670447d138c6cbf0d6bc255e' }; // Simula un usuario para pruebas\n-\n-  // Fetch chats from the API\n-  useEffect(() => {\n-    async function fetchChats() {\n-      try {\n-        const response = await fetch(`http://localhost:3001/chats?userId=${user.id}`);\n-\n-        if (!response.ok) {\n-          console.error('Error al obtener los chats:', response.statusText);\n-          return;\n-        }\n-\n-        const data = await response.json();\n-\n-        // Mostrar los datos por consola\n-        console.log(\"Datos de la API:\", data); // Esto mostrará lo que recibes de la API en la consola\n-\n-        setChats(data);\n-      } catch (error) {\n-        console.error('Error en la solicitud de chats:', error);\n-      }\n-    }\n-\n-    fetchChats();\n-  }, []);\n-\n-  // Handle sending messages\n-  const handleSend = () => {\n-    if (message) {\n-      // Aquí enviarías el mensaje a la API, solo se muestra el cambio de estado para la demostración.\n-      setMessage('');\n-    }\n-  };\n-\n-  // Handle selecting an active chat\n-  const handleSelectChat = (chat) => {\n-    console.log(\"Chat seleccionado:\", chat); // Muestra el chat seleccionado\n-    setActiveChat(chat);\n-    setShowSidebar(true);\n-  };\n-\n-  return (\n-    <div className=\"flex\">\n-      {/* Barra lateral de chats */}\n-      <div className=\"w-[300px] bg-[#ECE3D4] p-4 border-r border-[#E1DDBF]\">\n-        <h2 className=\"text-xl font-semibold mb-4\">Chats</h2>\n-        <div className=\"space-y-4\">\n-          {chats.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className=\"flex items-center justify-between p-3 bg-[#D8C7A9] rounded-lg cursor-pointer hover:bg-[#BFB1A5] transition-colors\"\n-              onClick={() => handleSelectChat(chat)}\n-            >\n-              <div className=\"flex items-center space-x-3\">\n-                <div className=\"bg-[#042637] text-white p-2 rounded-full\">\n-                  {chat.name.charAt(0).toUpperCase()} {/* Muestra la inicial del nombre */}\n-                </div>\n-                <div>\n-                  <p className=\"font-semibold text-[#042637]\">{chat.name}</p>\n-                  <p className=\"text-sm text-[#042637]\">{chat.lastMessage}</p>\n-                </div>\n-              </div>\n-              <span className=\"text-sm text-[#042637]\">{new Date(chat.time).toLocaleTimeString()}</span>\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Área de chat activo */}\n-      {showSidebar && activeChat && (\n-        <div className=\"flex-1 p-4 bg-white\">\n-          <h2 className=\"text-xl font-semibold\">{activeChat.name}</h2>\n-          <div className=\"mt-4\">\n-            <p>{activeChat.lastMessage}</p>\n-          </div>\n-          <input\n-            type=\"text\"\n-            value={message}\n-            onChange={(e) => setMessage(e.target.value)}\n-            placeholder=\"Escribe un mensaje...\"\n-            className=\"w-full p-2 border rounded-lg mt-4\"\n-          />\n-          <button onClick={handleSend} className=\"bg-[#042637] text-white p-2 rounded-lg mt-2\">Enviar</button>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default FbMessengerComplete;\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerComplete = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-  const [showSidebar, setShowSidebar] = useState(false)\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Chat previews:', data) // Log the chat previews\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        console.log('New chat created:', newChat) // Log the new chat\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Messages:', data) // Log the messages\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      console.log('Received message:', message) // Log the received message\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      console.log('Sending message:', newMessage) // Log the message being sent\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  const toggleSidebar = () => {\n-    setShowSidebar(!showSidebar)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamar</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Info size={20} />\n-              <span className=\"sr-only\">Información</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg, index) => (\n-            <div\n-              key={index}\n-              className={`mb-2 ${msg.senderId === user.id ? 'text-right' : 'text-left'}`}\n-            >\n-              <div\n-                className={`inline-block p-2 rounded-lg ${\n-                  msg.senderId === user.id ? 'bg-[#D8C7A9] text-[#042637]' : 'bg-[#E1DDBF] text-[#042637]'\n-                }`}\n-              >\n-                {msg.text}\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Paperclip size={20} />\n-              <span className=\"sr-only\">Adjuntar archivo</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Image size={20} />\n-              <span className=\"sr-only\">Adjuntar imagen</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"flex-1 p-2 rounded-full bg-[#E1DDBF] text-[#042637] placeholder-[#042637]/70 focus:outline-none\"\n-            />\n-            <button onClick={handleSend} className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Sidebar de información del chat */}\n-      <div\n-        className={`w-full md:w-[320px] lg:w-[360px] bg-[#E1DDBF] border-l border-[#D8C7A9] flex flex-col ${\n-          showSidebar ? 'block' : 'hidden'\n-        }`}\n-      >\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h2 className=\"font-semibold text-xl text-[#042637]\">Detalles del chat</h2>\n-        </div>\n-        <div className=\"p-4\">\n-          {/* Aquí puedes agregar más contenido relacionado con la información del chat */}\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false })\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerComplete = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-  const [showSidebar, setShowSidebar] = useState(false)\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Chat previews:', data) // Log the chat previews\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        console.log('New chat created:', newChat) // Log the new chat\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Messages:', data) // Log the messages\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      console.log('Received message:', message) // Log the received message\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      console.log('Sending message:', newMessage) // Log the message being sent\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  const toggleSidebar = () => {\n-    setShowSidebar(!showSidebar)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n-              <Info size={20} />\n-              <span className=\"sr-only\">Información del chat</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg, index) => (\n-            <div key={index} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n-              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n-                <p className=\"text-[#042637]\">{msg.content}</p>\n-                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Barra lateral de información */}\n-      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n-        <div className=\"p-4\">\n-          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n-          {activeChat && (\n-            <>\n-              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n-              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n-              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n-            </>\n-          )}\n-          <div className=\"space-y-2\">\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver archivos compartidos\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver fotos compartidas\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Buscar en la conversación\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerComplete = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-  const [showSidebar, setShowSidebar] = useState(false)\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  const toggleSidebar = () => {\n-    setShowSidebar(!showSidebar)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n-              <Info size={20} />\n-              <span className=\"sr-only\">Información del chat</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg) => (\n-            <div key={msg.id} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n-              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n-                <p className=\"text-[#042637]\">{msg.content}</p>\n-                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Barra lateral de información */}\n-      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n-        <div className=\"p-4\">\n-          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n-          {activeChat && (\n-            <>\n-              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n-              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n-              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n-            </>\n-          )}\n-          <div className=\"space-y-2\">\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver archivos compartidos\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver fotos compartidas\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Buscar en la conversación\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerComplete = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-  const [showSidebar, setShowSidebar] = useState(false)\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  const toggleSidebar = () => {\n-    setShowSidebar(!showSidebar)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n-              <Info size={20} />\n-              <span className=\"sr-only\">Información del chat</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg) => (\n-            <div key={msg.id} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n-              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n-                <p className=\"text-[#042637]\">{msg.content}</p>\n-                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Barra lateral de información */}\n-      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n-        <div className=\"p-4\">\n-          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n-          {activeChat && (\n-            <>\n-              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n-              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n-              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n-            </>\n-          )}\n-          <div className=\"space-y-2\">\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver archivos compartidos\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver fotos compartidas\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Buscar en la conversación\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerComplete = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-  const [showSidebar, setShowSidebar] = useState(false)\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  const toggleSidebar = () => {\n-    setShowSidebar(!showSidebar)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n-              <Info size={20} />\n-              <span className=\"sr-only\">Información del chat</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg) => (\n-            <div key={msg.id} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n-              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n-                <p className=\"text-[#042637]\">{msg.content}</p>\n-                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Barra lateral de información */}\n-      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n-        <div className=\"p-4\">\n-          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n-          {activeChat && (\n-            <>\n-              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n-              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n-              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n-            </>\n-          )}\n-          <div className=\"space-y-2\">\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver archivos compartidos\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver fotos compartidas\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Buscar en la conversación\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731392561710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+'use client';  // Marcar como un componente del cliente\n+\n+import { useEffect, useState } from 'react';\n+import { io } from 'socket.io-client';\n+\n+const ChatComponent = () => {\n+  const [chats, setChats] = useState([]); // Asegúrate de que sea un array vacío al principio\n+  const [messages, setMessages] = useState([]);\n+  const [newMessage, setNewMessage] = useState('');\n+  const [activeChat, setActiveChat] = useState(null);\n+  const socket = io('http://localhost:3001'); // Conecta con el backend\n+\n+  const userId = 'USER_ID'; // Reemplaza esto con el ID real del usuario\n+\n+  useEffect(() => {\n+    // Obtener chats desde la API\n+    const fetchChats = async () => {\n+      try {\n+        const response = await fetch(`http://localhost:3001/chats?userId=${userId}`);\n+        const data = await response.json();\n+\n+        // Asegurarte de que data sea un arreglo\n+        if (Array.isArray(data)) {\n+          setChats(data);\n+        } else {\n+          console.error(\"La respuesta de la API no es un arreglo\");\n+        }\n+      } catch (error) {\n+        console.error(\"Error al obtener los chats:\", error);\n+      }\n+    };\n+\n+    fetchChats();\n+\n+    // Escuchar mensajes en tiempo real\n+    socket.on('receiveMessage', (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    });\n+\n+    return () => {\n+      socket.off('receiveMessage'); // Limpiar el evento cuando el componente se desmonte\n+    };\n+  }, []);\n+\n+  const handleChatSelect = async (chatId) => {\n+    // Obtener mensajes del chat seleccionado\n+    const chat = chats.find(c => c.id === chatId);\n+    const receiverId = chat.participants.find(p => p._id !== userId)._id;\n+\n+    const response = await fetch(`http://localhost:3001/messages?senderId=${userId}&receiverId=${receiverId}`);\n+    const data = await response.json();\n+    setMessages(data);\n+    setActiveChat(chatId);\n+  };\n+\n+  const handleSendMessage = () => {\n+    if (newMessage && activeChat) {\n+      const chat = chats.find(c => c.id === activeChat);\n+      const receiverId = chat.participants.find(p => p._id !== userId)._id;\n+\n+      socket.emit('sendMessage', {\n+        senderId: userId, // Reemplaza con el ID del usuario actual\n+        receiverId: receiverId,\n+        message: newMessage,\n+      });\n+      setNewMessage('');\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <div>\n+        <h1>Chats</h1>\n+        <div>\n+          {Array.isArray(chats) && chats.length > 0 ? (\n+            chats.map(chat => (\n+              <div key={chat.id} onClick={() => handleChatSelect(chat.id)}>\n+                <img src={chat.avatar} alt={chat.name} />\n+                <p>{chat.name}</p>\n+                <p>{chat.lastMessage}</p>\n+              </div>\n+            ))\n+          ) : (\n+            <p>No hay chats disponibles</p>\n+          )}\n+        </div>\n+      </div>\n+\n+      {activeChat && (\n+        <div>\n+          <h2>Chat with {activeChat}</h2>\n+          <div>\n+            {messages.map((msg, index) => (\n+              <div key={index}>{msg.text}</div>\n+            ))}\n+          </div>\n+          <input\n+            type=\"text\"\n+            value={newMessage}\n+            onChange={(e) => setNewMessage(e.target.value)}\n+            placeholder=\"Escribe un mensaje\"\n+          />\n+          <button onClick={handleSendMessage}>Enviar</button>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default ChatComponent;\n"
                },
                {
                    "date": 1731392583601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   const [newMessage, setNewMessage] = useState('');\n   const [activeChat, setActiveChat] = useState(null);\n   const socket = io('http://localhost:3001'); // Conecta con el backend\n \n-  const userId = 'USER_ID'; // Reemplaza esto con el ID real del usuario\n+  const userId = '670447d138c6cbf0d6bc255e'; // Reemplaza esto con el ID real del usuario\n \n   useEffect(() => {\n     // Obtener chats desde la API\n     const fetchChats = async () => {\n@@ -107,100 +107,4 @@\n   );\n };\n \n export default ChatComponent;\n-'use client';  // Marcar como un componente del cliente\n-\n-import { useEffect, useState } from 'react';\n-import { io } from 'socket.io-client';\n-\n-const ChatComponent = () => {\n-  const [chats, setChats] = useState([]);\n-  const [messages, setMessages] = useState([]);\n-  const [newMessage, setNewMessage] = useState('');\n-  const [activeChat, setActiveChat] = useState(null);\n-  const socket = io('http://localhost:3001'); // Conecta con el backend\n-\n-  const userId = 'USER_ID'; // Reemplaza esto con el ID real del usuario\n-\n-  useEffect(() => {\n-    // Obtener chats desde la API\n-    const fetchChats = async () => {\n-      const response = await fetch(`http://localhost:3001/chats?userId=${userId}`);  // Reemplaza con tu ID\n-      const data = await response.json();\n-      setChats(data);\n-    };\n-\n-    fetchChats();\n-\n-    // Escuchar mensajes en tiempo real\n-    socket.on('receiveMessage', (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    });\n-\n-    return () => {\n-      socket.off('receiveMessage'); // Limpiar el evento cuando el componente se desmonte\n-    };\n-  }, []);\n-\n-  const handleChatSelect = async (chatId) => {\n-    // Obtener mensajes del chat seleccionado\n-    const chat = chats.find(c => c.id === chatId);\n-    const receiverId = chat.participants.find(p => p._id !== userId)._id;\n-\n-    const response = await fetch(`http://localhost:3001/messages?senderId=${userId}&receiverId=${receiverId}`);\n-    const data = await response.json();\n-    setMessages(data);\n-    setActiveChat(chatId);\n-  };\n-\n-  const handleSendMessage = () => {\n-    if (newMessage && activeChat) {\n-      const chat = chats.find(c => c.id === activeChat);\n-      const receiverId = chat.participants.find(p => p._id !== userId)._id;\n-\n-      socket.emit('sendMessage', {\n-        senderId: userId, // Reemplaza con el ID del usuario actual\n-        receiverId: receiverId,\n-        message: newMessage,\n-      });\n-      setNewMessage('');\n-    }\n-  };\n-\n-  return (\n-    <div>\n-      <div>\n-        <h1>Chats</h1>\n-        <div>\n-          {chats.map(chat => (\n-            <div key={chat.id} onClick={() => handleChatSelect(chat.id)}>\n-              <img src={chat.avatar} alt={chat.name} />\n-              <p>{chat.name}</p>\n-              <p>{chat.lastMessage}</p>\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {activeChat && (\n-        <div>\n-          <h2>Chat with {activeChat}</h2>\n-          <div>\n-            {messages.map((msg, index) => (\n-              <div key={index}>{msg.text}</div>\n-            ))}\n-          </div>\n-          <input\n-            type=\"text\"\n-            value={newMessage}\n-            onChange={(e) => setNewMessage(e.target.value)}\n-            placeholder=\"Escribe un mensaje\"\n-          />\n-          <button onClick={handleSendMessage}>Enviar</button>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default ChatComponent;\n"
                },
                {
                    "date": 1731392613247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,307 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerComplete = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+  const [showSidebar, setShowSidebar] = useState(false)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Chat previews:', data) // Log the chat previews\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        console.log('New chat created:', newChat) // Log the new chat\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Messages:', data) // Log the messages\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      console.log('Received message:', message) // Log the received message\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      console.log('Sending message:', newMessage) // Log the message being sent\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  const toggleSidebar = () => {\n+    setShowSidebar(!showSidebar)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n+              <Info size={20} />\n+              <span className=\"sr-only\">Información del chat</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg, index) => (\n+            <div key={index} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n+              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n+                <p className=\"text-[#042637]\">{msg.content}</p>\n+                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Barra lateral de información */}\n+      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n+        <div className=\"p-4\">\n+          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n+          {activeChat && (\n+            <>\n+              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n+              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n+              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n+            </>\n+          )}\n+          <div className=\"space-y-2\">\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Ver archivos compartidos\n+            </button>\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Ver fotos compartidas\n+            </button>\n+            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n+              Buscar en la conversación\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731392720433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,11 +162,9 @@\n         <div className=\"flex-1 overflow-y-auto\">\n           {chatPreviews.map((chat) => (\n             <div\n               key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n               onClick={() => {\n                 setActiveChat(chat)\n                 if (window.innerWidth < 768) {\n                   setShowChatList(false)\n@@ -212,206 +210,59 @@\n           </div>\n           <div className=\"flex space-x-2\">\n             <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n               <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n             </button>\n             <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n               <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n             </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n               <Info size={20} />\n-              <span className=\"sr-only\">Información del chat</span>\n             </button>\n           </div>\n         </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg, index) => (\n-            <div key={index} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n-              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n-                <p className=\"text-[#042637]\">{msg.content}</p>\n-                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n+\n+        {/* Mensajes */}\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n               </div>\n             </div>\n           ))}\n         </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n \n-      {/* Barra lateral de información */}\n-      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n-        <div className=\"p-4\">\n-          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n-          {activeChat && (\n-            <>\n-              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n-              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n-              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n-            </>\n-          )}\n-          <div className=\"space-y-2\">\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver archivos compartidos\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Ver fotos compartidas\n-            </button>\n-            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n-              Buscar en la conversación\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n-'use client';  // Marcar como un componente del cliente\n-\n-import { useEffect, useState } from 'react';\n-import { io } from 'socket.io-client';\n-\n-const ChatComponent = () => {\n-  const [chats, setChats] = useState([]); // Asegúrate de que sea un array vacío al principio\n-  const [messages, setMessages] = useState([]);\n-  const [newMessage, setNewMessage] = useState('');\n-  const [activeChat, setActiveChat] = useState(null);\n-  const socket = io('http://localhost:3001'); // Conecta con el backend\n-\n-  const userId = '670447d138c6cbf0d6bc255e'; // Reemplaza esto con el ID real del usuario\n-\n-  useEffect(() => {\n-    // Obtener chats desde la API\n-    const fetchChats = async () => {\n-      try {\n-        const response = await fetch(`http://localhost:3001/chats?userId=${userId}`);\n-        const data = await response.json();\n-\n-        // Asegurarte de que data sea un arreglo\n-        if (Array.isArray(data)) {\n-          setChats(data);\n-        } else {\n-          console.error(\"La respuesta de la API no es un arreglo\");\n-        }\n-      } catch (error) {\n-        console.error(\"Error al obtener los chats:\", error);\n-      }\n-    };\n-\n-    fetchChats();\n-\n-    // Escuchar mensajes en tiempo real\n-    socket.on('receiveMessage', (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    });\n-\n-    return () => {\n-      socket.off('receiveMessage'); // Limpiar el evento cuando el componente se desmonte\n-    };\n-  }, []);\n-\n-  const handleChatSelect = async (chatId) => {\n-    // Obtener mensajes del chat seleccionado\n-    const chat = chats.find(c => c.id === chatId);\n-    const receiverId = chat.participants.find(p => p._id !== userId)._id;\n-\n-    const response = await fetch(`http://localhost:3001/messages?senderId=${userId}&receiverId=${receiverId}`);\n-    const data = await response.json();\n-    setMessages(data);\n-    setActiveChat(chatId);\n-  };\n-\n-  const handleSendMessage = () => {\n-    if (newMessage && activeChat) {\n-      const chat = chats.find(c => c.id === activeChat);\n-      const receiverId = chat.participants.find(p => p._id !== userId)._id;\n-\n-      socket.emit('sendMessage', {\n-        senderId: userId, // Reemplaza con el ID del usuario actual\n-        receiverId: receiverId,\n-        message: newMessage,\n-      });\n-      setNewMessage('');\n-    }\n-  };\n-\n-  return (\n-    <div>\n-      <div>\n-        <h1>Chats</h1>\n-        <div>\n-          {Array.isArray(chats) && chats.length > 0 ? (\n-            chats.map(chat => (\n-              <div key={chat.id} onClick={() => handleChatSelect(chat.id)}>\n-                <img src={chat.avatar} alt={chat.name} />\n-                <p>{chat.name}</p>\n-                <p>{chat.lastMessage}</p>\n-              </div>\n-            ))\n-          ) : (\n-            <p>No hay chats disponibles</p>\n-          )}\n-        </div>\n-      </div>\n-\n-      {activeChat && (\n-        <div>\n-          <h2>Chat with {activeChat}</h2>\n-          <div>\n-            {messages.map((msg, index) => (\n-              <div key={index}>{msg.text}</div>\n-            ))}\n-          </div>\n+        {/* Caja de mensaje */}\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF] flex items-center space-x-2\">\n+          <button className=\"text-[#042637]\">\n\\ No newline at end of file\n+            <Smile size={20} />\n+          </button>\n+          <button className=\"text-[#042637]\">\n+            <Paperclip size={20} />\n+          </button>\n+          <button className=\"text-[#042637]\">\n+            <Image size={20} />\n+          </button>\n           <input\n             type=\"text\"\n-            value={newMessage}\n-            onChange={(e) => setNewMessage(e.target.value)}\n+            className=\"flex-1 p-2 rounded-full bg-[#E1DDBF] text-[#042637] placeholder-[#042637]/70 focus:outline-none\"\n             placeholder=\"Escribe un mensaje\"\n+            value={message}\n+            onChange={(e) => setMessage(e.target.value)}\n+            onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n           />\n-          <button onClick={handleSendMessage}>Enviar</button>\n+          <button className=\"text-[#042637]\" onClick={handleSend}>\n+            <Send size={20} />\n+          </button>\n         </div>\n-      )}\n+      </div>\n     </div>\n-  );\n-};\n+  )\n+}\n \n-export default ChatComponent;\n+export default dynamic(() => Promise.resolve(FbMessengerComplete), {\n+  ssr: false,\n+})\n"
                },
                {
                    "date": 1731392840155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,268 +0,0 @@\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerComplete = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-  const [showSidebar, setShowSidebar] = useState(false)\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Chat previews:', data) // Log the chat previews\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        console.log('New chat created:', newChat) // Log the new chat\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Messages:', data) // Log the messages\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      console.log('Received message:', message) // Log the received message\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      console.log('Sending message:', newMessage) // Log the message being sent\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  const toggleSidebar = () => {\n-    setShowSidebar(!showSidebar)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Info size={20} />\n-            </button>\n-          </div>\n-        </div>\n-\n-        {/* Mensajes */}\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        {/* Caja de mensaje */}\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF] flex items-center space-x-2\">\n-          <button className=\"text-[#042637]\">\n-            <Smile size={20} />\n-          </button>\n-          <button className=\"text-[#042637]\">\n-            <Paperclip size={20} />\n-          </button>\n-          <button className=\"text-[#042637]\">\n-            <Image size={20} />\n-          </button>\n-          <input\n-            type=\"text\"\n-            className=\"flex-1 p-2 rounded-full bg-[#E1DDBF] text-[#042637] placeholder-[#042637]/70 focus:outline-none\"\n-            placeholder=\"Escribe un mensaje\"\n-            value={message}\n-            onChange={(e) => setMessage(e.target.value)}\n-            onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n-          />\n-          <button className=\"text-[#042637]\" onClick={handleSend}>\n-            <Send size={20} />\n-          </button>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerComplete), {\n-  ssr: false,\n-})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731392849736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,261 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerComplete = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+  const [showSidebar, setShowSidebar] = useState(false)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  const toggleSidebar = () => {\n+    setShowSidebar(!showSidebar)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => {\n+                  setActiveChat(chat)\n+                  if (window.innerWidth < 768) {\n+                    setShowChatList(false)\n+                  }\n+                }}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                  {chat.isActive && (\n+                    <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                  )}\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <div className=\"flex justify-between items-baseline\">\n+                    <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                    <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                  </div>\n+                  <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+                </div>\n+                {chat.unread > 0 && (\n+                  <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                    {chat.unread}\n+                  </div>\n+                )}\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Info size={20} />\n+            </button>\n+          </div>\n+        </div>\n+\n+        {/* Mensajes */}\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        {/* Caja de mensaje */}\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF] flex items-center space-x-2\">\n+          <button className=\"text-[#042637]\">\n+            <Smile size={20} />\n+          </button>\n+          <button className=\"text-[#042637]\">\n+            <Paperclip size={20} />\n+          </button>\n+          <button className=\"text-[#042637]\">\n+            <Image size={20} />\n+          </button>\n+          <input\n+            type=\"text\"\n+            className=\"flex-1 p-2 rounded-full bg-[#E1DDBF] text-[#042637] placeholder-[#042637]/70 focus:outline-none\"\n+            placeholder=\"Escribe un mensaje\"\n+            value={message}\n+            onChange={(e) => setMessage(e.target.value)}\n+            onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n+          />\n+          <button className=\"text-[#042637]\" onClick={handleSend}>\n+            <Send size={20} />\n+          </button>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerComplete), {\n+  ssr: false,\n+})\n"
                },
                {
                    "date": 1731393611204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,261 +0,0 @@\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerComplete = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-  const [showSidebar, setShowSidebar] = useState(false)\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  const toggleSidebar = () => {\n-    setShowSidebar(!showSidebar)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => {\n-                  setActiveChat(chat)\n-                  if (window.innerWidth < 768) {\n-                    setShowChatList(false)\n-                  }\n-                }}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                  {chat.isActive && (\n-                    <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                  )}\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <div className=\"flex justify-between items-baseline\">\n-                    <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                    <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                  </div>\n-                  <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-                </div>\n-                {chat.unread > 0 && (\n-                  <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                    {chat.unread}\n-                  </div>\n-                )}\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Info size={20} />\n-            </button>\n-          </div>\n-        </div>\n-\n-        {/* Mensajes */}\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        {/* Caja de mensaje */}\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF] flex items-center space-x-2\">\n-          <button className=\"text-[#042637]\">\n-            <Smile size={20} />\n-          </button>\n-          <button className=\"text-[#042637]\">\n-            <Paperclip size={20} />\n-          </button>\n-          <button className=\"text-[#042637]\">\n-            <Image size={20} />\n-          </button>\n-          <input\n-            type=\"text\"\n-            className=\"flex-1 p-2 rounded-full bg-[#E1DDBF] text-[#042637] placeholder-[#042637]/70 focus:outline-none\"\n-            placeholder=\"Escribe un mensaje\"\n-            value={message}\n-            onChange={(e) => setMessage(e.target.value)}\n-            onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n-          />\n-          <button className=\"text-[#042637]\" onClick={handleSend}>\n-            <Send size={20} />\n-          </button>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerComplete), {\n-  ssr: false,\n-})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731393617918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,267 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerComplete = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+  const [showSidebar, setShowSidebar] = useState(false)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Chat previews:', data) // Log de los chats\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        console.log('New chat created:', newChat) // Log del nuevo chat creado\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Messages for active chat:', data) // Log de los mensajes\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+      console.log('Received message:', message) // Log del mensaje recibido\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      console.log('Sent message:', newMessage) // Log del mensaje enviado\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  const toggleSidebar = () => {\n+    setShowSidebar(!showSidebar)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => {\n+                  setActiveChat(chat)\n+                  if (window.innerWidth < 768) {\n+                    setShowChatList(false)\n+                  }\n+                  console.log('Selected chat:', chat) // Log del chat seleccionado\n+                }}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                  {chat.isActive && (\n+                    <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                  )}\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <div className=\"flex justify-between items-baseline\">\n+                    <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                    <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                  </div>\n+                  <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+                </div>\n+                {chat.unread > 0 && (\n+                  <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                    {chat.unread}\n+                  </div>\n+                )}\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Info size={20} />\n+            </button>\n+          </div>\n+        </div>\n+\n+        {/* Mensajes */}\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        {/* Caja de mensaje */}\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF] flex items-center space-x-2\">\n+          <button className=\"text-[#042637]\">\n+            <Smile size={20} />\n+          </button>\n+          <button className=\"text-[#042637]\">\n+            <Paperclip size={20} />\n+          </button>\n+          <button className=\"text-[#042637]\">\n+            <Image size={20} />\n+          </button>\n+          <input\n+            type=\"text\"\n+            className=\"flex-1 p-2 rounded-full bg-[#E1DDBF] text-[#042637] placeholder-[#042637]/70 focus:outline-none\"\n+            placeholder=\"Escribe un mensaje\"\n+            value={message}\n+            onChange={(e) => setMessage(e.target.value)}\n+            onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n+          />\n+          <button className=\"text-[#042637]\" onClick={handleSend}>\n+            <Send size={20} />\n+          </button>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerComplete), {\n+  ssr: false,\n+})\n"
                },
                {
                    "date": 1731394937834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,268 +0,0 @@\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerComplete = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-  const [showSidebar, setShowSidebar] = useState(false)\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Chat previews:', data) // Log de los chats\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        console.log('New chat created:', newChat) // Log del nuevo chat creado\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Messages for active chat:', data) // Log de los mensajes\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-      console.log('Received message:', message) // Log del mensaje recibido\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      console.log('Sent message:', newMessage) // Log del mensaje enviado\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  const toggleSidebar = () => {\n-    setShowSidebar(!showSidebar)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => {\n-                  setActiveChat(chat)\n-                  if (window.innerWidth < 768) {\n-                    setShowChatList(false)\n-                  }\n-                  console.log('Selected chat:', chat) // Log del chat seleccionado\n-                }}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                  {chat.isActive && (\n-                    <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                  )}\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <div className=\"flex justify-between items-baseline\">\n-                    <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                    <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                  </div>\n-                  <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-                </div>\n-                {chat.unread > 0 && (\n-                  <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                    {chat.unread}\n-                  </div>\n-                )}\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Info size={20} />\n-            </button>\n-          </div>\n-        </div>\n-\n-        {/* Mensajes */}\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        {/* Caja de mensaje */}\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF] flex items-center space-x-2\">\n-          <button className=\"text-[#042637]\">\n-            <Smile size={20} />\n-          </button>\n-          <button className=\"text-[#042637]\">\n-            <Paperclip size={20} />\n-          </button>\n-          <button className=\"text-[#042637]\">\n-            <Image size={20} />\n-          </button>\n-          <input\n-            type=\"text\"\n-            className=\"flex-1 p-2 rounded-full bg-[#E1DDBF] text-[#042637] placeholder-[#042637]/70 focus:outline-none\"\n-            placeholder=\"Escribe un mensaje\"\n-            value={message}\n-            onChange={(e) => setMessage(e.target.value)}\n-            onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n-          />\n-          <button className=\"text-[#042637]\" onClick={handleSend}>\n-            <Send size={20} />\n-          </button>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerComplete), {\n-  ssr: false,\n-})\n-\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731394954604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,244 @@\n+'use client'\n \n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { Search, MoreHorizontal, ArrowLeft } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerComplete = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Chat previews:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId }),\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        console.log('New chat created:', newChat)\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Messages for active chat:', data)\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+      console.log('Received message:', message)\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      console.log('Sent message:', newMessage)\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => {\n+                  setActiveChat(chat)\n+                  if (window.innerWidth < 768) {\n+                    setShowChatList(false)\n+                  }\n+                  console.log('Selected chat:', chat)\n+                }}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                  {chat.isActive && (\n+                    <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                  )}\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <div className=\"flex justify-between items-baseline\">\n+                    <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                    <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                  </div>\n+                  <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+                </div>\n+                {chat.unread > 0 && (\n+                  <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                    {chat.unread}\n+                  </div>\n+                )}\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+        </div>\n+\n+        {/* Mensajes */}\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        {/* Caja de mensaje */}\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default FbMessengerComplete\n"
                },
                {
                    "date": 1731395281039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,5 +240,5 @@\n     </div>\n   )\n }\n \n-export default FbMessengerComplete\n+export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731395495834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,14 @@\n \n     // Fetch initial chat previews\n     const fetchChatPreviews = async () => {\n       try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+        console.log('Fetching chat previews for user:', user.id)\n+        const res = await fetch('http://localhost:3001/chats', {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n+            'userId': user.id\n           },\n         })\n         if (!res.ok) {\n           throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n@@ -45,8 +47,9 @@\n \n     // Crear un nuevo chat si se proporciona un receiverId\n     const createChat = async () => {\n       try {\n+        console.log('Creating chat with userId:', user.id, 'and receiverId:', receiverId)\n         const res = await fetch('http://localhost:3001/chats', {\n           method: 'POST',\n           headers: {\n             'Content-Type': 'application/json',\n@@ -70,13 +73,15 @@\n   useEffect(() => {\n     if (!user || !activeChat) return\n \n     // Unirse a la sala específica del usuario\n+    console.log('Joining room for chat:', activeChat._id)\n     socket.emit('joinRoom', activeChat._id)\n \n     // Fetch initial messages for the active chat\n     const fetchMessages = async () => {\n       try {\n+        console.log('Fetching messages for chat:', activeChat._id)\n         const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n         if (!res.ok) {\n           throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n         }\n@@ -98,8 +103,9 @@\n     socket.on('receiveMessage', handleReceiveMessage)\n \n     // Limpiar el evento cuando el componente se desmonta\n     return () => {\n+      console.log('Leaving room for chat:', activeChat._id)\n       socket.emit('leaveRoom', activeChat._id)\n       socket.off('receiveMessage', handleReceiveMessage)\n     }\n   }, [activeChat, user])\n"
                },
                {
                    "date": 1731395612468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,23 @@\n 'use client'\n \n import React, { useState, useEffect } from 'react'\n import dynamic from 'next/dynamic'\n-import { Search, MoreHorizontal, ArrowLeft } from 'lucide-react'\n import io from 'socket.io-client'\n \n const socket = io('http://localhost:3001')\n \n-const FbMessengerComplete = ({ user, receiverId }) => {\n+const FbMessengerSimple = ({ user }) => {\n   const [activeChat, setActiveChat] = useState(null)\n   const [message, setMessage] = useState('')\n   const [messages, setMessages] = useState([])\n   const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n \n   useEffect(() => {\n     if (!user) return\n \n-    // Fetch initial chat previews\n     const fetchChatPreviews = async () => {\n       try {\n-        console.log('Fetching chat previews for user:', user.id)\n         const res = await fetch('http://localhost:3001/chats', {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n@@ -31,9 +27,8 @@\n         if (!res.ok) {\n           throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n         }\n         const data = await res.json()\n-        console.log('Chat previews:', data)\n         setChatPreviews(data)\n       } catch (error) {\n         console.error('Error:', error)\n       }\n@@ -42,70 +37,33 @@\n     fetchChatPreviews()\n   }, [user])\n \n   useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        console.log('Creating chat with userId:', user.id, 'and receiverId:', receiverId)\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json',\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId }),\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        console.log('New chat created:', newChat)\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n     if (!user || !activeChat) return\n \n-    // Unirse a la sala específica del usuario\n-    console.log('Joining room for chat:', activeChat._id)\n     socket.emit('joinRoom', activeChat._id)\n \n-    // Fetch initial messages for the active chat\n     const fetchMessages = async () => {\n       try {\n-        console.log('Fetching messages for chat:', activeChat._id)\n         const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n         if (!res.ok) {\n           throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n         }\n         const data = await res.json()\n-        console.log('Messages for active chat:', data)\n         setMessages(data)\n       } catch (error) {\n         console.error('Error:', error)\n       }\n     }\n \n     fetchMessages()\n \n-    // Escuchar mensajes recibidos\n     const handleReceiveMessage = (message) => {\n       setMessages((prevMessages) => [...prevMessages, message])\n-      console.log('Received message:', message)\n     }\n     socket.on('receiveMessage', handleReceiveMessage)\n \n-    // Limpiar el evento cuando el componente se desmonta\n     return () => {\n-      console.log('Leaving room for chat:', activeChat._id)\n       socket.emit('leaveRoom', activeChat._id)\n       socket.off('receiveMessage', handleReceiveMessage)\n     }\n   }, [activeChat, user])\n@@ -123,38 +81,17 @@\n         text: message,\n       }\n       socket.emit('sendMessage', newMessage)\n       setMessages([...messages, newMessage])\n-      console.log('Sent message:', newMessage)\n       setMessage('')\n     }\n   }\n \n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n   return (\n     <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n         <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n         </div>\n         <div className=\"flex-1 overflow-y-auto\">\n           {chatPreviews.length === 0 ? (\n             <p className=\"text-center text-[#042637]\">No chats available.</p>\n@@ -162,56 +99,27 @@\n             chatPreviews.map((chat) => (\n               <div\n                 key={chat.id}\n                 className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => {\n-                  setActiveChat(chat)\n-                  if (window.innerWidth < 768) {\n-                    setShowChatList(false)\n-                  }\n-                  console.log('Selected chat:', chat)\n-                }}\n+                onClick={() => setActiveChat(chat)}\n               >\n                 <div className=\"relative mr-3\">\n                   <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                  {chat.isActive && (\n-                    <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                  )}\n                 </div>\n                 <div className=\"flex-1 min-w-0\">\n-                  <div className=\"flex justify-between items-baseline\">\n-                    <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                    <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                  </div>\n-                  <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n                 </div>\n-                {chat.unread > 0 && (\n-                  <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                    {chat.unread}\n-                  </div>\n-                )}\n               </div>\n             ))\n           )}\n         </div>\n       </div>\n \n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+      <div className=\"flex-1 flex flex-col\">\n         <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n         </div>\n \n-        {/* Mensajes */}\n         <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n           {messages.map((msg, idx) => (\n             <div\n               key={idx}\n@@ -223,9 +131,8 @@\n             </div>\n           ))}\n         </div>\n \n-        {/* Caja de mensaje */}\n         <div className=\"p-4 bg-[#E1DDBF]\">\n           <div className=\"flex items-center\">\n             <input\n               type=\"text\"\n@@ -246,5 +153,5 @@\n     </div>\n   )\n }\n \n-export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });\n\\ No newline at end of file\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731395740560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,156 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerSimple = ({ user }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => setActiveChat(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731395817135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,165 +26,11 @@\n         if (!res.ok) {\n           throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n         }\n         const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        constructor(params) {\n+          \n         }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => setActiveChat(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = ({ user }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'userId': user.id\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n         setChatPreviews(data)\n       } catch (error) {\n         console.error('Error:', error)\n       }\n"
                },
                {
                    "date": 1731395827608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerSimple = ({ user }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    console.log('Usuario logueado:', user)\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => setActiveChat(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731396093657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,318 +0,0 @@\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = ({ user }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    console.log('Usuario logueado:', user)\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => setActiveChat(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = ({ user }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        constructor(params) {\n-          \n-        }\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => setActiveChat(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731396207238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,101 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const SimpleMessenger = ({ user }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`)\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error fetching chats:', error)\n+      }\n+    }\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error fetching messages:', error)\n+      }\n+    }\n+    fetchMessages()\n+\n+    socket.on('receiveMessage', (msg) => setMessages((prev) => [...prev, msg]))\n+\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage')\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        text: message,\n+        chatId: activeChat._id,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  return (\n+    <div className=\"h-screen flex\">\n+      <div className=\"w-1/3 bg-gray-100 p-2\">\n+        {chatPreviews.map((chat) => (\n+          <div key={chat.id} onClick={() => setActiveChat(chat)} className=\"p-2 cursor-pointer\">\n+            <p>{chat.name}</p>\n+          </div>\n+        ))}\n+      </div>\n+      <div className=\"w-2/3 flex flex-col\">\n+        <div className=\"flex-1 p-2 overflow-y-auto\">\n+          {messages.map((msg, idx) => (\n+            <p key={idx} className={msg.senderId === user.id ? 'text-right' : 'text-left'}>\n+              {msg.text}\n+            </p>\n+          ))}\n+        </div>\n+        <div className=\"p-2\">\n+          <input\n+            type=\"text\"\n+            value={message}\n+            onChange={(e) => setMessage(e.target.value)}\n+            placeholder=\"Type a message...\"\n+            className=\"w-full p-2 border rounded\"\n+          />\n+          <button onClick={handleSend} className=\"p-2 bg-blue-500 text-white rounded mt-2\">\n+            Send\n+          </button>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(SimpleMessenger), { ssr: false })\n"
                },
                {
                    "date": 1731396291504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerSimple = ({ user }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    console.log('Usuario logueado:', user)\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => setActiveChat(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731396301287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+\n+const ChatList = ({ user }) => {\n+  const [chatPreviews, setChatPreviews] = useState([])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`)\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error fetching chats:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  return (\n+    <div className=\"h-screen flex flex-col items-center p-4 bg-gray-100\">\n+      <h1 className=\"text-2xl font-bold mb-4\">Lista de Chats</h1>\n+      <div className=\"w-full max-w-md bg-white shadow-lg rounded-lg p-4\">\n+        {chatPreviews.length === 0 ? (\n+          <p className=\"text-center text-gray-500\">No hay chats disponibles</p>\n+        ) : (\n+          chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className=\"p-3 border-b border-gray-200 cursor-pointer hover:bg-gray-50\"\n+            >\n+              <p className=\"font-semibold\">{chat.name}</p>\n+            </div>\n+          ))\n+        )}\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(ChatList), { ssr: false })\n"
                },
                {
                    "date": 1731396339900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,10 @@\n \n   useEffect(() => {\n     if (!user) return\n \n+    console.log('Usuario logueado:', user) // Imprime el usuario logueado en la consola\n+\n     const fetchChatPreviews = async () => {\n       try {\n         const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`)\n         const data = await res.json()\n@@ -43,264 +45,4 @@\n   )\n }\n \n export default dynamic(() => Promise.resolve(ChatList), { ssr: false })\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = ({ user }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    console.log('Usuario logueado:', user)\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => setActiveChat(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const SimpleMessenger = ({ user }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`)\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error fetching chats:', error)\n-      }\n-    }\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error fetching messages:', error)\n-      }\n-    }\n-    fetchMessages()\n-\n-    socket.on('receiveMessage', (msg) => setMessages((prev) => [...prev, msg]))\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage')\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        text: message,\n-        chatId: activeChat._id,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  return (\n-    <div className=\"h-screen flex\">\n-      <div className=\"w-1/3 bg-gray-100 p-2\">\n-        {chatPreviews.map((chat) => (\n-          <div key={chat.id} onClick={() => setActiveChat(chat)} className=\"p-2 cursor-pointer\">\n-            <p>{chat.name}</p>\n-          </div>\n-        ))}\n-      </div>\n-      <div className=\"w-2/3 flex flex-col\">\n-        <div className=\"flex-1 p-2 overflow-y-auto\">\n-          {messages.map((msg, idx) => (\n-            <p key={idx} className={msg.senderId === user.id ? 'text-right' : 'text-left'}>\n-              {msg.text}\n-            </p>\n-          ))}\n-        </div>\n-        <div className=\"p-2\">\n-          <input\n-            type=\"text\"\n-            value={message}\n-            onChange={(e) => setMessage(e.target.value)}\n-            placeholder=\"Type a message...\"\n-            className=\"w-full p-2 border rounded\"\n-          />\n-          <button onClick={handleSend} className=\"p-2 bg-blue-500 text-white rounded mt-2\">\n-            Send\n-          </button>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(SimpleMessenger), { ssr: false })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731396653661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,66 @@\n-'use client'\n+// Profile.js\n \n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n+\"use client\";\n \n-const ChatList = ({ user }) => {\n-  const [chatPreviews, setChatPreviews] = useState([])\n+import React, { useState, useEffect } from 'react';\n+import { useRouter } from 'next/navigation';\n+import ChatList from './ChatList';\n \n+export default function Profile() {\n+  const [profile, setProfile] = useState(null);\n+  const [error, setError] = useState('');\n+  const router = useRouter();\n+\n   useEffect(() => {\n-    if (!user) return\n+    const fetchProfile = async () => {\n+      const token = localStorage.getItem('authToken');\n \n-    console.log('Usuario logueado:', user) // Imprime el usuario logueado en la consola\n+      if (!token) {\n+        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n+        return;\n+      }\n \n-    const fetchChatPreviews = async () => {\n       try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`)\n-        const data = await res.json()\n-        setChatPreviews(data)\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        });\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+\n+        const data = await res.json();\n+\n+        if (data.user) {\n+          setProfile({ type: 'user', data: data.user });\n+        } else if (data.charity) {\n+          setProfile({ type: 'charity', data: data.charity });\n+        } else {\n+          throw new Error('Error fetching profile');\n+        }\n       } catch (error) {\n-        console.error('Error fetching chats:', error)\n+        console.error('Error:', error);\n+        setError('Error fetching profile');\n       }\n-    }\n+    };\n \n-    fetchChatPreviews()\n-  }, [user])\n+    fetchProfile();\n+  }, []);\n \n+  if (error) return <p className=\"text-red-500\">{error}</p>;\n+  if (!profile) return <p>Loading...</p>;\n+\n+  const { data } = profile;\n+\n   return (\n-    <div className=\"h-screen flex flex-col items-center p-4 bg-gray-100\">\n-      <h1 className=\"text-2xl font-bold mb-4\">Lista de Chats</h1>\n-      <div className=\"w-full max-w-md bg-white shadow-lg rounded-lg p-4\">\n-        {chatPreviews.length === 0 ? (\n-          <p className=\"text-center text-gray-500\">No hay chats disponibles</p>\n-        ) : (\n-          chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className=\"p-3 border-b border-gray-200 cursor-pointer hover:bg-gray-50\"\n-            >\n-              <p className=\"font-semibold\">{chat.name}</p>\n-            </div>\n-          ))\n-        )}\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(ChatList), { ssr: false })\n+    <div className=\"flex flex-col items-center justify-center mt-10\">\n+      <h1 className=\"text-2xl font-bold mb-4\">Perfil del Usuario</h1>\n+      {/* Renderizar la información del usuario */}\n+      <div>\n+        <p>ID: {data.id}</p>\n+        <p>Nombre: {data.nombre}</p>\n+        <p>Email: {data.email}</p>\n+      </div\n"
                },
                {
                    "date": 1731396662940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,5 +62,11 @@\n       <div>\n         <p>ID: {data.id}</p>\n         <p>Nombre: {data.nombre}</p>\n         <p>Email: {data.email}</p>\n-      </div\n+      </div>\n+\n+      {/* Pasar el usuario logueado a ChatList */}\n+      <ChatList user={data} />\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1731396673326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,72 +1,159 @@\n-// Profile.js\n+'use client'\n \n-\"use client\";\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n \n-import React, { useState, useEffect } from 'react';\n-import { useRouter } from 'next/navigation';\n-import ChatList from './ChatList';\n+const socket = io('http://localhost:3001')\n \n-export default function Profile() {\n-  const [profile, setProfile] = useState(null);\n-  const [error, setError] = useState('');\n-  const router = useRouter();\n+const FbMessengerSimple = ({ user }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n \n   useEffect(() => {\n-    const fetchProfile = async () => {\n-      const token = localStorage.getItem('authToken');\n+    if (!user) return\n \n-      if (!token) {\n-        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n-        return;\n-      }\n+    console.log('Usuario logueado:', user)\n \n+    const fetchChatPreviews = async () => {\n       try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n           method: 'GET',\n           headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        });\n-\n+            'Content-Type': 'application/json',\n+          },\n+        })\n         if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n         }\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n \n-        const data = await res.json();\n+    fetchChatPreviews()\n+  }, [user])\n \n-        if (data.user) {\n-          setProfile({ type: 'user', data: data.user });\n-        } else if (data.charity) {\n-          setProfile({ type: 'charity', data: data.charity });\n-        } else {\n-          throw new Error('Error fetching profile');\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n         }\n+        const data = await res.json()\n+        setMessages(data)\n       } catch (error) {\n-        console.error('Error:', error);\n-        setError('Error fetching profile');\n+        console.error('Error:', error)\n       }\n-    };\n+    }\n \n-    fetchProfile();\n-  }, []);\n+    fetchMessages()\n \n-  if (error) return <p className=\"text-red-500\">{error}</p>;\n-  if (!profile) return <p>Loading...</p>;\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n \n-  const { data } = profile;\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n \n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n   return (\n-    <div className=\"flex flex-col items-center justify-center mt-10\">\n-      <h1 className=\"text-2xl font-bold mb-4\">Perfil del Usuario</h1>\n-      {/* Renderizar la información del usuario */}\n-      <div>\n-        <p>ID: {data.id}</p>\n-        <p>Nombre: {data.nombre}</p>\n-        <p>Email: {data.email}</p>\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => setActiveChat(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n       </div>\n \n-      {/* Pasar el usuario logueado a ChatList */}\n-      <ChatList user={data} />\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n     </div>\n-  );\n+  )\n }\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731396806797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,159 +1,201 @@\n-'use client'\n+\"use client\";\n \n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n+import React, { useState, useEffect } from 'react';\n+import { useRouter } from 'next/navigation';\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Separator } from \"@/components/ui/separator\";\n+import { Badge } from \"@/components/ui/badge\";\n+import UpdateCharity from './UpdateCharity';\n \n-const socket = io('http://localhost:3001')\n+export default function Profile() {\n+  const [profile, setProfile] = useState(null);\n+  const [error, setError] = useState('');\n+  const [isEditing, setIsEditing] = useState(false);\n+  const router = useRouter();\n \n-const FbMessengerSimple = ({ user }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-\n   useEffect(() => {\n-    if (!user) return\n+    const fetchProfile = async () => {\n+      const token = localStorage.getItem('authToken');\n \n-    console.log('Usuario logueado:', user)\n+      if (!token) {\n+        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n+        return;\n+      }\n \n-    const fetchChatPreviews = async () => {\n       try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n           method: 'GET',\n           headers: {\n-            'Content-Type': 'application/json',\n-          },\n-        })\n+            'Content-Type': 'application/json'\n+          }\n+        });\n+\n         if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n         }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n+\n+        const data = await res.json();\n+\n+        if (data.user) {\n+          setProfile({ type: 'user', data: data.user });\n+        } else if (data.charity) {\n+          setProfile({ type: 'charity', data: data.charity });\n+        } else {\n+          throw new Error('Error fetching profile');\n+        }\n+\n       } catch (error) {\n-        console.error('Error:', error)\n+        console.error('Error:', error);\n+        setError('Error fetching profile');\n       }\n-    }\n+    };\n \n-    fetchChatPreviews()\n-  }, [user])\n+    fetchProfile();\n+  }, []);\n \n-  useEffect(() => {\n-    if (!user || !activeChat) return\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\n+  if (!profile) return <p>Loading...</p>;\n \n-    socket.emit('joinRoom', activeChat._id)\n+  const { type, data } = profile;\n \n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n+  const handleEditClick = () => {\n+    setIsEditing(true);\n+  };\n \n-    fetchMessages()\n+  const handleCancelEdit = () => {\n+    setIsEditing(false);\n+  };\n \n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n+  const handleMercadoPagoAuth = () => {\n+    router.push(`http://localhost:3001/mercadopago/auth/${data.id}`);\n+  };\n \n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n+  const handleViewDonations = () => {\n+    router.push(`/nations?charityId=${data.id}`);\n+  };\n \n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n+  if (isEditing) {\n+    return <UpdateCharity charityData={data} onUpdateSuccess={handleCancelEdit} onCancel={handleCancelEdit} />;\n   }\n \n   return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n\\ No newline at end of file\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => setActiveChat(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                </div>\n+    <div className=\"flex flex-col items-center justify-center mt-10\">\n+      <div className=\"flex flex-col md:flex-row gap-4\">\n+        <Card className=\"w-full max-w-md\">\n+          <CardHeader className=\"p-6\">\n+            <div className=\"flex items-center gap-4\">\n+              <Avatar className=\"h-16 w-16\">\n+                <AvatarImage src=\"/placeholder-user.jpg\" />\n+                <AvatarFallback>JD</AvatarFallback>\n+              </Avatar>\n+              <div className=\"text-[#e1ddbf] grid gap-1\">\n+                <h2 className=\"text-2xl font-bold\">{data.nombre} {data.apellido}</h2>\n+                <p className=\"text-[#4c7d78] text-muted-foreground\">{data.id} </p>\n+                <p className=\"text-[#4c7d78] text-muted-foreground\">{data.dni}</p>\n+                <p className=\"text-[#4c7d78] text-muted-foreground\">{data.email}</p>\n+                <p className=\"text-[#4c7d78] text-muted-foreground\">{data.role}</p>\n+                <p className=\"text-[#4c7d78] text-muted-foreground\">{data.telefono}</p>\n+                <p className=\"text-[#4c7d78] text-muted-foreground\">{data.direccion}</p>\n               </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n+            </div>\n+          </CardHeader>\n+          <CardContent className=\"bg-[#e1ddbf] p-6\">\n+            <div className=\"bg-[#e1ddbf] grid gap-4\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-[#042637]\">About</h3>\n+                <Button variant=\"ghost\" size=\"sm\" onClick={handleEditClick}>\n+                  <FilePenIcon className=\"w-4 h-4\" />\n+                  <span className=\"sr-only\">Edit</span>\n+                </Button>\n               </div>\n+              <p className=\"text-[#4c7d78] text-muted-foreground\">\n+                {data.descripcion ? data.descripcion : \n+                \"Coordinador de donaciones que ayuda a conectar a las personas con organizaciones benéficas. Él tiene una pasión por tener un impacto positivo en la comunidad y disfruta facilitando donaciones a organizaciones que proporcionan servicios vitales a quienes los necesitan.\"}\n+              </p>\n             </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n+            <Separator className=\"my-6\" />\n+            <div className=\"grid gap-4\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-[#042637]\">Supported Causes</h3>\n+                <Button variant=\"ghost\" size=\"sm\" onClick={handleEditClick}>\n+                  <FilePenIcon className=\"w-4 h-4\" />\n+                  <span className=\"sr-only\">Edit</span>\n+                </Button>\n+              </div>\n+              <div className=\"flex flex-wrap gap-2\">\n+                <Badge>Poverty Alleviation</Badge>\n+                <Badge>Education</Badge>\n+                <Badge>Healthcare</Badge>\n+                <Badge>Environmental Conservation</Badge>\n+                <Badge>Animal Welfare</Badge>\n+              </div>\n+            </div>\n+            <Separator className=\"my-6\" />\n+            <div className=\"grid gap-4\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-[#042637]\">Donate Now</h3>\n+              </div>\n+              <div className=\"flex flex-col gap-2\">\n+                <Button className=\"text-[#4c7d78]\">Donate to Charity</Button>\n+                <p className=\"text-[#4c7d78] text-muted-foreground text-sm\">\n+                  Your donation will make a difference in the lives of those in need.\n+                </p>\n+              </div>\n+            </div>\n+            <Separator className=\"my-6\" />\n+            <div className=\"grid gap-4\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-[#042637]\">Ver Donaciones</h3>\n+              </div>\n+              <div className=\"flex flex-col gap-2\">\n+                <Button className=\"text-[#4c7d78]\" onClick={handleViewDonations}>Ver Donaciones</Button>\n+              </div>\n+            </div>\n+          </CardContent>\n+        </Card>\n+        {type === 'charity' && (\n+          <div className=\"bg-[#e1ddbf] p-2 border rounded-lg shadow-lg inline-block text-center max-w-xs\">\n+            <h3 className=\"text-lg font-semibold text-[#042637]\">Importante</h3>\n+            {data.accessToken ? (\n+              <p className=\"text-[#4c7d78] text-muted-foreground mt-1\">\n+                Cuenta verificada para donaciones.\n+              </p>\n+            ) : (\n+              <>\n+                <p className=\"text-[#4c7d78] text-muted-foreground mt-1\">\n+                  Por favor, para poder recibir donaciones desde nuestra plataforma tienen que crear una cuenta en Mercado Pago, es gratis y aceptar el acceso que se les pedirá a través de este botón.\n+                </p>\n+                <Button className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\" onClick={handleMercadoPagoAuth}>\n+                  Autorizar Mercado Pago\n+                </Button>\n+              </>\n+            )}\n           </div>\n-        </div>\n+        )}\n       </div>\n     </div>\n-  )\n+  );\n }\n \n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n+function FilePenIcon(props) {\n+  return (\n+    <svg\n+      {...props}\n+      xmlns=\"http://www.w3.org/2000/svg\"\n+      width=\"24\"\n+      height=\"24\"\n+      viewBox=\"0 0 24 24\"\n+      fill=\"none\"\n+      stroke=\"currentColor\"\n+      strokeWidth=\"2\"\n+      strokeLinecap=\"round\"\n+      strokeLinejoin=\"round\"\n+    >\n+      <path d=\"M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10\" />\n+      <path d=\"M14 2v4a2 2 0 0 0 2 2h4\" />\n+      <path d=\"M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z\" />\n+    </svg>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731396825185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,201 +1,159 @@\n-\"use client\";\n+'use client'\n \n-import React, { useState, useEffect } from 'react';\n-import { useRouter } from 'next/navigation';\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Separator } from \"@/components/ui/separator\";\n-import { Badge } from \"@/components/ui/badge\";\n-import UpdateCharity from './UpdateCharity';\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n \n-export default function Profile() {\n-  const [profile, setProfile] = useState(null);\n-  const [error, setError] = useState('');\n-  const [isEditing, setIsEditing] = useState(false);\n-  const router = useRouter();\n+const socket = io('http://localhost:3001')\n \n+const FbMessengerSimple = ({ user }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+\n   useEffect(() => {\n-    const fetchProfile = async () => {\n-      const token = localStorage.getItem('authToken');\n+    if (!user) return\n \n-      if (!token) {\n-        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n-        return;\n-      }\n+    console.log('Usuario logueado:', user)\n \n+    const fetchChatPreviews = async () => {\n       try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n           method: 'GET',\n           headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        });\n-\n+            'Content-Type': 'application/json',\n+          },\n+        })\n         if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n         }\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n \n-        const data = await res.json();\n+    fetchChatPreviews()\n+  }, [user])\n \n-        if (data.user) {\n-          setProfile({ type: 'user', data: data.user });\n-        } else if (data.charity) {\n-          setProfile({ type: 'charity', data: data.charity });\n-        } else {\n-          throw new Error('Error fetching profile');\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n         }\n-\n+        const data = await res.json()\n+        setMessages(data)\n       } catch (error) {\n-        console.error('Error:', error);\n-        setError('Error fetching profile');\n+        console.error('Error:', error)\n       }\n-    };\n+    }\n \n-    fetchProfile();\n-  }, []);\n+    fetchMessages()\n \n-  if (error) return <p className=\"text-red-500\">{error}</p>;\n-  if (!profile) return <p>Loading...</p>;\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n \n-  const { type, data } = profile;\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n \n-  const handleEditClick = () => {\n-    setIsEditing(true);\n-  };\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n \n-  const handleCancelEdit = () => {\n-    setIsEditing(false);\n-  };\n-\n-  const handleMercadoPagoAuth = () => {\n-    router.push(`http://localhost:3001/mercadopago/auth/${data.id}`);\n-  };\n-\n-  const handleViewDonations = () => {\n-    router.push(`/nations?charityId=${data.id}`);\n-  };\n-\n-  if (isEditing) {\n-    return <UpdateCharity charityData={data} onUpdateSuccess={handleCancelEdit} onCancel={handleCancelEdit} />;\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n   }\n \n   return (\n-    <div className=\"flex flex-col items-center justify-center mt-10\">\n-      <div className=\"flex flex-col md:flex-row gap-4\">\n-        <Card className=\"w-full max-w-md\">\n-          <CardHeader className=\"p-6\">\n-            <div className=\"flex items-center gap-4\">\n-              <Avatar className=\"h-16 w-16\">\n-                <AvatarImage src=\"/placeholder-user.jpg\" />\n-                <AvatarFallback>JD</AvatarFallback>\n-              </Avatar>\n-              <div className=\"text-[#e1ddbf] grid gap-1\">\n-                <h2 className=\"text-2xl font-bold\">{data.nombre} {data.apellido}</h2>\n-                <p className=\"text-[#4c7d78] text-muted-foreground\">{data.id} </p>\n-                <p className=\"text-[#4c7d78] text-muted-foreground\">{data.dni}</p>\n-                <p className=\"text-[#4c7d78] text-muted-foreground\">{data.email}</p>\n-                <p className=\"text-[#4c7d78] text-muted-foreground\">{data.role}</p>\n-                <p className=\"text-[#4c7d78] text-muted-foreground\">{data.telefono}</p>\n-                <p className=\"text-[#4c7d78] text-muted-foreground\">{data.direccion}</p>\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => setActiveChat(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                </div>\n               </div>\n-            </div>\n-          </CardHeader>\n-          <CardContent className=\"bg-[#e1ddbf] p-6\">\n-            <div className=\"bg-[#e1ddbf] grid gap-4\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-[#042637]\">About</h3>\n-                <Button variant=\"ghost\" size=\"sm\" onClick={handleEditClick}>\n-                  <FilePenIcon className=\"w-4 h-4\" />\n-                  <span className=\"sr-only\">Edit</span>\n-                </Button>\n+            ))\n+          )}\n\\ No newline at end of file\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n               </div>\n-              <p className=\"text-[#4c7d78] text-muted-foreground\">\n-                {data.descripcion ? data.descripcion : \n-                \"Coordinador de donaciones que ayuda a conectar a las personas con organizaciones benéficas. Él tiene una pasión por tener un impacto positivo en la comunidad y disfruta facilitando donaciones a organizaciones que proporcionan servicios vitales a quienes los necesitan.\"}\n-              </p>\n             </div>\n-            <Separator className=\"my-6\" />\n-            <div className=\"grid gap-4\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-[#042637]\">Supported Causes</h3>\n-                <Button variant=\"ghost\" size=\"sm\" onClick={handleEditClick}>\n-                  <FilePenIcon className=\"w-4 h-4\" />\n-                  <span className=\"sr-only\">Edit</span>\n-                </Button>\n-              </div>\n-              <div className=\"flex flex-wrap gap-2\">\n-                <Badge>Poverty Alleviation</Badge>\n-                <Badge>Education</Badge>\n-                <Badge>Healthcare</Badge>\n-                <Badge>Environmental Conservation</Badge>\n-                <Badge>Animal Welfare</Badge>\n-              </div>\n-            </div>\n-            <Separator className=\"my-6\" />\n-            <div className=\"grid gap-4\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-[#042637]\">Donate Now</h3>\n-              </div>\n-              <div className=\"flex flex-col gap-2\">\n-                <Button className=\"text-[#4c7d78]\">Donate to Charity</Button>\n-                <p className=\"text-[#4c7d78] text-muted-foreground text-sm\">\n-                  Your donation will make a difference in the lives of those in need.\n-                </p>\n-              </div>\n-            </div>\n-            <Separator className=\"my-6\" />\n-            <div className=\"grid gap-4\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-[#042637]\">Ver Donaciones</h3>\n-              </div>\n-              <div className=\"flex flex-col gap-2\">\n-                <Button className=\"text-[#4c7d78]\" onClick={handleViewDonations}>Ver Donaciones</Button>\n-              </div>\n-            </div>\n-          </CardContent>\n-        </Card>\n-        {type === 'charity' && (\n-          <div className=\"bg-[#e1ddbf] p-2 border rounded-lg shadow-lg inline-block text-center max-w-xs\">\n-            <h3 className=\"text-lg font-semibold text-[#042637]\">Importante</h3>\n-            {data.accessToken ? (\n-              <p className=\"text-[#4c7d78] text-muted-foreground mt-1\">\n-                Cuenta verificada para donaciones.\n-              </p>\n-            ) : (\n-              <>\n-                <p className=\"text-[#4c7d78] text-muted-foreground mt-1\">\n-                  Por favor, para poder recibir donaciones desde nuestra plataforma tienen que crear una cuenta en Mercado Pago, es gratis y aceptar el acceso que se les pedirá a través de este botón.\n-                </p>\n-                <Button className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\" onClick={handleMercadoPagoAuth}>\n-                  Autorizar Mercado Pago\n-                </Button>\n-              </>\n-            )}\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n           </div>\n-        )}\n+        </div>\n       </div>\n     </div>\n-  );\n+  )\n }\n \n-function FilePenIcon(props) {\n-  return (\n-    <svg\n-      {...props}\n-      xmlns=\"http://www.w3.org/2000/svg\"\n-      width=\"24\"\n-      height=\"24\"\n-      viewBox=\"0 0 24 24\"\n-      fill=\"none\"\n-      stroke=\"currentColor\"\n-      strokeWidth=\"2\"\n-      strokeLinecap=\"round\"\n-      strokeLinejoin=\"round\"\n-    >\n-      <path d=\"M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10\" />\n-      <path d=\"M14 2v4a2 2 0 0 0 2 2h4\" />\n-      <path d=\"M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z\" />\n-    </svg>\n-  );\n-}\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731397237443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,182 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerSimple = ({ token }) => {\n+  const [user, setUser] = useState(null)\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+\n+  useEffect(() => {\n+    const fetchUserId = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/user?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setUser(data.user)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchUserId()\n+  }, [token])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    console.log('Usuario logueado:', user)\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => setActiveChat(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731397331582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerSimple = ({ token }) => {\n+  const [user, setUser] = useState(null)\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+\n+  useEffect(() => {\n+    const fetchUserId = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/user?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setUser(data.user)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchUserId()\n+  }, [token])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    console.log('Usuario logueado:', user)\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user, token])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user, token])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => setActiveChat(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731397392862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,346 +183,5 @@\n     </div>\n   )\n }\n \n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = ({ token }) => {\n-  const [user, setUser] = useState(null)\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-\n-  useEffect(() => {\n-    const fetchUserId = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/user?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setUser(data.user)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchUserId()\n-  }, [token])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    console.log('Usuario logueado:', user)\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => setActiveChat(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = ({ user }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    console.log('Usuario logueado:', user)\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => setActiveChat(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731397462838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n   useEffect(() => {\n     const fetchUserId = async () => {\n       try {\n-        const res = await fetch(`http://localhost:3001/user?secret_token=${token}`, {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n           },\n"
                },
                {
                    "date": 1731397588751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerSimple = () => {\n+  const [user, setUser] = useState(null)\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+\n+  const token = localStorage.getItem('authToken')\n+\n+  useEffect(() => {\n+    const fetchUserId = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setUser(data.user)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchUserId()\n+  }, [token])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    console.log('Usuario logueado:', user)\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user, token])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user, token])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => setActiveChat(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731398024535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,195 +112,13 @@\n         senderId: user.id,\n         receiverId: activeChat._id,\n         text: message,\n       }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => setActiveChat(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = ({ token }) => {\n-  const [user, setUser] = useState(null)\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-\n-  useEffect(() => {\n-    const fetchUserId = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setUser(data.user)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchUserId()\n-  }, [token])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    console.log('Usuario logueado:', user)\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user, token])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user, token])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n+      console.log('Mensaje enviado:', {\n         senderId: user.id,\n         receiverId: activeChat._id,\n         text: message,\n-      }\n+      })\n       socket.emit('sendMessage', newMessage)\n       setMessages([...messages, newMessage])\n       setMessage('')\n     }\n"
                },
                {
                    "date": 1731398322856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null)\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+\n+  const token = localStorage.getItem('authToken')\n+\n+  useEffect(() => {\n+    const fetchUserId = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setUser(data.user)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchUserId()\n+  }, [token])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    console.log('Usuario logueado:', user)\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user, token])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user, token])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: receiverId,\n+        text: message,\n+      }\n+      console.log('Mensaje enviado:', {\n+        senderId: user.id,\n+        receiverId: receiverId,\n+        text: message,\n+      })\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => setActiveChat(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731398378926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,200 +191,5 @@\n     </div>\n   )\n }\n \n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = () => {\n-  const [user, setUser] = useState(null)\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-\n-  const token = localStorage.getItem('authToken')\n-\n-  useEffect(() => {\n-    const fetchUserId = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setUser(data.user)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchUserId()\n-  }, [token])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    console.log('Usuario logueado:', user)\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user, token])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user, token])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      }\n-      console.log('Mensaje enviado:', {\n-        senderId: user.id,\n-        receiverId: activeChat._id,\n-        text: message,\n-      })\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => setActiveChat(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731398837602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null)\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [recipientName, setRecipientName] = useState('')\n+\n+  const token = localStorage.getItem('authToken')\n+\n+  useEffect(() => {\n+    const fetchUserId = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setUser(data.user)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchUserId()\n+  }, [token])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    console.log('Usuario logueado:', user)\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user, token])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user, token])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: receiverId,\n+        text: message,\n+      }\n+      console.log('Mensaje enviado:', {\n+        senderId: user.id,\n+        receiverId: receiverId,\n+        text: message,\n+      })\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat)\n+    const recipient = chat.participants.find(participant => participant.id !== user.id)\n+    setRecipientName(recipient.name)\n+    receiverId = recipient.id\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731398975804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,8 +129,9 @@\n     setActiveChat(chat)\n     const recipient = chat.participants.find(participant => participant.id !== user.id)\n     setRecipientName(recipient.name)\n     receiverId = recipient.id\n+    \n   }\n \n   return (\n     <div className=\"flex h-screen bg-[#ECE3D4]\">\n@@ -199,200 +200,5 @@\n     </div>\n   )\n }\n \n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null)\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-\n-  const token = localStorage.getItem('authToken')\n-\n-  useEffect(() => {\n-    const fetchUserId = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setUser(data.user)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchUserId()\n-  }, [token])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    console.log('Usuario logueado:', user)\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user, token])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user, token])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: receiverId,\n-        text: message,\n-      }\n-      console.log('Mensaje enviado:', {\n-        senderId: user.id,\n-        receiverId: receiverId,\n-        text: message,\n-      })\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => setActiveChat(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731398995631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null)\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [recipientName, setRecipientName] = useState('')\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId)\n+\n+  const token = localStorage.getItem('authToken')\n+\n+  useEffect(() => {\n+    const fetchUserId = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setUser(data.user)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchUserId()\n+  }, [token])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    console.log('Usuario logueado:', user)\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user, token])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user, token])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        text: message,\n+      }\n+      console.log('Mensaje enviado:', {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        text: message,\n+      })\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat)\n+    const recipient = chat.participants.find(participant => participant.id !== user.id)\n+    setRecipientName(recipient.name)\n+    setCurrentReceiverId(recipient.id)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.text}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731399907932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import { useEffect, useState } from 'react';\n+import { io } from 'socket.io-client';\n+\n+const ChatComponent = ({ userId }) => {\n+  const [chats, setChats] = useState([]);\n+  const [messages, setMessages] = useState([]);\n+  const [newMessage, setNewMessage] = useState('');\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [socket, setSocket] = useState(null);\n+\n+  // Conectar al socket y limpiar al desmontar\n+  useEffect(() => {\n+    const newSocket = io('http://localhost:3001');\n+    setSocket(newSocket);\n+\n+    return () => {\n+      newSocket.disconnect();\n+    };\n+  }, []);\n+\n+  // Obtener chats desde la API y configurar escucha de mensajes\n+  useEffect(() => {\n+    const fetchChats = async () => {\n+      try {\n+        const response = await fetch(`http://localhost:3001/chats?userId=${userId}`);\n+        const data = await response.json();\n+        setChats(data);\n+      } catch (error) {\n+        console.error('Error fetching chats:', error);\n+      }\n+    };\n+\n+    fetchChats();\n+\n+    if (socket) {\n+      socket.on('receiveMessage', (message) => {\n+        setMessages((prevMessages) => [...prevMessages, message]);\n+      });\n+\n+      return () => {\n+        socket.off('receiveMessage');\n+      };\n+    }\n+  }, [socket, userId]);\n+\n+  // Manejar selección de chat\n+  const handleChatSelect = async (chatId) => {\n+    try {\n+      const response = await fetch(`http://localhost:3001/messages?chatId=${chatId}`);\n+      const data = await response.json();\n+      setMessages(data);\n+      setActiveChat(chatId);\n+    } catch (error) {\n+      console.error('Error fetching messages:', error);\n+    }\n+  };\n+\n+  // Enviar mensaje al chat activo\n+  const handleSendMessage = async () => {\n+    if (newMessage && activeChat && socket) {\n+      const messageData = {\n+        content: newMessage, // Cambiado de 'text' a 'content'\n+        senderId: userId,\n+        receiverId: activeChat,\n+      };\n+\n+      try {\n+        const response = await fetch('http://localhost:3001/messages', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify(messageData)\n+        });\n+\n+        if (!response.ok) {\n+          throw new Error('Error sending message');\n+        }\n+\n+        const message = await response.json();\n+        socket.emit('sendMessage', message);\n+        setMessages([...messages, message]);\n+        setNewMessage('');\n+      } catch (error) {\n+        console.error('Error sending message:', error);\n+      }\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <div>\n+        <h1>Chats</h1>\n+        <div>\n+          {chats.map((chat) => (\n+            <ChatItem key={chat.id} chat={chat} onSelect={() => handleChatSelect(chat.id)} />\n+          ))}\n+        </div>\n+      </div>\n+\n+      {activeChat && (\n+        <div>\n+          <h2>Chat with {activeChat}</h2>\n+          <div>\n+            {messages.map((msg, index) => (\n+              <MessageItem key={index} message={msg} />\n+            ))}\n+          </div>\n+          <input\n+            type=\"text\"\n+            value={newMessage}\n+            onChange={(e) => setNewMessage(e.target.value)}\n+            placeholder=\"Escribe un mensaje\"\n+          />\n+          <button onClick={handleSendMessage}>Enviar</button>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+const ChatItem = ({ chat, onSelect }) => (\n+  <div onClick={onSelect}>\n+    <p>{chat.participants.find(participant => participant.id !== userId).name}</p>\n+    <p>{chat.lastMessage}</p>\n+  </div>\n+);\n+\n+const MessageItem = ({ message }) => (\n+  <div>{message.content}</div>\n+);\n+\n+export default ChatComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731399912979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import { useEffect, useState } from 'react';\n+import { io } from 'socket.io-client';\n+\n+const ChatComponent = ({ userId }) => {\n+  const [chats, setChats] = useState([]);\n+  const [messages, setMessages] = useState([]);\n+  const [newMessage, setNewMessage] = useState('');\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [socket, setSocket] = useState(null);\n+\n+  // Conectar al socket y limpiar al desmontar\n+  useEffect(() => {\n+    const newSocket = io('http://localhost:3001');\n+    setSocket(newSocket);\n+\n+    return () => {\n+      newSocket.disconnect();\n+    };\n+  }, []);\n+\n+  // Obtener chats desde la API y configurar escucha de mensajes\n+  useEffect(() => {\n+    const fetchChats = async () => {\n+      try {\n+        const response = await fetch(`http://localhost:3001/chats?userId=${userId}`);\n+        const data = await response.json();\n+        setChats(data);\n+      } catch (error) {\n+        console.error('Error fetching chats:', error);\n+      }\n+    };\n+\n+    fetchChats();\n+\n+    if (socket) {\n+      socket.on('receiveMessage', (message) => {\n+        setMessages((prevMessages) => [...prevMessages, message]);\n+      });\n+\n+      return () => {\n+        socket.off('receiveMessage');\n+      };\n+    }\n+  }, [socket, userId]);\n+\n+  // Manejar selección de chat\n+  const handleChatSelect = async (chatId) => {\n+    try {\n+      const response = await fetch(`http://localhost:3001/messages?chatId=${chatId}`);\n+      const data = await response.json();\n+      setMessages(data);\n+      setActiveChat(chatId);\n+    } catch (error) {\n+      console.error('Error fetching messages:', error);\n+    }\n+  };\n+\n+  // Enviar mensaje al chat activo\n+  const handleSendMessage = async () => {\n+    if (newMessage && activeChat && socket) {\n+      const messageData = {\n+        content: newMessage, // Cambiado de 'text' a 'content'\n+        senderId: userId,\n+        receiverId: activeChat,\n+      };\n+\n+      try {\n+        const response = await fetch('http://localhost:3001/messages', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify(messageData)\n+        });\n+\n+        if (!response.ok) {\n+          throw new Error('Error sending message');\n+        }\n+\n+        const message = await response.json();\n+        socket.emit('sendMessage', message);\n+        setMessages([...messages, message]);\n+        setNewMessage('');\n+      } catch (error) {\n+        console.error('Error sending message:', error);\n+      }\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <div>\n+        <h1>Chats</h1>\n+        <div>\n+          {chats.map((chat) => (\n+            <ChatItem key={chat.id} chat={chat} onSelect={() => handleChatSelect(chat.id)} />\n+          ))}\n+        </div>\n+      </div>\n+\n+      {activeChat && (\n+        <div>\n+          <h2>Chat with {activeChat}</h2>\n+          <div>\n+            {messages.map((msg, index) => (\n+              <MessageItem key={index} message={msg} />\n+            ))}\n+          </div>\n+          <input\n+            type=\"text\"\n+            value={newMessage}\n+            onChange={(e) => setNewMessage(e.target.value)}\n+            placeholder=\"Escribe un mensaje\"\n+          />\n+          <button onClick={handleSendMessage}>Enviar</button>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+const ChatItem = ({ chat, onSelect }) => (\n+  <div onClick={onSelect}>\n+    <p>{chat.participants.find(participant => participant.id !== userId).name}</p>\n+    <p>{chat.lastMessage}</p>\n+  </div>\n+);\n+\n+const MessageItem = ({ message }) => (\n+  <div>{message.content}</div>\n+);\n+\n+export default ChatComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731399941354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,546 +129,5 @@\n const MessageItem = ({ message }) => (\n   <div>{message.content}</div>\n );\n \n-export default ChatComponent;\n-import { useEffect, useState } from 'react';\n-import { io } from 'socket.io-client';\n-\n-const ChatComponent = ({ userId }) => {\n-  const [chats, setChats] = useState([]);\n-  const [messages, setMessages] = useState([]);\n-  const [newMessage, setNewMessage] = useState('');\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [socket, setSocket] = useState(null);\n-\n-  // Conectar al socket y limpiar al desmontar\n-  useEffect(() => {\n-    const newSocket = io('http://localhost:3001');\n-    setSocket(newSocket);\n-\n-    return () => {\n-      newSocket.disconnect();\n-    };\n-  }, []);\n-\n-  // Obtener chats desde la API y configurar escucha de mensajes\n-  useEffect(() => {\n-    const fetchChats = async () => {\n-      try {\n-        const response = await fetch(`http://localhost:3001/chats?userId=${userId}`);\n-        const data = await response.json();\n-        setChats(data);\n-      } catch (error) {\n-        console.error('Error fetching chats:', error);\n-      }\n-    };\n-\n-    fetchChats();\n-\n-    if (socket) {\n-      socket.on('receiveMessage', (message) => {\n-        setMessages((prevMessages) => [...prevMessages, message]);\n-      });\n-\n-      return () => {\n-        socket.off('receiveMessage');\n-      };\n-    }\n-  }, [socket, userId]);\n-\n-  // Manejar selección de chat\n-  const handleChatSelect = async (chatId) => {\n-    try {\n-      const response = await fetch(`http://localhost:3001/messages?chatId=${chatId}`);\n-      const data = await response.json();\n-      setMessages(data);\n-      setActiveChat(chatId);\n-    } catch (error) {\n-      console.error('Error fetching messages:', error);\n-    }\n-  };\n-\n-  // Enviar mensaje al chat activo\n-  const handleSendMessage = async () => {\n-    if (newMessage && activeChat && socket) {\n-      const messageData = {\n-        content: newMessage, // Cambiado de 'text' a 'content'\n-        senderId: userId,\n-        receiverId: activeChat,\n-      };\n-\n-      try {\n-        const response = await fetch('http://localhost:3001/messages', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify(messageData)\n-        });\n-\n-        if (!response.ok) {\n-          throw new Error('Error sending message');\n-        }\n-\n-        const message = await response.json();\n-        socket.emit('sendMessage', message);\n-        setMessages([...messages, message]);\n-        setNewMessage('');\n-      } catch (error) {\n-        console.error('Error sending message:', error);\n-      }\n-    }\n-  };\n-\n-  return (\n-    <div>\n-      <div>\n-        <h1>Chats</h1>\n-        <div>\n-          {chats.map((chat) => (\n-            <ChatItem key={chat.id} chat={chat} onSelect={() => handleChatSelect(chat.id)} />\n-          ))}\n-        </div>\n-      </div>\n-\n-      {activeChat && (\n-        <div>\n-          <h2>Chat with {activeChat}</h2>\n-          <div>\n-            {messages.map((msg, index) => (\n-              <MessageItem key={index} message={msg} />\n-            ))}\n-          </div>\n-          <input\n-            type=\"text\"\n-            value={newMessage}\n-            onChange={(e) => setNewMessage(e.target.value)}\n-            placeholder=\"Escribe un mensaje\"\n-          />\n-          <button onClick={handleSendMessage}>Enviar</button>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-const ChatItem = ({ chat, onSelect }) => (\n-  <div onClick={onSelect}>\n-    <p>{chat.participants.find(participant => participant.id !== userId).name}</p>\n-    <p>{chat.lastMessage}</p>\n-  </div>\n-);\n-\n-const MessageItem = ({ message }) => (\n-  <div>{message.content}</div>\n-);\n-\n-export default ChatComponent;\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null)\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [recipientName, setRecipientName] = useState('')\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId)\n-\n-  const token = localStorage.getItem('authToken')\n-\n-  useEffect(() => {\n-    const fetchUserId = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setUser(data.user)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchUserId()\n-  }, [token])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    console.log('Usuario logueado:', user)\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user, token])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user, token])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        text: message,\n-      }\n-      console.log('Mensaje enviado:', {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        text: message,\n-      })\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat)\n-    const recipient = chat.participants.find(participant => participant.id !== user.id)\n-    setRecipientName(recipient.name)\n-    setCurrentReceiverId(recipient.id)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null)\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [recipientName, setRecipientName] = useState('')\n-\n-  const token = localStorage.getItem('authToken')\n-\n-  useEffect(() => {\n-    const fetchUserId = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setUser(data.user)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchUserId()\n-  }, [token])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    console.log('Usuario logueado:', user)\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user, token])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user, token])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: receiverId,\n-        text: message,\n-      }\n-      console.log('Mensaje enviado:', {\n-        senderId: user.id,\n-        receiverId: receiverId,\n-        text: message,\n-      })\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat)\n-    const recipient = chat.participants.find(participant => participant.id !== user.id)\n-    setRecipientName(recipient.name)\n-    receiverId = recipient.id\n-    \n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.text}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n+export default ChatComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731400038912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import { useEffect, useState } from 'react';\n+import { io } from 'socket.io-client';\n+\n+const ChatComponent = ({ userId }) => {\n+  const [chats, setChats] = useState([]);\n+  const [messages, setMessages] = useState([]);\n+  const [newMessage, setNewMessage] = useState('');\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [socket, setSocket] = useState(null);\n+\n+  // Conectar al socket y limpiar al desmontar\n+  useEffect(() => {\n+    const newSocket = io('http://localhost:3001');\n+    setSocket(newSocket);\n+\n+    return () => {\n+      newSocket.disconnect();\n+    };\n+  }, []);\n+\n+  // Obtener chats desde la API y configurar escucha de mensajes\n+  useEffect(() => {\n+    const fetchChats = async () => {\n+      try {\n+        const response = await fetch(`http://localhost:3001/chats?userId=${userId}`);\n+        const data = await response.json();\n+        setChats(data);\n+      } catch (error) {\n+        console.error('Error fetching chats:', error);\n+      }\n+    };\n+\n+    fetchChats();\n+\n+    if (socket) {\n+      socket.on('receiveMessage', (message) => {\n+        setMessages((prevMessages) => [...prevMessages, message]);\n+      });\n+\n+      return () => {\n+        socket.off('receiveMessage');\n+      };\n+    }\n+  }, [socket, userId]);\n+\n+  // Manejar selección de chat\n+  const handleChatSelect = async (chatId) => {\n+    try {\n+      const response = await fetch(`http://localhost:3001/messages?chatId=${chatId}`);\n+      const data = await response.json();\n+      setMessages(data);\n+      setActiveChat(chatId);\n+    } catch (error) {\n+      console.error('Error fetching messages:', error);\n+    }\n+  };\n+\n+  // Enviar mensaje al chat activo\n+  const handleSendMessage = async () => {\n+    if (newMessage && activeChat && socket) {\n+      const messageData = {\n+        content: newMessage, // Cambiado de 'text' a 'content'\n+        senderId: userId,\n+        receiverId: activeChat,\n+      };\n+\n+      try {\n+        const response = await fetch('http://localhost:3001/messages', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify(messageData)\n+        });\n+\n+        if (!response.ok) {\n+          throw new Error('Error sending message');\n+        }\n+\n+        const message = await response.json();\n+        socket.emit('sendMessage', message);\n+        setMessages([...messages, message]);\n+        setNewMessage('');\n+      } catch (error) {\n+        console.error('Error sending message:', error);\n+      }\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <div>\n+        <h1>Chats</h1>\n+        <div>\n+          {chats.map((chat) => (\n+            <ChatItem key={chat.id} chat={chat} onSelect={() => handleChatSelect(chat.id)} />\n+          ))}\n+        </div>\n+      </div>\n+\n+      {activeChat && (\n+        <div>\n+          <h2>Chat with {activeChat}</h2>\n+          <div>\n+            {messages.map((msg, index) => (\n+              <MessageItem key={index} message={msg} />\n+            ))}\n+          </div>\n+          <input\n+            type=\"text\"\n+            value={newMessage}\n+            onChange={(e) => setNewMessage(e.target.value)}\n+            placeholder=\"Escribe un mensaje\"\n+          />\n+          <button onClick={handleSendMessage}>Enviar</button>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+const ChatItem = ({ chat, onSelect }) => (\n+  <div onClick={onSelect}>\n+    <p>{chat.participants.find(participant => participant.id !== userId).name}</p>\n+    <p>{chat.lastMessage}</p>\n+  </div>\n+);\n+\n+const MessageItem = ({ message }) => (\n+  <div>{message.content}</div>\n+);\n+\n+export default ChatComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731400045937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import { useEffect, useState } from 'react';\n+import { io } from 'socket.io-client';\n+\n+const ChatComponent = ({ userId }) => {\n+  const [chats, setChats] = useState([]);\n+  const [messages, setMessages] = useState([]);\n+  const [newMessage, setNewMessage] = useState('');\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [socket, setSocket] = useState(null);\n+\n+  // Conectar al socket y limpiar al desmontar\n+  useEffect(() => {\n+    const newSocket = io('http://localhost:3001');\n+    setSocket(newSocket);\n+\n+    return () => {\n+      newSocket.disconnect();\n+    };\n+  }, []);\n+\n+  // Obtener chats desde la API y configurar escucha de mensajes\n+  useEffect(() => {\n+    const fetchChats = async () => {\n+      try {\n+        const response = await fetch(`http://localhost:3001/chats?userId=${userId}`);\n+        const data = await response.json();\n+        setChats(data);\n+      } catch (error) {\n+        console.error('Error fetching chats:', error);\n+      }\n+    };\n+\n+    fetchChats();\n+\n+    if (socket) {\n+      socket.on('receiveMessage', (message) => {\n+        setMessages((prevMessages) => [...prevMessages, message]);\n+      });\n+\n+      return () => {\n+        socket.off('receiveMessage');\n+      };\n+    }\n+  }, [socket, userId]);\n+\n+  // Manejar selección de chat\n+  const handleChatSelect = async (chatId) => {\n+    try {\n+      const response = await fetch(`http://localhost:3001/messages?chatId=${chatId}`);\n+      const data = await response.json();\n+      setMessages(data);\n+      setActiveChat(chatId);\n+    } catch (error) {\n+      console.error('Error fetching messages:', error);\n+    }\n+  };\n+\n+  // Enviar mensaje al chat activo\n+  const handleSendMessage = async () => {\n+    if (newMessage && activeChat && socket) {\n+      const messageData = {\n+        content: newMessage, // Cambiado de 'text' a 'content'\n+        senderId: userId,\n+        receiverId: activeChat,\n+      };\n+\n+      try {\n+        const response = await fetch('http://localhost:3001/messages', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify(messageData)\n+        });\n+\n+        if (!response.ok) {\n+          throw new Error('Error sending message');\n+        }\n+\n+        const message = await response.json();\n+        socket.emit('sendMessage', message);\n+        setMessages([...messages, message]);\n+        setNewMessage('');\n+      } catch (error) {\n+        console.error('Error sending message:', error);\n+      }\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <div>\n+        <h1>Chats</h1>\n+        <div>\n+          {chats.map((chat) => (\n+            <ChatItem key={chat.id} chat={chat} onSelect={() => handleChatSelect(chat.id)} />\n+          ))}\n+        </div>\n+      </div>\n+\n+      {activeChat && (\n+        <div>\n+          <h2>Chat with {activeChat}</h2>\n+          <div>\n+            {messages.map((msg, index) => (\n+              <MessageItem key={index} message={msg} />\n+            ))}\n+          </div>\n+          <input\n+            type=\"text\"\n+            value={newMessage}\n+            onChange={(e) => setNewMessage(e.target.value)}\n+            placeholder=\"Escribe un mensaje\"\n+          />\n+          <button onClick={handleSendMessage}>Enviar</button>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+const ChatItem = ({ chat, onSelect }) => (\n+  <div onClick={onSelect}>\n+    <p>{chat.participants.find(participant => participant.id !== userId).name}</p>\n+    <p>{chat.lastMessage}</p>\n+  </div>\n+);\n+\n+const MessageItem = ({ message }) => (\n+  <div>{message.content}</div>\n+);\n+\n+export default ChatComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731400078406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,399 +1,204 @@\n-import { useEffect, useState } from 'react';\n-import { io } from 'socket.io-client';\n+'use client'\n \n-const ChatComponent = ({ userId }) => {\n-  const [chats, setChats] = useState([]);\n-  const [messages, setMessages] = useState([]);\n-  const [newMessage, setNewMessage] = useState('');\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [socket, setSocket] = useState(null);\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n \n-  // Conectar al socket y limpiar al desmontar\n-  useEffect(() => {\n-    const newSocket = io('http://localhost:3001');\n-    setSocket(newSocket);\n+const socket = io('http://localhost:3001')\n \n-    return () => {\n-      newSocket.disconnect();\n-    };\n-  }, []);\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null)\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [recipientName, setRecipientName] = useState('')\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId)\n \n-  // Obtener chats desde la API y configurar escucha de mensajes\n+  const token = localStorage.getItem('authToken')\n+\n   useEffect(() => {\n-    const fetchChats = async () => {\n+    const fetchUserId = async () => {\n       try {\n-        const response = await fetch(`http://localhost:3001/chats?userId=${userId}`);\n-        const data = await response.json();\n-        setChats(data);\n-      } catch (error) {\n-        console.error('Error fetching chats:', error);\n-      }\n-    };\n-\n-    fetchChats();\n-\n-    if (socket) {\n-      socket.on('receiveMessage', (message) => {\n-        setMessages((prevMessages) => [...prevMessages, message]);\n-      });\n-\n-      return () => {\n-        socket.off('receiveMessage');\n-      };\n-    }\n-  }, [socket, userId]);\n-\n-  // Manejar selección de chat\n-  const handleChatSelect = async (chatId) => {\n-    try {\n-      const response = await fetch(`http://localhost:3001/messages?chatId=${chatId}`);\n-      const data = await response.json();\n-      setMessages(data);\n-      setActiveChat(chatId);\n-    } catch (error) {\n-      console.error('Error fetching messages:', error);\n-    }\n-  };\n-\n-  // Enviar mensaje al chat activo\n-  const handleSendMessage = async () => {\n-    if (newMessage && activeChat && socket) {\n-      const messageData = {\n-        content: newMessage, // Cambiado de 'text' a 'content'\n-        senderId: userId,\n-        receiverId: activeChat,\n-      };\n-\n-      try {\n-        const response = await fetch('http://localhost:3001/messages', {\n-          method: 'POST',\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n           headers: {\n-            'Content-Type': 'application/json'\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n           },\n-          body: JSON.stringify(messageData)\n-        });\n-\n-        if (!response.ok) {\n-          throw new Error('Error sending message');\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n         }\n-\n-        const message = await response.json();\n-        socket.emit('sendMessage', message);\n-        setMessages([...messages, message]);\n-        setNewMessage('');\n+        const data = await res.json()\n+        setUser(data.user)\n       } catch (error) {\n-        console.error('Error sending message:', error);\n+        console.error('Error:', error)\n       }\n     }\n-  };\n \n-  return (\n-    <div>\n-      <div>\n-        <h1>Chats</h1>\n-        <div>\n-          {chats.map((chat) => (\n-            <ChatItem key={chat.id} chat={chat} onSelect={() => handleChatSelect(chat.id)} />\n-          ))}\n-        </div>\n-      </div>\n+    fetchUserId()\n+  }, [token])\n \n-      {activeChat && (\n-        <div>\n-          <h2>Chat with {activeChat}</h2>\n-          <div>\n-            {messages.map((msg, index) => (\n-              <MessageItem key={index} message={msg} />\n-            ))}\n-          </div>\n-          <input\n-            type=\"text\"\n-            value={newMessage}\n-            onChange={(e) => setNewMessage(e.target.value)}\n-            placeholder=\"Escribe un mensaje\"\n-          />\n-          <button onClick={handleSendMessage}>Enviar</button>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-const ChatItem = ({ chat, onSelect }) => (\n-  <div onClick={onSelect}>\n-    <p>{chat.participants.find(participant => participant.id !== userId).name}</p>\n-    <p>{chat.lastMessage}</p>\n-  </div>\n-);\n-\n-const MessageItem = ({ message }) => (\n-  <div>{message.content}</div>\n-);\n-\n-export default ChatComponent;\n-import { useEffect, useState } from 'react';\n-import { io } from 'socket.io-client';\n-\n-const ChatComponent = ({ userId }) => {\n-  const [chats, setChats] = useState([]);\n-  const [messages, setMessages] = useState([]);\n-  const [newMessage, setNewMessage] = useState('');\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [socket, setSocket] = useState(null);\n-\n-  // Conectar al socket y limpiar al desmontar\n   useEffect(() => {\n-    const newSocket = io('http://localhost:3001');\n-    setSocket(newSocket);\n+    if (!user) return\n \n-    return () => {\n-      newSocket.disconnect();\n-    };\n-  }, []);\n+    console.log('Usuario logueado:', user)\n \n-  // Obtener chats desde la API y configurar escucha de mensajes\n-  useEffect(() => {\n-    const fetchChats = async () => {\n+    const fetchChatPreviews = async () => {\n       try {\n-        const response = await fetch(`http://localhost:3001/chats?userId=${userId}`);\n-        const data = await response.json();\n-        setChats(data);\n-      } catch (error) {\n-        console.error('Error fetching chats:', error);\n-      }\n-    };\n-\n-    fetchChats();\n-\n-    if (socket) {\n-      socket.on('receiveMessage', (message) => {\n-        setMessages((prevMessages) => [...prevMessages, message]);\n-      });\n-\n-      return () => {\n-        socket.off('receiveMessage');\n-      };\n-    }\n-  }, [socket, userId]);\n-\n-  // Manejar selección de chat\n-  const handleChatSelect = async (chatId) => {\n-    try {\n-      const response = await fetch(`http://localhost:3001/messages?chatId=${chatId}`);\n-      const data = await response.json();\n-      setMessages(data);\n-      setActiveChat(chatId);\n-    } catch (error) {\n-      console.error('Error fetching messages:', error);\n-    }\n-  };\n-\n-  // Enviar mensaje al chat activo\n-  const handleSendMessage = async () => {\n-    if (newMessage && activeChat && socket) {\n-      const messageData = {\n-        content: newMessage, // Cambiado de 'text' a 'content'\n-        senderId: userId,\n-        receiverId: activeChat,\n-      };\n-\n-      try {\n-        const response = await fetch('http://localhost:3001/messages', {\n-          method: 'POST',\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n           headers: {\n-            'Content-Type': 'application/json'\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n           },\n-          body: JSON.stringify(messageData)\n-        });\n-\n-        if (!response.ok) {\n-          throw new Error('Error sending message');\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n         }\n-\n-        const message = await response.json();\n-        socket.emit('sendMessage', message);\n-        setMessages([...messages, message]);\n-        setNewMessage('');\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n       } catch (error) {\n-        console.error('Error sending message:', error);\n+        console.error('Error:', error)\n       }\n     }\n-  };\n \n-  return (\n-    <div>\n-      <div>\n-        <h1>Chats</h1>\n-        <div>\n-          {chats.map((chat) => (\n-            <ChatItem key={chat.id} chat={chat} onSelect={() => handleChatSelect(chat.id)} />\n-          ))}\n-        </div>\n-      </div>\n+    fetchChatPreviews()\n+  }, [user, token])\n \n-      {activeChat && (\n-        <div>\n-          <h2>Chat with {activeChat}</h2>\n-          <div>\n-            {messages.map((msg, index) => (\n-              <MessageItem key={index} message={msg} />\n-            ))}\n-          </div>\n-          <input\n-            type=\"text\"\n-            value={newMessage}\n-            onChange={(e) => setNewMessage(e.target.value)}\n-            placeholder=\"Escribe un mensaje\"\n-          />\n-          <button onClick={handleSendMessage}>Enviar</button>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-const ChatItem = ({ chat, onSelect }) => (\n-  <div onClick={onSelect}>\n-    <p>{chat.participants.find(participant => participant.id !== userId).name}</p>\n-    <p>{chat.lastMessage}</p>\n-  </div>\n-);\n-\n-const MessageItem = ({ message }) => (\n-  <div>{message.content}</div>\n-);\n-\n-export default ChatComponent;\n-import { useEffect, useState } from 'react';\n-import { io } from 'socket.io-client';\n-\n-const ChatComponent = ({ userId }) => {\n-  const [chats, setChats] = useState([]);\n-  const [messages, setMessages] = useState([]);\n-  const [newMessage, setNewMessage] = useState('');\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [socket, setSocket] = useState(null);\n-\n-  // Conectar al socket y limpiar al desmontar\n   useEffect(() => {\n-    const newSocket = io('http://localhost:3001');\n-    setSocket(newSocket);\n+    if (!user || !activeChat) return\n \n-    return () => {\n-      newSocket.disconnect();\n-    };\n-  }, []);\n+    socket.emit('joinRoom', activeChat._id)\n \n-  // Obtener chats desde la API y configurar escucha de mensajes\n-  useEffect(() => {\n-    const fetchChats = async () => {\n+    const fetchMessages = async () => {\n       try {\n-        const response = await fetch(`http://localhost:3001/chats?userId=${userId}`);\n-        const data = await response.json();\n-        setChats(data);\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n       } catch (error) {\n-        console.error('Error fetching chats:', error);\n+        console.error('Error:', error)\n       }\n-    };\n+    }\n \n-    fetchChats();\n+    fetchMessages()\n \n-    if (socket) {\n-      socket.on('receiveMessage', (message) => {\n-        setMessages((prevMessages) => [...prevMessages, message]);\n-      });\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n \n-      return () => {\n-        socket.off('receiveMessage');\n-      };\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n     }\n-  }, [socket, userId]);\n+  }, [activeChat, user, token])\n \n-  // Manejar selección de chat\n-  const handleChatSelect = async (chatId) => {\n-    try {\n-      const response = await fetch(`http://localhost:3001/messages?chatId=${chatId}`);\n-      const data = await response.json();\n-      setMessages(data);\n-      setActiveChat(chatId);\n-    } catch (error) {\n-      console.error('Error fetching messages:', error);\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n     }\n-  };\n \n-  // Enviar mensaje al chat activo\n-  const handleSendMessage = async () => {\n-    if (newMessage && activeChat && socket) {\n-      const messageData = {\n\\ No newline at end of file\n-        content: newMessage, // Cambiado de 'text' a 'content'\n-        senderId: userId,\n-        receiverId: activeChat,\n-      };\n-\n-      try {\n-        const response = await fetch('http://localhost:3001/messages', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify(messageData)\n-        });\n-\n-        if (!response.ok) {\n-          throw new Error('Error sending message');\n-        }\n-\n-        const message = await response.json();\n-        socket.emit('sendMessage', message);\n-        setMessages([...messages, message]);\n-        setNewMessage('');\n-      } catch (error) {\n-        console.error('Error sending message:', error);\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message, // Cambiado de 'text' a 'content'\n       }\n+      console.log('Mensaje enviado:', {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+      })\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n     }\n-  };\n+  }\n \n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat)\n+    const recipient = chat.participants.find(participant => participant.id !== user.id)\n+    setRecipientName(recipient.name)\n+    setCurrentReceiverId(recipient.id)\n+  }\n+\n   return (\n-    <div>\n-      <div>\n-        <h1>Chats</h1>\n-        <div>\n-          {chats.map((chat) => (\n-            <ChatItem key={chat.id} chat={chat} onSelect={() => handleChatSelect(chat.id)} />\n-          ))}\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n         </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n       </div>\n \n-      {activeChat && (\n-        <div>\n-          <h2>Chat with {activeChat}</h2>\n-          <div>\n-            {messages.map((msg, index) => (\n-              <MessageItem key={index} message={msg} />\n-            ))}\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.content}</p> {/* Cambiado de 'text' a 'content' */}\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n           </div>\n-          <input\n-            type=\"text\"\n-            value={newMessage}\n-            onChange={(e) => setNewMessage(e.target.value)}\n-            placeholder=\"Escribe un mensaje\"\n-          />\n-          <button onClick={handleSendMessage}>Enviar</button>\n         </div>\n-      )}\n+      </div>\n     </div>\n-  );\n-};\n+  )\n+}\n \n-const ChatItem = ({ chat, onSelect }) => (\n-  <div onClick={onSelect}>\n-    <p>{chat.participants.find(participant => participant.id !== userId).name}</p>\n-    <p>{chat.lastMessage}</p>\n-  </div>\n-);\n-\n-const MessageItem = ({ message }) => (\n-  <div>{message.content}</div>\n-);\n-\n-export default ChatComponent;\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731400464328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \n   const token = localStorage.getItem('authToken')\n \n   useEffect(() => {\n-    const fetchUserId = async () => {\n+    const fetchProfile = async () => {\n       try {\n         const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n           method: 'GET',\n           headers: {\n@@ -27,18 +27,24 @@\n             'Authorization': `Bearer ${token}`\n           },\n         })\n         if (!res.ok) {\n-          throw new Error(`Error fetching user: ${res.status} ${res.statusText}`)\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n         }\n         const data = await res.json()\n-        setUser(data.user)\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' })\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' })\n+        } else {\n+          throw new Error('Profile not found')\n+        }\n       } catch (error) {\n         console.error('Error:', error)\n       }\n     }\n \n-    fetchUserId()\n+    fetchProfile()\n   }, [token])\n \n   useEffect(() => {\n     if (!user) return\n@@ -112,9 +118,9 @@\n     if (message.trim()) {\n       const newMessage = {\n         senderId: user.id,\n         receiverId: currentReceiverId,\n-        content: message, // Cambiado de 'text' a 'content'\n+        content: message,\n       }\n       console.log('Mensaje enviado:', {\n         senderId: user.id,\n         receiverId: currentReceiverId,\n@@ -172,9 +178,9 @@\n               key={idx}\n               className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n             >\n               <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.content}</p> {/* Cambiado de 'text' a 'content' */}\n+                <p className=\"text-sm\">{msg.content}</p>\n               </div>\n             </div>\n           ))}\n         </div>\n"
                },
                {
                    "date": 1731400827964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,212 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null)\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [recipientName, setRecipientName] = useState('')\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId)\n+\n+  const token = localStorage.getItem('authToken')\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' })\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' })\n+        } else {\n+          throw new Error('Profile not found')\n+        }\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchProfile()\n+  }, [token])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    console.log('Usuario logueado:', user)\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user, token])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user, token])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat._id, // Añadir chatId al mensaje\n+      }\n+      console.log('Mensaje enviado:', {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat._id,\n+      })\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat)\n+    const recipient = chat.participants.find(participant => participant.id !== user.id)\n+    setRecipientName(recipient.name)\n+    setCurrentReceiverId(recipient.id)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.content}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731400922792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null)\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [recipientName, setRecipientName] = useState('')\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId)\n+\n+  const token = localStorage.getItem('authToken')\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' })\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' })\n+        } else {\n+          throw new Error('Profile not found')\n+        }\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchProfile()\n+  }, [token])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    console.log('Usuario logueado:', user)\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user, token])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    console.log(`User ${user.id} joined room ${activeChat._id}`)\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    return () => {\n+      console.log(`User ${user.id} left room ${activeChat._id}`)\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user, token])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat._id, // Añadir chatId al mensaje\n+      }\n+      console.log('Mensaje enviado:', {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat._id,\n+      })\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat)\n+    const recipient = chat.participants.find(participant => participant.id !== user.id)\n+    setRecipientName(recipient.name)\n+    setCurrentReceiverId(recipient.id)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.content}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731401074737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null)\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [recipientName, setRecipientName] = useState('')\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId)\n+\n+  const token = localStorage.getItem('authToken')\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' })\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' })\n+        } else {\n+          throw new Error('Profile not found')\n+        }\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchProfile()\n+  }, [token])\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    console.log('Usuario logueado:', user)\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        console.log('Resultados de los chats:', data)\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user, token])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    console.log(`User ${user.id} joined room ${activeChat.id}`)\n+    socket.emit('joinRoom', activeChat.id)\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    return () => {\n+      console.log(`User ${user.id} left room ${activeChat.id}`)\n+      socket.emit('leaveRoom', activeChat.id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user, token])\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected')\n+      return\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id, // Usar 'id' en lugar de '_id'\n+      }\n+      console.log('Mensaje enviado:', {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+      })\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat)\n+    const recipient = chat.participants.find(participant => participant.id !== user.id)\n+    setRecipientName(recipient.name)\n+    setCurrentReceiverId(recipient.id)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+                <p className=\"text-sm\">{msg.content}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731402206414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,22 @@\n-'use client'\n+'use client';\n \n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n+import React, { useState, useEffect } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n \n-const socket = io('http://localhost:3001')\n+const socket = io('http://localhost:3001');\n \n const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null)\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [recipientName, setRecipientName] = useState('')\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId)\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n \n-  const token = localStorage.getItem('authToken')\n+  const token = localStorage.getItem('authToken');\n \n   useEffect(() => {\n     const fetchProfile = async () => {\n       try {\n@@ -25,32 +25,32 @@\n           headers: {\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${token}`\n           },\n-        })\n+        });\n         if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n         }\n-        const data = await res.json()\n+        const data = await res.json();\n         if (data.user) {\n-          setUser({ ...data.user, type: 'user' })\n+          setUser({ ...data.user, type: 'user' });\n         } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' })\n+          setUser({ ...data.charity, type: 'charity' });\n         } else {\n-          throw new Error('Profile not found')\n+          throw new Error('Profile not found');\n         }\n       } catch (error) {\n-        console.error('Error:', error)\n+        console.error('Error:', error);\n       }\n-    }\n+    };\n \n-    fetchProfile()\n-  }, [token])\n+    fetchProfile();\n+  }, [token]);\n \n   useEffect(() => {\n-    if (!user) return\n+    if (!user) return;\n \n-    console.log('Usuario logueado:', user)\n+    console.log('Usuario logueado:', user);\n \n     const fetchChatPreviews = async () => {\n       try {\n         const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n@@ -58,91 +58,86 @@\n           headers: {\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${token}`\n           },\n-        })\n+        });\n         if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n         }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n+        const data = await res.json();\n+        console.log('Resultados de los chats:', data);\n+        setChatPreviews(data);\n       } catch (error) {\n-        console.error('Error:', error)\n+        console.error('Error:', error);\n       }\n-    }\n+    };\n \n-    fetchChatPreviews()\n-  }, [user, token])\n+    fetchChatPreviews();\n+  }, [user, token]);\n \n   useEffect(() => {\n-    if (!user || !activeChat) return\n+    if (!user || !activeChat) return;\n \n-    console.log(`User ${user.id} joined room ${activeChat.id}`)\n-    socket.emit('joinRoom', activeChat.id)\n+    console.log(`User ${user.id} joined room ${activeChat.id}`);\n+    socket.emit('joinRoom', activeChat.id);\n \n     const fetchMessages = async () => {\n       try {\n         const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n           headers: {\n             'Authorization': `Bearer ${token}`\n           }\n-        })\n+        });\n         if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n         }\n-        const data = await res.json()\n-        setMessages(data)\n+        const data = await res.json();\n+        setMessages(data);\n       } catch (error) {\n-        console.error('Error:', error)\n+        console.error('Error:', error);\n       }\n-    }\n+    };\n \n-    fetchMessages()\n+    fetchMessages();\n \n     const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.on('receiveMessage', handleReceiveMessage);\n \n     return () => {\n-      console.log(`User ${user.id} left room ${activeChat.id}`)\n-      socket.emit('leaveRoom', activeChat.id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user, token])\n+      console.log(`User ${user.id} left room ${activeChat.id}`);\n+      socket.emit('leaveRoom', activeChat.id);\n+      socket.off('receiveMessage', handleReceiveMessage);\n+    };\n+  }, [activeChat, user, token]);\n \n   const handleSend = () => {\n     if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n+      console.error('No active chat selected');\n+      return;\n     }\n \n     if (message.trim()) {\n       const newMessage = {\n         senderId: user.id,\n         receiverId: currentReceiverId,\n         content: message,\n-        chatId: activeChat.id, // Usar 'id' en lugar de '_id'\n-      }\n-      console.log('Mensaje enviado:', {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n         chatId: activeChat.id,\n-      })\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n+      };\n+      console.log('Mensaje enviado:', newMessage);\n+      socket.emit('sendMessage', newMessage);\n+      setMessages([...messages, newMessage]);\n+      setMessage('');\n     }\n-  }\n+  };\n \n   const handleChatClick = (chat) => {\n-    setActiveChat(chat)\n-    const recipient = chat.participants.find(participant => participant.id !== user.id)\n-    setRecipientName(recipient.name)\n-    setCurrentReceiverId(recipient.id)\n-  }\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+  };\n \n   return (\n     <div className=\"flex h-screen bg-[#ECE3D4]\">\n       <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n@@ -207,644 +202,8 @@\n           </div>\n         </div>\n       </div>\n     </div>\n-  )\n-}\n+  );\n+};\n \n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null)\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [recipientName, setRecipientName] = useState('')\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId)\n-\n-  const token = localStorage.getItem('authToken')\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' })\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' })\n-        } else {\n-          throw new Error('Profile not found')\n-        }\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchProfile()\n-  }, [token])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    console.log('Usuario logueado:', user)\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user, token])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    console.log(`User ${user.id} joined room ${activeChat._id}`)\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      console.log(`User ${user.id} left room ${activeChat._id}`)\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user, token])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat._id, // Añadir chatId al mensaje\n-      }\n-      console.log('Mensaje enviado:', {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat._id,\n-      })\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat)\n-    const recipient = chat.participants.find(participant => participant.id !== user.id)\n-    setRecipientName(recipient.name)\n-    setCurrentReceiverId(recipient.id)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.content}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null)\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [recipientName, setRecipientName] = useState('')\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId)\n-\n-  const token = localStorage.getItem('authToken')\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' })\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' })\n-        } else {\n-          throw new Error('Profile not found')\n-        }\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchProfile()\n-  }, [token])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    console.log('Usuario logueado:', user)\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user, token])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user, token])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat._id, // Añadir chatId al mensaje\n-      }\n-      console.log('Mensaje enviado:', {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat._id,\n-      })\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat)\n-    const recipient = chat.participants.find(participant => participant.id !== user.id)\n-    setRecipientName(recipient.name)\n-    setCurrentReceiverId(recipient.id)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.content}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null)\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [recipientName, setRecipientName] = useState('')\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId)\n-\n-  const token = localStorage.getItem('authToken')\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' })\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' })\n-        } else {\n-          throw new Error('Profile not found')\n-        }\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchProfile()\n-  }, [token])\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    console.log('Usuario logueado:', user)\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        console.log('Resultados de los chats:', data)\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user, token])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    socket.emit('joinRoom', activeChat._id)\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat._id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat._id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user, token])\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected')\n-      return\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-      }\n-      console.log('Mensaje enviado:', {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-      })\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat)\n-    const recipient = chat.participants.find(participant => participant.id !== user.id)\n-    setRecipientName(recipient.name)\n-    setCurrentReceiverId(recipient.id)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n-                <p className=\"text-sm\">{msg.content}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731402570583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,8 @@\n \n   useEffect(() => {\n     if (!user) return;\n \n-    console.log('Usuario logueado:', user);\n-\n     const fetchChatPreviews = async () => {\n       try {\n         const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n           method: 'GET',\n@@ -63,9 +61,8 @@\n         if (!res.ok) {\n           throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n         }\n         const data = await res.json();\n-        console.log('Resultados de los chats:', data);\n         setChatPreviews(data);\n       } catch (error) {\n         console.error('Error:', error);\n       }\n@@ -76,9 +73,8 @@\n \n   useEffect(() => {\n     if (!user || !activeChat) return;\n \n-    console.log(`User ${user.id} joined room ${activeChat.id}`);\n     socket.emit('joinRoom', activeChat.id);\n \n     const fetchMessages = async () => {\n       try {\n@@ -104,9 +100,8 @@\n     };\n     socket.on('receiveMessage', handleReceiveMessage);\n \n     return () => {\n-      console.log(`User ${user.id} left room ${activeChat.id}`);\n       socket.emit('leaveRoom', activeChat.id);\n       socket.off('receiveMessage', handleReceiveMessage);\n     };\n   }, [activeChat, user, token]);\n@@ -123,11 +118,9 @@\n         receiverId: currentReceiverId,\n         content: message,\n         chatId: activeChat.id,\n       };\n-      console.log('Mensaje enviado:', newMessage);\n       socket.emit('sendMessage', newMessage);\n-      setMessages([...messages, newMessage]);\n       setMessage('');\n     }\n   };\n \n"
                },
                {
                    "date": 1731402746842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n             <div\n               key={idx}\n               className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n             >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#042637]' : 'bg-[#E1DDBF]'} p-3 rounded-lg text-white`}>\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n                 <p className=\"text-sm\">{msg.content}</p>\n               </div>\n             </div>\n           ))}\n"
                },
                {
                    "date": 1731402867991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,8 @@\n import React, { useState, useEffect } from 'react';\n import dynamic from 'next/dynamic';\n import io from 'socket.io-client';\n \n-const socket = io('http://localhost:3001');\n-\n const FbMessengerSimple = ({ receiverId }) => {\n   const [user, setUser] = useState(null);\n   const [activeChat, setActiveChat] = useState(null);\n   const [message, setMessage] = useState('');\n@@ -73,8 +71,14 @@\n \n   useEffect(() => {\n     if (!user || !activeChat) return;\n \n+    const socket = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n     socket.emit('joinRoom', activeChat.id);\n \n     const fetchMessages = async () => {\n       try {\n"
                },
                {
                    "date": 1731403026936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,206 +0,0 @@\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-\n-  const token = localStorage.getItem('authToken');\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    const socket = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.on('receiveMessage', handleReceiveMessage);\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat.id);\n-      socket.off('receiveMessage', handleReceiveMessage);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-      };\n-      socket.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-  };\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                <p className=\"text-sm\">{msg.content}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731403176146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+\n+let socket;\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.on('receiveMessage', handleReceiveMessage);\n+\n+    return () => {\n+      socket.emit('leaveRoom', activeChat.id);\n+      socket.off('receiveMessage', handleReceiveMessage);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+      };\n+      socket.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                <p className=\"text-sm\">{msg.content}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731403314497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,8 @@\n import React, { useState, useEffect } from 'react';\n import dynamic from 'next/dynamic';\n import io from 'socket.io-client';\n \n-let socket;\n-\n const FbMessengerSimple = ({ receiverId }) => {\n   const [user, setUser] = useState(null);\n   const [activeChat, setActiveChat] = useState(null);\n   const [message, setMessage] = useState('');\n@@ -82,9 +80,9 @@\n \n   useEffect(() => {\n     if (!user || !activeChat) return;\n \n-    socket = io('http://localhost:3001', {\n+    const socket = io('http://localhost:3001', {\n       auth: {\n         token: localStorage.getItem('authToken')\n       }\n     });\n"
                },
                {
                    "date": 1731403351596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,202 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+\n+  const token = localStorage.getItem('authToken');\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.on('receiveMessage', handleReceiveMessage);\n+\n+    return () => {\n+      socket.emit('leaveRoom', activeChat.id);\n+      socket.off('receiveMessage', handleReceiveMessage);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+      };\n+      socket.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+  };\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                <p className=\"text-sm\">{msg.content}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731403545286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,218 +3,16 @@\n import React, { useState, useEffect } from 'react';\n import dynamic from 'next/dynamic';\n import io from 'socket.io-client';\n \n-const socket = io('http://localhost:3001');\n-\n const FbMessengerSimple = ({ receiverId }) => {\n   const [user, setUser] = useState(null);\n   const [activeChat, setActiveChat] = useState(null);\n   const [message, setMessage] = useState('');\n   const [messages, setMessages] = useState([]);\n   const [chatPreviews, setChatPreviews] = useState([]);\n   const [recipientName, setRecipientName] = useState('');\n   const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-\n-  const token = localStorage.getItem('authToken');\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.on('receiveMessage', handleReceiveMessage);\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat.id);\n-      socket.off('receiveMessage', handleReceiveMessage);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-      };\n-      socket.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-  };\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                <p className=\"text-sm\">{msg.content}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\n \n   const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n \n"
                },
                {
                    "date": 1731403737750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const socket = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                <p className=\"text-sm\">{msg.content}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731999725368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const socket = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                <p className=\"text-sm\">{msg.content}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-[#042637] p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731999759831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const socket = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                <p className=\"text-sm\">{msg.content}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731999780272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,9 +205,9 @@\n               className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n             />\n             <button\n               onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+              className=\"ml-3  text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n             >\n               Enviar\n             </button>\n           </div>\n@@ -216,664 +216,5 @@\n     </div>\n   );\n };\n \n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const socket = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                <p className=\"text-sm\">{msg.content}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-[#042637] p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const socket = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                <p className=\"text-sm\">{msg.content}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    const socket = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.on('receiveMessage', handleReceiveMessage);\n-\n-    return () => {\n-      socket.emit('leaveRoom', activeChat.id);\n-      socket.off('receiveMessage', handleReceiveMessage);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-      };\n-      socket.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                <p className=\"text-sm\">{msg.content}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732004108233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,24 @@\n 'use client';\n \n import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n \n-const FbMessengerSimple = ({ receiverId }) => {\n+const ChatPage = ({ chatId }) => {\n   const [user, setUser] = useState(null);\n   const [activeChat, setActiveChat] = useState(null);\n   const [message, setMessage] = useState('');\n   const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n   const socket = useRef(null);\n+  const router = useRouter();\n \n   const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n \n   useEffect(() => {\n     const fetchProfile = async () => {\n       if (!token) {\n-        setIsAuthenticated(false);\n+        router.push('/logind');\n         return;\n       }\n \n       try {\n@@ -37,48 +34,46 @@\n         }\n         const data = await res.json();\n         if (data.user) {\n           setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n         } else if (data.charity) {\n           setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n         } else {\n           throw new Error('Profile not found');\n         }\n       } catch (error) {\n         console.error('Error:', error);\n-        setIsAuthenticated(false);\n+        router.push('/logind');\n       }\n     };\n \n     fetchProfile();\n-  }, [token]);\n+  }, [token, router]);\n \n   useEffect(() => {\n     if (!user) return;\n \n-    const fetchChatPreviews = async () => {\n+    const fetchChat = async () => {\n       try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+        const res = await fetch(`http://localhost:3001/chats/${chatId}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${token}`\n           },\n         });\n         if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+          throw new Error(`Error fetching chat: ${res.status} ${res.statusText}`);\n         }\n         const data = await res.json();\n-        setChatPreviews(data);\n+        setActiveChat(data);\n       } catch (error) {\n         console.error('Error:', error);\n       }\n     };\n \n-    fetchChatPreviews();\n-  }, [user, token]);\n+    fetchChat();\n+  }, [user, chatId, token]);\n \n   useEffect(() => {\n     if (!user || !activeChat) return;\n \n@@ -128,59 +123,26 @@\n \n     if (message.trim()) {\n       const newMessage = {\n         senderId: user.id,\n-        receiverId: currentReceiverId,\n+        receiverId: activeChat.participants.find(participant => participant.id !== user.id).id,\n         content: message,\n         chatId: activeChat.id,\n       };\n       socket.current.emit('sendMessage', newMessage);\n       setMessage('');\n     }\n   };\n \n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-  };\n-\n-  if (!isAuthenticated) {\n+  if (!user) {\n     return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n   }\n \n   return (\n     <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n       <div className=\"flex-1 flex flex-col\">\n         <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.participants.find(participant => participant.id !== user.id).name}</h2>}\n         </div>\n \n         <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n           {messages.map((msg, idx) => (\n@@ -205,9 +167,9 @@\n               className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n             />\n             <button\n               onClick={handleSend}\n-              className=\"ml-3  text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n             >\n               Enviar\n             </button>\n           </div>\n@@ -216,5 +178,5 @@\n     </div>\n   );\n };\n \n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n+export default ChatPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732004122949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const socket = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                <p className=\"text-sm\">{msg.content}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3  text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732004439929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const socket = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {messages.map((msg, idx) => (\n+            <div\n+              key={idx}\n+              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+            >\n+              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                <p className=\"text-sm\">{msg.content}</p>\n+              </div>\n+            </div>\n+          ))}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3  text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732004450217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,24 @@\n 'use client';\n \n import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n \n-const FbMessengerSimple = ({ receiverId }) => {\n+const ChatPage = ({ chatId }) => {\n   const [user, setUser] = useState(null);\n   const [activeChat, setActiveChat] = useState(null);\n   const [message, setMessage] = useState('');\n   const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n   const socket = useRef(null);\n+  const router = useRouter();\n \n   const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n \n   useEffect(() => {\n     const fetchProfile = async () => {\n       if (!token) {\n-        setIsAuthenticated(false);\n+        router.push('/logind');\n         return;\n       }\n \n       try {\n@@ -37,48 +34,46 @@\n         }\n         const data = await res.json();\n         if (data.user) {\n           setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n         } else if (data.charity) {\n           setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n         } else {\n           throw new Error('Profile not found');\n         }\n       } catch (error) {\n         console.error('Error:', error);\n-        setIsAuthenticated(false);\n+        router.push('/logind');\n       }\n     };\n \n     fetchProfile();\n-  }, [token]);\n+  }, [token, router]);\n \n   useEffect(() => {\n     if (!user) return;\n \n-    const fetchChatPreviews = async () => {\n+    const fetchChat = async () => {\n       try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+        const res = await fetch(`http://localhost:3001/chats/${chatId}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${token}`\n           },\n         });\n         if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+          throw new Error(`Error fetching chat: ${res.status} ${res.statusText}`);\n         }\n         const data = await res.json();\n-        setChatPreviews(data);\n+        setActiveChat(data);\n       } catch (error) {\n         console.error('Error:', error);\n       }\n     };\n \n-    fetchChatPreviews();\n-  }, [user, token]);\n+    fetchChat();\n+  }, [user, chatId, token]);\n \n   useEffect(() => {\n     if (!user || !activeChat) return;\n \n@@ -128,59 +123,26 @@\n \n     if (message.trim()) {\n       const newMessage = {\n         senderId: user.id,\n-        receiverId: currentReceiverId,\n+        receiverId: activeChat.participants.find(participant => participant.id !== user.id).id,\n         content: message,\n         chatId: activeChat.id,\n       };\n       socket.current.emit('sendMessage', newMessage);\n       setMessage('');\n     }\n   };\n \n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-  };\n-\n-  if (!isAuthenticated) {\n+  if (!user) {\n     return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n   }\n \n   return (\n     <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n       <div className=\"flex-1 flex flex-col\">\n         <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n+          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.participants.find(participant => participant.id !== user.id).name}</h2>}\n         </div>\n \n         <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n           {messages.map((msg, idx) => (\n@@ -205,9 +167,9 @@\n               className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n             />\n             <button\n               onClick={handleSend}\n-              className=\"ml-3  text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n             >\n               Enviar\n             </button>\n           </div>\n@@ -216,5 +178,5 @@\n     </div>\n   );\n };\n \n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n+export default ChatPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732004512246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,189 +1,7 @@\n 'use client';\n \n import React, { useState, useEffect, useRef } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-\n-const ChatPage = ({ chatId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const socket = useRef(null);\n-  const router = useRouter();\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        router.push('/logind');\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        router.push('/logind');\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token, router]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChat = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats/${chatId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chat: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setActiveChat(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChat();\n-  }, [user, chatId, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat.participants.find(participant => participant.id !== user.id).id,\n-        content: message,\n-        chatId: activeChat.id,\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  if (!user) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.participants.find(participant => participant.id !== user.id).name}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                <p className=\"text-sm\">{msg.content}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default ChatPage;\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n import dynamic from 'next/dynamic';\n import io from 'socket.io-client';\n \n const FbMessengerSimple = ({ receiverId }) => {\n@@ -398,187 +216,5 @@\n     </div>\n   );\n };\n \n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-\n-const ChatPage = ({ chatId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const socket = useRef(null);\n-  const router = useRouter();\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        router.push('/logind');\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        router.push('/logind');\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token, router]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChat = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats/${chatId}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chat: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setActiveChat(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChat();\n-  }, [user, chatId, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat.participants.find(participant => participant.id !== user.id).id,\n-        content: message,\n-        chatId: activeChat.id,\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  if (!user) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.participants.find(participant => participant.id !== user.id).name}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                <p className=\"text-sm\">{msg.content}</p>\n-              </div>\n-            </div>\n-          ))}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 bg-[#042637] text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default ChatPage;\n\\ No newline at end of file\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732006672752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,8 +133,9 @@\n         content: message,\n         chatId: activeChat.id,\n       };\n       socket.current.emit('sendMessage', newMessage);\n+      setMessages((prevMessages) => [...prevMessages, newMessage]);\n       setMessage('');\n     }\n   };\n \n@@ -142,8 +143,9 @@\n     setActiveChat(chat);\n     const recipient = chat.participants.find(participant => participant.id !== user.id);\n     setRecipientName(recipient.name);\n     setCurrentReceiverId(recipient.id);\n+    setMessages([]); // Clear messages when a new chat is selected\n   };\n \n   if (!isAuthenticated) {\n     return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n@@ -182,18 +184,22 @@\n           {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n         </div>\n \n         <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.map((msg, idx) => (\n-            <div\n-              key={idx}\n-              className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-            >\n-              <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                <p className=\"text-sm\">{msg.content}</p>\n+          {messages.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+          ) : (\n+            messages.map((msg, idx) => (\n+              <div\n+                key={idx}\n+                className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+              >\n+                <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                  <p className=\"text-sm\">{msg.content}</p>\n+                </div>\n               </div>\n-            </div>\n-          ))}\n+            ))\n+          )}\n         </div>\n \n         <div className=\"p-4 bg-[#E1DDBF]\">\n           <div className=\"flex items-center\">\n"
                },
                {
                    "date": 1732006888148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,226 +0,0 @@\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const socket = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessages((prevMessages) => [...prevMessages, newMessage]);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-    setMessages([]); // Clear messages when a new chat is selected\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat && <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {messages.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n-          ) : (\n-            messages.map((msg, idx) => (\n-              <div\n-                key={idx}\n-                className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-              >\n-                <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                  <p className=\"text-sm\">{msg.content}</p>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3  text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732007036704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,234 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const socket = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessages((prevMessages) => [...prevMessages, newMessage]);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+    setMessages([]); // Clear messages when a new chat is selected\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat ? (\n+            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n+          ) : (\n+            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n+          )}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {activeChat ? (\n+            messages.length === 0 ? (\n+              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+            ) : (\n+              messages.map((msg, idx) => (\n+                <div\n+                  key={idx}\n+                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+                >\n+                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                    <p className=\"text-sm\">{msg.content}</p>\n+                  </div>\n+                </div>\n+              ))\n+            )\n+          ) : (\n+            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n+          )}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732007233716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,10 @@\n \n import React, { useState, useEffect, useRef } from 'react';\n import dynamic from 'next/dynamic';\n import io from 'socket.io-client';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faUser } from '@fortawesome/free-solid-svg-icons';\n \n const FbMessengerSimple = ({ receiverId }) => {\n   const [user, setUser] = useState(null);\n   const [activeChat, setActiveChat] = useState(null);\n@@ -133,9 +135,8 @@\n         content: message,\n         chatId: activeChat.id,\n       };\n       socket.current.emit('sendMessage', newMessage);\n-      setMessages((prevMessages) => [...prevMessages, newMessage]);\n       setMessage('');\n     }\n   };\n \n@@ -167,9 +168,9 @@\n                 className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n                 onClick={() => handleChatClick(chat)}\n               >\n                 <div className=\"relative mr-3\">\n-                  <img src=\"/placeholder-avatar.jpg\" alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n                 </div>\n                 <div className=\"flex-1 min-w-0\">\n                   <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n                 </div>\n"
                },
                {
                    "date": 1732066384538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n \n   useEffect(() => {\n     if (!user || !activeChat) return;\n \n-    socket.current = io('http://localhost:3001', {\n+    socket.current = io('https://rwggxws5-3001.brs.devtunnels.ms/', {\n       auth: {\n         token: localStorage.getItem('authToken')\n       }\n     });\n"
                },
                {
                    "date": 1732066395896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     if (!user) return;\n \n     const fetchChatPreviews = async () => {\n       try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms//chats?userId=${user.id}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${token}`\n"
                },
                {
                    "date": 1732066403617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,235 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faUser } from '@fortawesome/free-solid-svg-icons';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const socket = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('https://rwggxws5-3001.brs.devtunnels.ms/', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+    setMessages([]); // Clear messages when a new chat is selected\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat ? (\n+            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n+          ) : (\n+            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n+          )}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {activeChat ? (\n+            messages.length === 0 ? (\n+              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+            ) : (\n+              messages.map((msg, idx) => (\n+                <div\n+                  key={idx}\n+                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+                >\n+                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                    <p className=\"text-sm\">{msg.content}</p>\n+                  </div>\n+                </div>\n+              ))\n+            )\n+          ) : (\n+            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n+          )}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732153744256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import React, { useState, useEffect, useRef } from 'react';\n import dynamic from 'next/dynamic';\n import io from 'socket.io-client';\n import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser } from '@fortawesome/free-solid-svg-icons';\n+import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n \n const FbMessengerSimple = ({ receiverId }) => {\n   const [user, setUser] = useState(null);\n   const [activeChat, setActiveChat] = useState(null);\n@@ -14,8 +14,9 @@\n   const [chatPreviews, setChatPreviews] = useState([]);\n   const [recipientName, setRecipientName] = useState('');\n   const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const [isTyping, setIsTyping] = useState(false);\n   const socket = useRef(null);\n \n   const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n \n@@ -115,246 +116,18 @@\n       setMessages((prevMessages) => [...prevMessages, message]);\n     };\n     socket.current.on('receiveMessage', handleReceiveMessage);\n \n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n+    const handleTyping = () => {\n+      setIsTyping(true);\n+      setTimeout(() => setIsTyping(false), 2000);\n     };\n-  }, [activeChat, user, token]);\n+    socket.current.on('typing', handleTyping);\n \n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-    setMessages([]); // Clear messages when a new chat is selected\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat ? (\n-            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n-          ) : (\n-            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n-          )}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {activeChat ? (\n-            messages.length === 0 ? (\n-              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n-            ) : (\n-              messages.map((msg, idx) => (\n-                <div\n-                  key={idx}\n-                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-                >\n-                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                    <p className=\"text-sm\">{msg.content}</p>\n-                  </div>\n-                </div>\n-              ))\n-            )\n-          ) : (\n-            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n-          )}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser } from '@fortawesome/free-solid-svg-icons';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const socket = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms//chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('https://rwggxws5-3001.brs.devtunnels.ms/', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n     return () => {\n       socket.current.emit('leaveRoom', activeChat.id);\n       socket.current.off('receiveMessage', handleReceiveMessage);\n+      socket.current.off('typing', handleTyping);\n     };\n   }, [activeChat, user, token]);\n \n   const handleSend = () => {\n@@ -368,8 +141,9 @@\n         senderId: user.id,\n         receiverId: currentReceiverId,\n         content: message,\n         chatId: activeChat.id,\n+        timestamp: new Date().toLocaleTimeString()\n       };\n       socket.current.emit('sendMessage', newMessage);\n       setMessage('');\n     }\n@@ -389,10 +163,15 @@\n \n   return (\n     <div className=\"flex h-screen bg-[#ECE3D4]\">\n       <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n+          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n+          <input\n+            type=\"text\"\n+            placeholder=\"Buscar chats...\"\n+            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+          />\n         </div>\n         <div className=\"flex-1 overflow-y-auto\">\n           {chatPreviews.length === 0 ? (\n             <p className=\"text-center text-[#042637]\">No chats available.</p>\n@@ -435,15 +214,17 @@\n                   className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n                 >\n                   <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n                     <p className=\"text-sm\">{msg.content}</p>\n+                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n                   </div>\n                 </div>\n               ))\n             )\n           ) : (\n             <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n           )}\n+          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n         </div>\n \n         <div className=\"p-4 bg-[#E1DDBF]\">\n           <div className=\"flex items-center\">\n@@ -455,11 +236,11 @@\n               className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n             />\n             <button\n               onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n             >\n-              Enviar\n+              <FontAwesomeIcon icon={faPaperPlane} />\n             </button>\n           </div>\n         </div>\n       </div>\n"
                },
                {
                    "date": 1732154088843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         return;\n       }\n \n       try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${token}`\n"
                },
                {
                    "date": 1732154094359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n     if (!user) return;\n \n     const fetchChatPreviews = async () => {\n       try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/chats?userId=${user.id}`, {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${token}`\n"
                },
                {
                    "date": 1732154100374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,251 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const [isTyping, setIsTyping] = useState(false);\n+  const socket = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    const handleTyping = () => {\n+      setIsTyping(true);\n+      setTimeout(() => setIsTyping(false), 2000);\n+    };\n+    socket.current.on('typing', handleTyping);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+      socket.current.off('typing', handleTyping);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+        timestamp: new Date().toLocaleTimeString()\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+    setMessages([]); // Clear messages when a new chat is selected\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n+          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n+          <input\n+            type=\"text\"\n+            placeholder=\"Buscar chats...\"\n+            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+          />\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat ? (\n+            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n+          ) : (\n+            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n+          )}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {activeChat ? (\n+            messages.length === 0 ? (\n+              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+            ) : (\n+              messages.map((msg, idx) => (\n+                <div\n+                  key={idx}\n+                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+                >\n+                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                    <p className=\"text-sm\">{msg.content}</p>\n+                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n+                  </div>\n+                </div>\n+              ))\n+            )\n+          ) : (\n+            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n+          )}\n+          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              <FontAwesomeIcon icon={faPaperPlane} />\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732154454775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,259 +84,8 @@\n \n   useEffect(() => {\n     if (!user || !activeChat) return;\n \n-    socket.current = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    const handleTyping = () => {\n-      setIsTyping(true);\n-      setTimeout(() => setIsTyping(false), 2000);\n-    };\n-    socket.current.on('typing', handleTyping);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-      socket.current.off('typing', handleTyping);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-        timestamp: new Date().toLocaleTimeString()\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-    setMessages([]); // Clear messages when a new chat is selected\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n-          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n-          <input\n-            type=\"text\"\n-            placeholder=\"Buscar chats...\"\n-            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-          />\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat ? (\n-            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n-          ) : (\n-            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n-          )}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {activeChat ? (\n-            messages.length === 0 ? (\n-              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n-            ) : (\n-              messages.map((msg, idx) => (\n-                <div\n-                  key={idx}\n-                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-                >\n-                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                    <p className=\"text-sm\">{msg.content}</p>\n-                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n-                  </div>\n-                </div>\n-              ))\n-            )\n-          ) : (\n-            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n-          )}\n-          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              <FontAwesomeIcon icon={faPaperPlane} />\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const [isTyping, setIsTyping] = useState(false);\n-  const socket = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n     socket.current = io('https://rwggxws5-3001.brs.devtunnels.ms/', {\n       auth: {\n         token: localStorage.getItem('authToken')\n       }\n"
                },
                {
                    "date": 1732154478092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,251 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const [isTyping, setIsTyping] = useState(false);\n+  const socket = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('https://rwggxws5-3001.brs.devtunnels.ms/', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    const handleTyping = () => {\n+      setIsTyping(true);\n+      setTimeout(() => setIsTyping(false), 2000);\n+    };\n+    socket.current.on('typing', handleTyping);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+      socket.current.off('typing', handleTyping);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+        timestamp: new Date().toLocaleTimeString()\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+    setMessages([]); // Clear messages when a new chat is selected\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n+          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n+          <input\n+            type=\"text\"\n+            placeholder=\"Buscar chats...\"\n+            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+          />\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat ? (\n+            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n+          ) : (\n+            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n+          )}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {activeChat ? (\n+            messages.length === 0 ? (\n+              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+            ) : (\n+              messages.map((msg, idx) => (\n+                <div\n+                  key={idx}\n+                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+                >\n+                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                    <p className=\"text-sm\">{msg.content}</p>\n+                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n+                  </div>\n+                </div>\n+              ))\n+            )\n+          ) : (\n+            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n+          )}\n+          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              <FontAwesomeIcon icon={faPaperPlane} />\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732154511884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,251 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const [isTyping, setIsTyping] = useState(false);\n+  const socket = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('https://rwggxws5-3001.brs.devtunnels.ms/', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    const handleTyping = () => {\n+      setIsTyping(true);\n+      setTimeout(() => setIsTyping(false), 2000);\n+    };\n+    socket.current.on('typing', handleTyping);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+      socket.current.off('typing', handleTyping);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+        timestamp: new Date().toLocaleTimeString()\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+    setMessages([]); // Clear messages when a new chat is selected\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n+          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n+          <input\n+            type=\"text\"\n+            placeholder=\"Buscar chats...\"\n+            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+          />\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat ? (\n+            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n+          ) : (\n+            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n+          )}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {activeChat ? (\n+            messages.length === 0 ? (\n+              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+            ) : (\n+              messages.map((msg, idx) => (\n+                <div\n+                  key={idx}\n+                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+                >\n+                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                    <p className=\"text-sm\">{msg.content}</p>\n+                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n+                  </div>\n+                </div>\n+              ))\n+            )\n+          ) : (\n+            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n+          )}\n+          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              <FontAwesomeIcon icon={faPaperPlane} />\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732154534744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import React, { useState, useEffect, useRef } from 'react';\n import dynamic from 'next/dynamic';\n import io from 'socket.io-client';\n import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n+import { faUser } from '@fortawesome/free-solid-svg-icons';\n \n const FbMessengerSimple = ({ receiverId }) => {\n   const [user, setUser] = useState(null);\n   const [activeChat, setActiveChat] = useState(null);\n@@ -14,9 +14,8 @@\n   const [chatPreviews, setChatPreviews] = useState([]);\n   const [recipientName, setRecipientName] = useState('');\n   const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const [isTyping, setIsTyping] = useState(false);\n   const socket = useRef(null);\n \n   const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n \n@@ -116,18 +115,11 @@\n       setMessages((prevMessages) => [...prevMessages, message]);\n     };\n     socket.current.on('receiveMessage', handleReceiveMessage);\n \n-    const handleTyping = () => {\n-      setIsTyping(true);\n-      setTimeout(() => setIsTyping(false), 2000);\n-    };\n-    socket.current.on('typing', handleTyping);\n-\n     return () => {\n       socket.current.emit('leaveRoom', activeChat.id);\n       socket.current.off('receiveMessage', handleReceiveMessage);\n-      socket.current.off('typing', handleTyping);\n     };\n   }, [activeChat, user, token]);\n \n   const handleSend = () => {\n@@ -141,9 +133,8 @@\n         senderId: user.id,\n         receiverId: currentReceiverId,\n         content: message,\n         chatId: activeChat.id,\n-        timestamp: new Date().toLocaleTimeString()\n       };\n       socket.current.emit('sendMessage', newMessage);\n       setMessage('');\n     }\n@@ -163,15 +154,10 @@\n \n   return (\n     <div className=\"flex h-screen bg-[#ECE3D4]\">\n       <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n-          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n-          <input\n-            type=\"text\"\n-            placeholder=\"Buscar chats...\"\n-            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-          />\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n         </div>\n         <div className=\"flex-1 overflow-y-auto\">\n           {chatPreviews.length === 0 ? (\n             <p className=\"text-center text-[#042637]\">No chats available.</p>\n@@ -214,17 +200,15 @@\n                   className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n                 >\n                   <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n                     <p className=\"text-sm\">{msg.content}</p>\n-                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n                   </div>\n                 </div>\n               ))\n             )\n           ) : (\n             <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n           )}\n-          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n         </div>\n \n         <div className=\"p-4 bg-[#E1DDBF]\">\n           <div className=\"flex items-center\">\n@@ -236,518 +220,16 @@\n               className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n             />\n             <button\n               onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n+              className=\"ml-3 text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n             >\n-              <FontAwesomeIcon icon={faPaperPlane} />\n+              Enviar\n             </button>\n           </div>\n         </div>\n       </div>\n     </div>\n   );\n };\n \n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const [isTyping, setIsTyping] = useState(false);\n-  const socket = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('https://rwggxws5-3001.brs.devtunnels.ms/', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    const handleTyping = () => {\n-      setIsTyping(true);\n-      setTimeout(() => setIsTyping(false), 2000);\n-    };\n-    socket.current.on('typing', handleTyping);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-      socket.current.off('typing', handleTyping);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-        timestamp: new Date().toLocaleTimeString()\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-    setMessages([]); // Clear messages when a new chat is selected\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n-          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n-          <input\n-            type=\"text\"\n-            placeholder=\"Buscar chats...\"\n-            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-          />\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat ? (\n-            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n-          ) : (\n-            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n-          )}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {activeChat ? (\n-            messages.length === 0 ? (\n-              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n-            ) : (\n-              messages.map((msg, idx) => (\n-                <div\n-                  key={idx}\n-                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-                >\n-                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                    <p className=\"text-sm\">{msg.content}</p>\n-                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n-                  </div>\n-                </div>\n-              ))\n-            )\n-          ) : (\n-            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n-          )}\n-          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              <FontAwesomeIcon icon={faPaperPlane} />\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const [isTyping, setIsTyping] = useState(false);\n-  const socket = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('https://rwggxws5-3001.brs.devtunnels.ms/', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    const handleTyping = () => {\n-      setIsTyping(true);\n-      setTimeout(() => setIsTyping(false), 2000);\n-    };\n-    socket.current.on('typing', handleTyping);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-      socket.current.off('typing', handleTyping);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-        timestamp: new Date().toLocaleTimeString()\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-    setMessages([]); // Clear messages when a new chat is selected\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n-          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n-          <input\n-            type=\"text\"\n-            placeholder=\"Buscar chats...\"\n-            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-          />\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat ? (\n-            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n-          ) : (\n-            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n-          )}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {activeChat ? (\n-            messages.length === 0 ? (\n-              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n-            ) : (\n-              messages.map((msg, idx) => (\n-                <div\n-                  key={idx}\n-                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-                >\n-                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                    <p className=\"text-sm\">{msg.content}</p>\n-                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n-                  </div>\n-                </div>\n-              ))\n-            )\n-          ) : (\n-            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n-          )}\n-          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              <FontAwesomeIcon icon={faPaperPlane} />\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732154548361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         return;\n       }\n \n       try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+        const res = await fetch(`http://localhost:3000//profile?secret_token=${token}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${token}`\n"
                },
                {
                    "date": 1732154565655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     if (!user) return;\n \n     const fetchChatPreviews = async () => {\n       try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/chats?userId=${user.id}`, {\n+        const res = await fetch(`http://localhost:3000//chats?userId=${user.id}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${token}`\n"
                },
                {
                    "date": 1732154577073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n \n   useEffect(() => {\n     if (!user || !activeChat) return;\n \n-    socket.current = io('https://rwggxws5-3001.brs.devtunnels.ms/', {\n+    socket.current = io('http://localhost:3000/', {\n       auth: {\n         token: localStorage.getItem('authToken')\n       }\n     });\n"
                },
                {
                    "date": 1732154583057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         return;\n       }\n \n       try {\n-        const res = await fetch(`http://localhost:3000//profile?secret_token=${token}`, {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${token}`\n@@ -60,9 +60,9 @@\n     if (!user) return;\n \n     const fetchChatPreviews = async () => {\n       try {\n-        const res = await fetch(`http://localhost:3000//chats?userId=${user.id}`, {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${token}`\n@@ -83,9 +83,9 @@\n \n   useEffect(() => {\n     if (!user || !activeChat) return;\n \n-    socket.current = io('http://localhost:3000/', {\n+    socket.current = io('http://localhost:3001', {\n       auth: {\n         token: localStorage.getItem('authToken')\n       }\n     });\n"
                },
                {
                    "date": 1732154595656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,235 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faUser } from '@fortawesome/free-solid-svg-icons';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const socket = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3000//messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+    setMessages([]); // Clear messages when a new chat is selected\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat ? (\n+            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n+          ) : (\n+            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n+          )}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {activeChat ? (\n+            messages.length === 0 ? (\n+              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+            ) : (\n+              messages.map((msg, idx) => (\n+                <div\n+                  key={idx}\n+                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+                >\n+                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                    <p className=\"text-sm\">{msg.content}</p>\n+                  </div>\n+                </div>\n+              ))\n+            )\n+          ) : (\n+            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n+          )}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732154642789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     socket.current.emit('joinRoom', activeChat.id);\n \n     const fetchMessages = async () => {\n       try {\n-        const res = await fetch(`http://localhost:3000//messages?chatId=${activeChat.id}`, {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n           headers: {\n             'Authorization': `Bearer ${token}`\n           }\n         });\n@@ -231,240 +231,5 @@\n     </div>\n   );\n };\n \n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser } from '@fortawesome/free-solid-svg-icons';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const socket = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-    setMessages([]); // Clear messages when a new chat is selected\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat ? (\n-            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n-          ) : (\n-            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n-          )}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {activeChat ? (\n-            messages.length === 0 ? (\n-              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n-            ) : (\n-              messages.map((msg, idx) => (\n-                <div\n-                  key={idx}\n-                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-                >\n-                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                    <p className=\"text-sm\">{msg.content}</p>\n-                  </div>\n-                </div>\n-              ))\n-            )\n-          ) : (\n-            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n-          )}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732154692756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,235 +0,0 @@\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser } from '@fortawesome/free-solid-svg-icons';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const socket = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-    setMessages([]); // Clear messages when a new chat is selected\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat ? (\n-            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n-          ) : (\n-            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n-          )}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {activeChat ? (\n-            messages.length === 0 ? (\n-              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n-            ) : (\n-              messages.map((msg, idx) => (\n-                <div\n-                  key={idx}\n-                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-                >\n-                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                    <p className=\"text-sm\">{msg.content}</p>\n-                  </div>\n-                </div>\n-              ))\n-            )\n-          ) : (\n-            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n-          )}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732154708655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,251 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const [isTyping, setIsTyping] = useState(false);\n+  const socket = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('https://rwggxws5-3001.brs.devtunnels.ms/', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    const handleTyping = () => {\n+      setIsTyping(true);\n+      setTimeout(() => setIsTyping(false), 2000);\n+    };\n+    socket.current.on('typing', handleTyping);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+      socket.current.off('typing', handleTyping);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+        timestamp: new Date().toLocaleTimeString()\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+    setMessages([]); // Clear messages when a new chat is selected\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n+          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n+          <input\n+            type=\"text\"\n+            placeholder=\"Buscar chats...\"\n+            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+          />\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat ? (\n+            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n+          ) : (\n+            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n+          )}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {activeChat ? (\n+            messages.length === 0 ? (\n+              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+            ) : (\n+              messages.map((msg, idx) => (\n+                <div\n+                  key={idx}\n+                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+                >\n+                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                    <p className=\"text-sm\">{msg.content}</p>\n+                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n+                  </div>\n+                </div>\n+              ))\n+            )\n+          ) : (\n+            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n+          )}\n+          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              <FontAwesomeIcon icon={faPaperPlane} />\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732154714301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,251 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const [isTyping, setIsTyping] = useState(false);\n+  const socket = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    const handleTyping = () => {\n+      setIsTyping(true);\n+      setTimeout(() => setIsTyping(false), 2000);\n+    };\n+    socket.current.on('typing', handleTyping);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+      socket.current.off('typing', handleTyping);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+        timestamp: new Date().toLocaleTimeString()\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    setRecipientName(recipient.name);\n+    setCurrentReceiverId(recipient.id);\n+    setMessages([]); // Clear messages when a new chat is selected\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n+          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n+          <input\n+            type=\"text\"\n+            placeholder=\"Buscar chats...\"\n+            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+          />\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          {activeChat ? (\n+            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n+          ) : (\n+            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n+          )}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {activeChat ? (\n+            messages.length === 0 ? (\n+              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+            ) : (\n+              messages.map((msg, idx) => (\n+                <div\n+                  key={idx}\n+                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+                >\n+                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                    <p className=\"text-sm\">{msg.content}</p>\n+                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n+                  </div>\n+                </div>\n+              ))\n+            )\n+          ) : (\n+            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n+          )}\n+          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              <FontAwesomeIcon icon={faPaperPlane} />\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732154721433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         return;\n       }\n \n       try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${token}`\n@@ -61,9 +61,9 @@\n     if (!user) return;\n \n     const fetchChatPreviews = async () => {\n       try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/chats?userId=${user.id}`, {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n           method: 'GET',\n           headers: {\n             'Content-Type': 'application/json',\n             'Authorization': `Bearer ${token}`\n@@ -247,256 +247,5 @@\n     </div>\n   );\n };\n \n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const [isTyping, setIsTyping] = useState(false);\n-  const socket = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('https://rwggxws5-3001.brs.devtunnels.ms/', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    const handleTyping = () => {\n-      setIsTyping(true);\n-      setTimeout(() => setIsTyping(false), 2000);\n-    };\n-    socket.current.on('typing', handleTyping);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-      socket.current.off('typing', handleTyping);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-        timestamp: new Date().toLocaleTimeString()\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n-    setMessages([]); // Clear messages when a new chat is selected\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n-          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n-          <input\n-            type=\"text\"\n-            placeholder=\"Buscar chats...\"\n-            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-          />\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat ? (\n-            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n-          ) : (\n-            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n-          )}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {activeChat ? (\n-            messages.length === 0 ? (\n-              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n-            ) : (\n-              messages.map((msg, idx) => (\n-                <div\n-                  key={idx}\n-                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-                >\n-                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                    <p className=\"text-sm\">{msg.content}</p>\n-                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n-                  </div>\n-                </div>\n-              ))\n-            )\n-          ) : (\n-            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n-          )}\n-          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              <FontAwesomeIcon icon={faPaperPlane} />\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732154798431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,10 +151,12 @@\n \n   const handleChatClick = (chat) => {\n     setActiveChat(chat);\n     const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    setRecipientName(recipient.name);\n-    setCurrentReceiverId(recipient.id);\n+    if (recipient) {\n+      setRecipientName(recipient.name);\n+      setCurrentReceiverId(recipient.id);\n+    }\n     setMessages([]); // Clear messages when a new chat is selected\n   };\n \n   if (!isAuthenticated) {\n@@ -185,9 +187,9 @@\n                 <div className=\"relative mr-3\">\n                   <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n                 </div>\n                 <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id).name}</h2>\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id)?.name || 'Desconocido'}</h2>\n                 </div>\n               </div>\n             ))\n           )}\n"
                },
                {
                    "date": 1732155036678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,264 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const [isTyping, setIsTyping] = useState(false);\n+  const socket = useRef(null);\n+  const messagesEndRef = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    const handleTyping = () => {\n+      setIsTyping(true);\n+      setTimeout(() => setIsTyping(false), 2000);\n+    };\n+    socket.current.on('typing', handleTyping);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+      socket.current.off('typing', handleTyping);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  useEffect(() => {\n+    if (messagesEndRef.current) {\n+      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n+    }\n+  }, [messages]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+        timestamp: new Date().toLocaleTimeString()\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    if (recipient) {\n+      setRecipientName(recipient.name);\n+      setCurrentReceiverId(recipient.id);\n+    }\n+    setMessages([]); // Clear messages when a new chat is selected\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n+          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n+          <input\n+            type=\"text\"\n+            placeholder=\"Buscar chats...\"\n+            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+          />\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id)?.name || 'Desconocido'}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\" style={{ position: 'sticky', top: 0, zIndex: 10 }}>\n+          {activeChat ? (\n+            <div>\n+              <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n+              <p className=\"text-sm text-[#042637]\">Última conexión: hace 5 minutos</p>\n+            </div>\n+          ) : (\n+            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n+          )}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {activeChat ? (\n+            messages.length === 0 ? (\n+              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+            ) : (\n+              messages.map((msg, idx) => (\n+                <div\n+                  key={idx}\n+                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+                >\n+                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                    <p className=\"text-sm\">{msg.content}</p>\n+                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n+                  </div>\n+                </div>\n+              ))\n+            )\n+          ) : (\n+            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n+          )}\n+          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n+          <div ref={messagesEndRef} />\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              <FontAwesomeIcon icon={faPaperPlane} />\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732155152079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,258 +260,5 @@\n     </div>\n   );\n };\n \n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const [isTyping, setIsTyping] = useState(false);\n-  const socket = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    const handleTyping = () => {\n-      setIsTyping(true);\n-      setTimeout(() => setIsTyping(false), 2000);\n-    };\n-    socket.current.on('typing', handleTyping);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-      socket.current.off('typing', handleTyping);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-        timestamp: new Date().toLocaleTimeString()\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    if (recipient) {\n-      setRecipientName(recipient.name);\n-      setCurrentReceiverId(recipient.id);\n-    }\n-    setMessages([]); // Clear messages when a new chat is selected\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n-          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n-          <input\n-            type=\"text\"\n-            placeholder=\"Buscar chats...\"\n-            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-          />\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id)?.name || 'Desconocido'}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          {activeChat ? (\n-            <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n-          ) : (\n-            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n-          )}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {activeChat ? (\n-            messages.length === 0 ? (\n-              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n-            ) : (\n-              messages.map((msg, idx) => (\n-                <div\n-                  key={idx}\n-                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-                >\n-                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                    <p className=\"text-sm\">{msg.content}</p>\n-                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n-                  </div>\n-                </div>\n-              ))\n-            )\n-          ) : (\n-            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n-          )}\n-          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              <FontAwesomeIcon icon={faPaperPlane} />\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732155702729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,262 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const [isTyping, setIsTyping] = useState(false);\n+  const socket = useRef(null);\n+  const messagesEndRef = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    const handleTyping = () => {\n+      setIsTyping(true);\n+      setTimeout(() => setIsTyping(false), 2000);\n+    };\n+    socket.current.on('typing', handleTyping);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+      socket.current.off('typing', handleTyping);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  useEffect(() => {\n+    if (messagesEndRef.current) {\n+      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n+    }\n+  }, [messages]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+        timestamp: new Date().toLocaleTimeString()\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    if (recipient) {\n+      setRecipientName(recipient.name);\n+      setCurrentReceiverId(recipient.id);\n+    }\n+    setMessages([]); // Clear messages when a new chat is selected\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"fixed bottom-0 right-0 w-full md:w-[320px] lg:w-[360px] h-[80vh] bg-[#ECE3D4] border border-[#D8C7A9] flex flex-col shadow-lg\">\n+      <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n+        <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n+        <input\n+          type=\"text\"\n+          placeholder=\"Buscar chats...\"\n+          className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+        />\n+      </div>\n+      <div className=\"flex-1 overflow-y-auto\">\n+        {chatPreviews.length === 0 ? (\n+          <p className=\"text-center text-[#042637]\">No chats available.</p>\n+        ) : (\n+          chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+              onClick={() => handleChatClick(chat)}\n+            >\n+              <div className=\"relative mr-3\">\n+                <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id)?.name || 'Desconocido'}</h2>\n+              </div>\n+            </div>\n+          ))\n+        )}\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\" style={{ position: 'sticky', top: 0, zIndex: 10 }}>\n+          {activeChat ? (\n+            <div>\n+              <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n+              <p className=\"text-sm text-[#042637]\">Última conexión: hace 5 minutos</p>\n+            </div>\n+          ) : (\n+            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n+          )}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {activeChat ? (\n+            messages.length === 0 ? (\n+              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+            ) : (\n+              messages.map((msg, idx) => (\n+                <div\n+                  key={idx}\n+                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+                >\n+                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                    <p className=\"text-sm\">{msg.content}</p>\n+                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n+                  </div>\n+                </div>\n+              ))\n+            )\n+          ) : (\n+            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n+          )}\n+          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n+          <div ref={messagesEndRef} />\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              <FontAwesomeIcon icon={faPaperPlane} />\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732155799425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,526 +0,0 @@\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const [isTyping, setIsTyping] = useState(false);\n-  const socket = useRef(null);\n-  const messagesEndRef = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    const handleTyping = () => {\n-      setIsTyping(true);\n-      setTimeout(() => setIsTyping(false), 2000);\n-    };\n-    socket.current.on('typing', handleTyping);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-      socket.current.off('typing', handleTyping);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  useEffect(() => {\n-    if (messagesEndRef.current) {\n-      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n-    }\n-  }, [messages]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-        timestamp: new Date().toLocaleTimeString()\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    if (recipient) {\n-      setRecipientName(recipient.name);\n-      setCurrentReceiverId(recipient.id);\n-    }\n-    setMessages([]); // Clear messages when a new chat is selected\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"fixed bottom-0 right-0 w-full md:w-[320px] lg:w-[360px] h-[80vh] bg-[#ECE3D4] border border-[#D8C7A9] flex flex-col shadow-lg\">\n-      <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n-        <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n-        <input\n-          type=\"text\"\n-          placeholder=\"Buscar chats...\"\n-          className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-        />\n-      </div>\n-      <div className=\"flex-1 overflow-y-auto\">\n-        {chatPreviews.length === 0 ? (\n-          <p className=\"text-center text-[#042637]\">No chats available.</p>\n-        ) : (\n-          chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-              onClick={() => handleChatClick(chat)}\n-            >\n-              <div className=\"relative mr-3\">\n-                <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id)?.name || 'Desconocido'}</h2>\n-              </div>\n-            </div>\n-          ))\n-        )}\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\" style={{ position: 'sticky', top: 0, zIndex: 10 }}>\n-          {activeChat ? (\n-            <div>\n-              <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n-              <p className=\"text-sm text-[#042637]\">Última conexión: hace 5 minutos</p>\n-            </div>\n-          ) : (\n-            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n-          )}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {activeChat ? (\n-            messages.length === 0 ? (\n-              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n-            ) : (\n-              messages.map((msg, idx) => (\n-                <div\n-                  key={idx}\n-                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-                >\n-                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                    <p className=\"text-sm\">{msg.content}</p>\n-                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n-                  </div>\n-                </div>\n-              ))\n-            )\n-          ) : (\n-            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n-          )}\n-          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n-          <div ref={messagesEndRef} />\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              <FontAwesomeIcon icon={faPaperPlane} />\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const [isTyping, setIsTyping] = useState(false);\n-  const socket = useRef(null);\n-  const messagesEndRef = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    const handleTyping = () => {\n-      setIsTyping(true);\n-      setTimeout(() => setIsTyping(false), 2000);\n-    };\n-    socket.current.on('typing', handleTyping);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-      socket.current.off('typing', handleTyping);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  useEffect(() => {\n-    if (messagesEndRef.current) {\n-      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n-    }\n-  }, [messages]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-        timestamp: new Date().toLocaleTimeString()\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    if (recipient) {\n-      setRecipientName(recipient.name);\n-      setCurrentReceiverId(recipient.id);\n-    }\n-    setMessages([]); // Clear messages when a new chat is selected\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n-          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n-          <input\n-            type=\"text\"\n-            placeholder=\"Buscar chats...\"\n-            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-          />\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.length === 0 ? (\n-            <p className=\"text-center text-[#042637]\">No chats available.</p>\n-          ) : (\n-            chatPreviews.map((chat) => (\n-              <div\n-                key={chat.id}\n-                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-                onClick={() => handleChatClick(chat)}\n-              >\n-                <div className=\"relative mr-3\">\n-                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n-                </div>\n-                <div className=\"flex-1 min-w-0\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id)?.name || 'Desconocido'}</h2>\n-                </div>\n-              </div>\n-            ))\n-          )}\n-        </div>\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\" style={{ position: 'sticky', top: 0, zIndex: 10 }}>\n-          {activeChat ? (\n-            <div>\n-              <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n-              <p className=\"text-sm text-[#042637]\">Última conexión: hace 5 minutos</p>\n-            </div>\n-          ) : (\n-            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n-          )}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {activeChat ? (\n-            messages.length === 0 ? (\n-              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n-            ) : (\n-              messages.map((msg, idx) => (\n-                <div\n-                  key={idx}\n-                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-                >\n-                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                    <p className=\"text-sm\">{msg.content}</p>\n-                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n-                  </div>\n-                </div>\n-              ))\n-            )\n-          ) : (\n-            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n-          )}\n-          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n-          <div ref={messagesEndRef} />\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              <FontAwesomeIcon icon={faPaperPlane} />\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732155827086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,262 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const [isTyping, setIsTyping] = useState(false);\n+  const socket = useRef(null);\n+  const messagesEndRef = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    const handleTyping = () => {\n+      setIsTyping(true);\n+      setTimeout(() => setIsTyping(false), 2000);\n+    };\n+    socket.current.on('typing', handleTyping);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+      socket.current.off('typing', handleTyping);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  useEffect(() => {\n+    if (messagesEndRef.current) {\n+      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n+    }\n+  }, [messages]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+        timestamp: new Date().toLocaleTimeString()\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    if (recipient) {\n+      setRecipientName(recipient.name);\n+      setCurrentReceiverId(recipient.id);\n+    }\n+    setMessages([]); // Clear messages when a new chat is selected\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"fixed bottom-0 right-0 w-full md:w-[400px] lg:w-[450px] h-[70vh] bg-[#ECE3D4] border border-[#D8C7A9] flex flex-col shadow-lg\">\n+      <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n+        <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n+        <input\n+          type=\"text\"\n+          placeholder=\"Buscar chats...\"\n+          className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+        />\n+      </div>\n+      <div className=\"flex-1 overflow-y-auto\">\n+        {chatPreviews.length === 0 ? (\n+          <p className=\"text-center text-[#042637]\">No chats available.</p>\n+        ) : (\n+          chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+              onClick={() => handleChatClick(chat)}\n+            >\n+              <div className=\"relative mr-3\">\n+                <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id)?.name || 'Desconocido'}</h2>\n+              </div>\n+            </div>\n+          ))\n+        )}\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\" style={{ position: 'sticky', top: 0, zIndex: 10 }}>\n+          {activeChat ? (\n+            <div>\n+              <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n+              <p className=\"text-sm text-[#042637]\">Última conexión: hace 5 minutos</p>\n+            </div>\n+          ) : (\n+            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n+          )}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {activeChat ? (\n+            messages.length === 0 ? (\n+              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+            ) : (\n+              messages.map((msg, idx) => (\n+                <div\n+                  key={idx}\n+                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+                >\n+                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                    <p className=\"text-sm\">{msg.content}</p>\n+                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n+                  </div>\n+                </div>\n+              ))\n+            )\n+          ) : (\n+            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n+          )}\n+          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n+          <div ref={messagesEndRef} />\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              <FontAwesomeIcon icon={faPaperPlane} />\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732155948670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n     return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n   }\n \n   return (\n-    <div className=\"fixed bottom-0 right-0 w-full md:w-[400px] lg:w-[450px] h-[70vh] bg-[#ECE3D4] border border-[#D8C7A9] flex flex-col shadow-lg\">\n+    <div className=\"fixed bottom-0 right-0 w-full md:w-[400px] lg:w-[450px] h-[60vh] bg-[#ECE3D4] border border-[#D8C7A9] flex flex-col shadow-lg\">\n       <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n         <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n         <input\n           type=\"text\"\n"
                },
                {
                    "date": 1732155969348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,262 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const [isTyping, setIsTyping] = useState(false);\n+  const socket = useRef(null);\n+  const messagesEndRef = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    const handleTyping = () => {\n+      setIsTyping(true);\n+      setTimeout(() => setIsTyping(false), 2000);\n+    };\n+    socket.current.on('typing', handleTyping);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+      socket.current.off('typing', handleTyping);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  useEffect(() => {\n+    if (messagesEndRef.current) {\n+      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n+    }\n+  }, [messages]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+        timestamp: new Date().toLocaleTimeString()\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    if (recipient) {\n+      setRecipientName(recipient.name);\n+      setCurrentReceiverId(recipient.id);\n+    }\n+    setMessages([]); // Clear messages when a new chat is selected\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"fixed bottom-0 right-0 w-full md:w-[320px] lg:w-[360px] h-[80vh] bg-[#ECE3D4] border border-[#D8C7A9] flex flex-col shadow-lg\">\n+      <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n+        <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n+        <input\n+          type=\"text\"\n+          placeholder=\"Buscar chats...\"\n+          className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+        />\n+      </div>\n+      <div className=\"flex-1 overflow-y-auto\">\n+        {chatPreviews.length === 0 ? (\n+          <p className=\"text-center text-[#042637]\">No chats available.</p>\n+        ) : (\n+          chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+              onClick={() => handleChatClick(chat)}\n+            >\n+              <div className=\"relative mr-3\">\n+                <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id)?.name || 'Desconocido'}</h2>\n+              </div>\n+            </div>\n+          ))\n+        )}\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\" style={{ position: 'sticky', top: 0, zIndex: 10 }}>\n+          {activeChat ? (\n+            <div>\n+              <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n+              <p className=\"text-sm text-[#042637]\">Última conexión: hace 5 minutos</p>\n+            </div>\n+          ) : (\n+            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n+          )}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {activeChat ? (\n+            messages.length === 0 ? (\n+              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+            ) : (\n+              messages.map((msg, idx) => (\n+                <div\n+                  key={idx}\n+                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+                >\n+                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                    <p className=\"text-sm\">{msg.content}</p>\n+                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n+                  </div>\n+                </div>\n+              ))\n+            )\n+          ) : (\n+            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n+          )}\n+          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n+          <div ref={messagesEndRef} />\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              <FontAwesomeIcon icon={faPaperPlane} />\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732156116597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,524 +0,0 @@\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const [isTyping, setIsTyping] = useState(false);\n-  const socket = useRef(null);\n-  const messagesEndRef = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    const handleTyping = () => {\n-      setIsTyping(true);\n-      setTimeout(() => setIsTyping(false), 2000);\n-    };\n-    socket.current.on('typing', handleTyping);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-      socket.current.off('typing', handleTyping);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  useEffect(() => {\n-    if (messagesEndRef.current) {\n-      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n-    }\n-  }, [messages]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-        timestamp: new Date().toLocaleTimeString()\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    if (recipient) {\n-      setRecipientName(recipient.name);\n-      setCurrentReceiverId(recipient.id);\n-    }\n-    setMessages([]); // Clear messages when a new chat is selected\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"fixed bottom-0 right-0 w-full md:w-[320px] lg:w-[360px] h-[80vh] bg-[#ECE3D4] border border-[#D8C7A9] flex flex-col shadow-lg\">\n-      <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n-        <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n-        <input\n-          type=\"text\"\n-          placeholder=\"Buscar chats...\"\n-          className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-        />\n-      </div>\n-      <div className=\"flex-1 overflow-y-auto\">\n-        {chatPreviews.length === 0 ? (\n-          <p className=\"text-center text-[#042637]\">No chats available.</p>\n-        ) : (\n-          chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-              onClick={() => handleChatClick(chat)}\n-            >\n-              <div className=\"relative mr-3\">\n-                <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id)?.name || 'Desconocido'}</h2>\n-              </div>\n-            </div>\n-          ))\n-        )}\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\" style={{ position: 'sticky', top: 0, zIndex: 10 }}>\n-          {activeChat ? (\n-            <div>\n-              <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n-              <p className=\"text-sm text-[#042637]\">Última conexión: hace 5 minutos</p>\n-            </div>\n-          ) : (\n-            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n-          )}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {activeChat ? (\n-            messages.length === 0 ? (\n-              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n-            ) : (\n-              messages.map((msg, idx) => (\n-                <div\n-                  key={idx}\n-                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-                >\n-                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                    <p className=\"text-sm\">{msg.content}</p>\n-                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n-                  </div>\n-                </div>\n-              ))\n-            )\n-          ) : (\n-            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n-          )}\n-          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n-          <div ref={messagesEndRef} />\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              <FontAwesomeIcon icon={faPaperPlane} />\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n-'use client';\n-\n-import React, { useState, useEffect, useRef } from 'react';\n-import dynamic from 'next/dynamic';\n-import io from 'socket.io-client';\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n-\n-const FbMessengerSimple = ({ receiverId }) => {\n-  const [user, setUser] = useState(null);\n-  const [activeChat, setActiveChat] = useState(null);\n-  const [message, setMessage] = useState('');\n-  const [messages, setMessages] = useState([]);\n-  const [chatPreviews, setChatPreviews] = useState([]);\n-  const [recipientName, setRecipientName] = useState('');\n-  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\n-  const [isTyping, setIsTyping] = useState(false);\n-  const socket = useRef(null);\n-  const messagesEndRef = useRef(null);\n-\n-  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n-\n-  useEffect(() => {\n-    const fetchProfile = async () => {\n-      if (!token) {\n-        setIsAuthenticated(false);\n-        return;\n-      }\n-\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.user) {\n-          setUser({ ...data.user, type: 'user' });\n-          setIsAuthenticated(true);\n-        } else if (data.charity) {\n-          setUser({ ...data.charity, type: 'charity' });\n-          setIsAuthenticated(true);\n-        } else {\n-          throw new Error('Profile not found');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setIsAuthenticated(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, [token]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setChatPreviews(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchChatPreviews();\n-  }, [user, token]);\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return;\n-\n-    socket.current = io('http://localhost:3001', {\n-      auth: {\n-        token: localStorage.getItem('authToken')\n-      }\n-    });\n-\n-    socket.current.emit('joinRoom', activeChat.id);\n-\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n-          headers: {\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        setMessages(data);\n-      } catch (error) {\n-        console.error('Error:', error);\n-      }\n-    };\n-\n-    fetchMessages();\n-\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message]);\n-    };\n-    socket.current.on('receiveMessage', handleReceiveMessage);\n-\n-    const handleTyping = () => {\n-      setIsTyping(true);\n-      setTimeout(() => setIsTyping(false), 2000);\n-    };\n-    socket.current.on('typing', handleTyping);\n-\n-    return () => {\n-      socket.current.emit('leaveRoom', activeChat.id);\n-      socket.current.off('receiveMessage', handleReceiveMessage);\n-      socket.current.off('typing', handleTyping);\n-    };\n-  }, [activeChat, user, token]);\n-\n-  useEffect(() => {\n-    if (messagesEndRef.current) {\n-      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n-    }\n-  }, [messages]);\n-\n-  const handleSend = () => {\n-    if (!activeChat) {\n-      console.error('No active chat selected');\n-      return;\n-    }\n-\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: currentReceiverId,\n-        content: message,\n-        chatId: activeChat.id,\n-        timestamp: new Date().toLocaleTimeString()\n-      };\n-      socket.current.emit('sendMessage', newMessage);\n-      setMessage('');\n-    }\n-  };\n-\n-  const handleChatClick = (chat) => {\n-    setActiveChat(chat);\n-    const recipient = chat.participants.find(participant => participant.id !== user.id);\n-    if (recipient) {\n-      setRecipientName(recipient.name);\n-      setCurrentReceiverId(recipient.id);\n-    }\n-    setMessages([]); // Clear messages when a new chat is selected\n-  };\n-\n-  if (!isAuthenticated) {\n-    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n-  }\n-\n-  return (\n-    <div className=\"fixed bottom-0 right-0 w-full md:w-[400px] lg:w-[450px] h-[60vh] bg-[#ECE3D4] border border-[#D8C7A9] flex flex-col shadow-lg\">\n-      <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n-        <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n-        <input\n-          type=\"text\"\n-          placeholder=\"Buscar chats...\"\n-          className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-        />\n-      </div>\n-      <div className=\"flex-1 overflow-y-auto\">\n-        {chatPreviews.length === 0 ? (\n-          <p className=\"text-center text-[#042637]\">No chats available.</p>\n-        ) : (\n-          chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n-              onClick={() => handleChatClick(chat)}\n-            >\n-              <div className=\"relative mr-3\">\n-                <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id)?.name || 'Desconocido'}</h2>\n-              </div>\n-            </div>\n-          ))\n-        )}\n-      </div>\n-\n-      <div className=\"flex-1 flex flex-col\">\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\" style={{ position: 'sticky', top: 0, zIndex: 10 }}>\n-          {activeChat ? (\n-            <div>\n-              <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n-              <p className=\"text-sm text-[#042637]\">Última conexión: hace 5 minutos</p>\n-            </div>\n-          ) : (\n-            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n-          )}\n-        </div>\n-\n-        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-          {activeChat ? (\n-            messages.length === 0 ? (\n-              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n-            ) : (\n-              messages.map((msg, idx) => (\n-                <div\n-                  key={idx}\n-                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n-                >\n-                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n-                    <p className=\"text-sm\">{msg.content}</p>\n-                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n-                  </div>\n-                </div>\n-              ))\n-            )\n-          ) : (\n-            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n-          )}\n-          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n-          <div ref={messagesEndRef} />\n-        </div>\n-\n-        <div className=\"p-4 bg-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Escribe un mensaje...\"\n-              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n-            />\n-            <button\n-              onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n-            >\n-              <FontAwesomeIcon icon={faPaperPlane} />\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732156233487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,9 @@\n               className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n             />\n             <button\n               onClick={handleSend}\n-              className=\"ml-3 text-white p-3 rounded-full bg-[#042637] hover:bg-[#D8C7A9] transition-colors\"\n+              className=\"ml-3 text-white p-3 rounded-full bg-[red] hover:bg-[#D8C7A9] transition-colors\"\n             >\n               <FontAwesomeIcon icon={faPaperPlane} />\n             </button>\n           </div>\n"
                },
                {
                    "date": 1732156257634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,264 @@\n+'use client';\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import dynamic from 'next/dynamic';\n+import io from 'socket.io-client';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faUser, faPaperPlane, faSearch } from '@fortawesome/free-solid-svg-icons';\n+\n+const FbMessengerSimple = ({ receiverId }) => {\n+  const [user, setUser] = useState(null);\n+  const [activeChat, setActiveChat] = useState(null);\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [chatPreviews, setChatPreviews] = useState([]);\n+  const [recipientName, setRecipientName] = useState('');\n+  const [currentReceiverId, setCurrentReceiverId] = useState(receiverId);\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\n+  const [isTyping, setIsTyping] = useState(false);\n+  const socket = useRef(null);\n+  const messagesEndRef = useRef(null);\n+\n+  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;\n+\n+  useEffect(() => {\n+    const fetchProfile = async () => {\n+      if (!token) {\n+        setIsAuthenticated(false);\n+        return;\n+      }\n+\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.user) {\n+          setUser({ ...data.user, type: 'user' });\n+          setIsAuthenticated(true);\n+        } else if (data.charity) {\n+          setUser({ ...data.charity, type: 'charity' });\n+          setIsAuthenticated(true);\n+        } else {\n+          throw new Error('Profile not found');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setIsAuthenticated(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, [token]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setChatPreviews(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchChatPreviews();\n+  }, [user, token]);\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return;\n+\n+    socket.current = io('http://localhost:3001', {\n+      auth: {\n+        token: localStorage.getItem('authToken')\n+      }\n+    });\n+\n+    socket.current.emit('joinRoom', activeChat.id);\n+\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?chatId=${activeChat.id}`, {\n+          headers: {\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        setMessages(data);\n+      } catch (error) {\n+        console.error('Error:', error);\n+      }\n+    };\n+\n+    fetchMessages();\n+\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message]);\n+    };\n+    socket.current.on('receiveMessage', handleReceiveMessage);\n+\n+    const handleTyping = () => {\n+      setIsTyping(true);\n+      setTimeout(() => setIsTyping(false), 2000);\n+    };\n+    socket.current.on('typing', handleTyping);\n+\n+    return () => {\n+      socket.current.emit('leaveRoom', activeChat.id);\n+      socket.current.off('receiveMessage', handleReceiveMessage);\n+      socket.current.off('typing', handleTyping);\n+    };\n+  }, [activeChat, user, token]);\n+\n+  useEffect(() => {\n+    if (messagesEndRef.current) {\n+      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n+    }\n+  }, [messages]);\n+\n+  const handleSend = () => {\n+    if (!activeChat) {\n+      console.error('No active chat selected');\n+      return;\n+    }\n+\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: currentReceiverId,\n+        content: message,\n+        chatId: activeChat.id,\n+        timestamp: new Date().toLocaleTimeString()\n+      };\n+      socket.current.emit('sendMessage', newMessage);\n+      setMessage('');\n+    }\n+  };\n+\n+  const handleChatClick = (chat) => {\n+    setActiveChat(chat);\n+    const recipient = chat.participants.find(participant => participant.id !== user.id);\n+    if (recipient) {\n+      setRecipientName(recipient.name);\n+      setCurrentReceiverId(recipient.id);\n+    }\n+    setMessages([]); // Clear messages when a new chat is selected\n+  };\n+\n+  if (!isAuthenticated) {\n+    return <div className=\"flex h-screen items-center justify-center bg-[#ECE3D4]\"><p className=\"text-2xl text-[#042637]\">Es obligatorio iniciar sesión para acceder a esta vista.</p></div>;\n+  }\n+\n+  return (\n+    <div className=\"flex h-[90vh] bg-[#ECE3D4]\">\n+      <div className=\"w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex items-center\">\n+          <FontAwesomeIcon icon={faSearch} className=\"w-5 h-5 text-[#042637] mr-2\" />\n+          <input\n+            type=\"text\"\n+            placeholder=\"Buscar chats...\"\n+            className=\"w-full p-2 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+          />\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.length === 0 ? (\n+            <p className=\"text-center text-[#042637]\">No chats available.</p>\n+          ) : (\n+            chatPreviews.map((chat) => (\n+              <div\n+                key={chat.id}\n+                className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\n+                onClick={() => handleChatClick(chat)}\n+              >\n+                <div className=\"relative mr-3\">\n+                  <FontAwesomeIcon icon={faUser} className=\"w-12 h-12 text-[#042637]\" />\n+                </div>\n+                <div className=\"flex-1 min-w-0\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.participants.find(participant => participant.id !== user.id)?.name || 'Desconocido'}</h2>\n+                </div>\n+              </div>\n+            ))\n+          )}\n+        </div>\n+      </div>\n+\n+      <div className=\"flex-1 flex flex-col\">\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\" style={{ position: 'sticky', top: 0, zIndex: 10 }}>\n+          {activeChat ? (\n+            <div>\n+              <h2 className=\"font-semibold text-[#042637]\">{recipientName}</h2>\n+              <p className=\"text-sm text-[#042637]\">Última conexión: hace 5 minutos</p>\n+            </div>\n+          ) : (\n+            <h2 className=\"font-semibold text-[#042637]\">Selecciona un chat</h2>\n+          )}\n+        </div>\n+\n+        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+          {activeChat ? (\n+            messages.length === 0 ? (\n+              <p className=\"text-center text-[#042637]\">No hay mensajes aún.</p>\n+            ) : (\n+              messages.map((msg, idx) => (\n+                <div\n+                  key={idx}\n+                  className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n+                >\n+                  <div className={`flex items-center max-w-xs ${msg.senderId === user.id ? 'bg-[#A8E6CF] text-white' : 'bg-[#E1DDBF]'} p-3 rounded-lg`}>\n+                    <p className=\"text-sm\">{msg.content}</p>\n+                    <span className=\"text-xs ml-2\">{msg.timestamp}</span>\n+                  </div>\n+                </div>\n+              ))\n+            )\n+          ) : (\n+            <p className=\"text-center text-[#042637]\">Selecciona un chat para empezar a chatear.</p>\n+          )}\n+          {isTyping && <p className=\"text-center text-[#042637]\">El usuario está escribiendo...</p>}\n+          <div ref={messagesEndRef} />\n+        </div>\n+\n+        <div className=\"p-4 bg-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Escribe un mensaje...\"\n+              className=\"w-full p-3 rounded-lg bg-white text-[#042637] border-none focus:outline-none\"\n+            />\n+            <button\n+              onClick={handleSend}\n+              className=\"ml-3 text-white p-3 rounded-full bg-[white] hover:bg-[#D8C7A9] transition-colors\"\n+            >\n+              <FontAwesomeIcon icon={faPaperPlane} />\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default dynamic(() => Promise.resolve(FbMessengerSimple), { ssr: false });\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731385961299,
            "name": "Commit-0",
            "content": "'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\nimport io from 'socket.io-client'\n\nconst socket = io('http://localhost:3001')\n\nconst FbMessengerComplete = ({ user, receiverId }) => {\n  const [activeChat, setActiveChat] = useState(null)\n  const [message, setMessage] = useState('')\n  const [messages, setMessages] = useState([])\n  const [chatPreviews, setChatPreviews] = useState([])\n  const [showChatList, setShowChatList] = useState(true)\n  const [showSidebar, setShowSidebar] = useState(false)\n\n  useEffect(() => {\n    if (!user) return\n\n    // Fetch initial chat previews\n    const fetchChatPreviews = async () => {\n      try {\n        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n        if (!res.ok) {\n          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n        }\n        const data = await res.json()\n        setChatPreviews(data)\n      } catch (error) {\n        console.error('Error:', error)\n      }\n    }\n\n    fetchChatPreviews()\n  }, [user])\n\n  useEffect(() => {\n    if (!user || !receiverId) return\n\n    // Crear un nuevo chat si se proporciona un receiverId\n    const createChat = async () => {\n      try {\n        const res = await fetch('http://localhost:3001/chats', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ userId: user.id, receiverId })\n        })\n        if (!res.ok) {\n          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n        }\n        const newChat = await res.json()\n        setActiveChat(newChat)\n      } catch (error) {\n        console.error('Error:', error)\n      }\n    }\n\n    createChat()\n  }, [receiverId, user])\n\n  useEffect(() => {\n    if (!user || !activeChat) return\n\n    // Unirse a la sala específica del usuario\n    socket.emit('joinRoom', activeChat._id)\n\n    // Fetch initial messages for the active chat\n    const fetchMessages = async () => {\n      try {\n        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n        if (!res.ok) {\n          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n        }\n        const data = await res.json()\n        setMessages(data)\n      } catch (error) {\n        console.error('Error:', error)\n      }\n    }\n\n    fetchMessages()\n\n    // Escuchar mensajes recibidos\n    const handleReceiveMessage = (message) => {\n      setMessages((prevMessages) => [...prevMessages, message])\n    }\n    socket.on('receiveMessage', handleReceiveMessage)\n\n    // Limpiar el evento cuando el componente se desmonta\n    return () => {\n      socket.emit('leaveRoom', activeChat._id)\n      socket.off('receiveMessage', handleReceiveMessage)\n    }\n  }, [activeChat, user])\n\n  const handleSend = () => {\n    if (message.trim()) {\n      const newMessage = {\n        senderId: user.id,\n        receiverId: activeChat._id,\n        text: message,\n      }\n      socket.emit('sendMessage', newMessage)\n      setMessages([...messages, newMessage])\n      setMessage('')\n    }\n  }\n\n  const toggleChatList = () => {\n    setShowChatList(!showChatList)\n  }\n\n  const toggleSidebar = () => {\n    setShowSidebar(!showSidebar)\n  }\n\n  return (\n    <div className=\"flex h-screen bg-[#ECE3D4]\">\n      {/* Lista de chats */}\n      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n        <div className=\"p-4 bg-[#D8C7A9]\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n            <div className=\"flex space-x-2\">\n              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n                <MoreHorizontal size={20} />\n                <span className=\"sr-only\">Más opciones</span>\n              </button>\n              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n                <Edit size={20} />\n                <span className=\"sr-only\">Nuevo mensaje</span>\n              </button>\n            </div>\n          </div>\n          <div className=\"relative\">\n            <input\n              type=\"text\"\n              placeholder=\"Buscar en Messenger\"\n              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n            />\n            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n          </div>\n        </div>\n        <div className=\"flex-1 overflow-y-auto\">\n          {chatPreviews.map((chat) => (\n            <div\n              key={chat._id}\n              className={`flex items-center p-3 cursor-pointer transition-colors ${\n                activeChat && activeChat._id === chat._id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n              }`}\n              onClick={() => {\n                setActiveChat(chat)\n                if (window.innerWidth < 768) {\n                  setShowChatList(false)\n                }\n              }}\n            >\n              <div className=\"relative mr-3\">\n                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n                {chat.isActive && (\n                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n                )}\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex justify-between items-baseline\">\n                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n                </div>\n                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n              </div>\n              {chat.unread > 0 && (\n                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n                  {chat.unread}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Ventana de chat activa */}\n      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n          <div className=\"flex items-center\">\n            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n              <ArrowLeft size={20} />\n              <span className=\"sr-only\">Volver a la lista de chats</span>\n            </button>\n            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n            <div>\n              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n            </div>\n          </div>\n          <div className=\"flex space-x-2\">\n            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n              <Phone size={20} />\n              <span className=\"sr-only\">Llamada de voz</span>\n            </button>\n            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n              <Video size={20} />\n              <span className=\"sr-only\">Videollamada</span>\n            </button>\n            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\" onClick={toggleSidebar}>\n              <Info size={20} />\n              <span className=\"sr-only\">Información del chat</span>\n            </button>\n          </div>\n        </div>\n        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n          {messages.map((msg) => (\n            <div key={msg.id} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n              <div className={`inline-block p-3 rounded-lg ${msg.sender === 'user' ? 'bg-[#D8C7A9]' : 'bg-[#E1DDBF]'}`}>\n                <p className=\"text-[#042637]\">{msg.content}</p>\n                <p className=\"text-xs text-[#042637]/70 mt-1\">{msg.timestamp}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n              <Smile size={20} />\n              <span className=\"sr-only\">Emojis</span>\n            </button>\n            <input\n              type=\"text\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder=\"Aa\"\n              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n            />\n            <div className=\"flex space-x-2 mr-2\">\n              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n                <Paperclip size={20} />\n                <span className=\"sr-only\">Adjuntar archivo</span>\n              </button>\n              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n                <Image size={20} />\n                <span className=\"sr-only\">Adjuntar imagen</span>\n              </button>\n              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n                <ThumbsUp size={20} />\n                <span className=\"sr-only\">Me gusta</span>\n              </button>\n            </div>\n            <button\n              className={`p-2 rounded-full transition-colors ${\n                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n              }`}\n              onClick={handleSend}\n              disabled={!message.trim()}\n            >\n              <Send size={20} />\n              <span className=\"sr-only\">Enviar mensaje</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Barra lateral de información */}\n      <div className={`w-64 bg-[#ECE3D4] border-l border-[#D8C7A9] ${showSidebar ? 'block' : 'hidden'}`}>\n        <div className=\"p-4\">\n          <h2 className=\"text-lg font-semibold text-[#042637] mb-4\">Información del chat</h2>\n          {activeChat && (\n            <>\n              <img src={activeChat.avatar} alt=\"\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n              <h3 className=\"text-center font-semibold text-[#042637] mb-2\">{activeChat.name}</h3>\n              <p className=\"text-center text-sm text-[#042637]/70 mb-4\">Activo hace 5 minutos</p>\n            </>\n          )}\n          <div className=\"space-y-2\">\n            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n              Ver archivos compartidos\n            </button>\n            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n              Ver fotos compartidas\n            </button>\n            <button className=\"w-full text-left text-[#042637] hover:bg-[#D8C7A9] p-2 rounded transition-colors\">\n              Buscar en la conversación\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false });"
        }
    ]
}