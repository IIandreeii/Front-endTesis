{
    "sourceFile": "src/components/component/fb-messenger-improved.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1731381791709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731381914842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,239 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+export function FbMessengerImproved({ user }) {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+\n+  useEffect(() => {\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user.id])\n+\n+  useEffect(() => {\n+    if (activeChat) {\n+      // Unirse a la sala específica del usuario\n+      socket.emit('joinRoom', activeChat.id)\n+\n+      // Fetch initial messages for the active chat\n+      const fetchMessages = async () => {\n+        try {\n+          const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n+          if (!res.ok) {\n+            throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+          }\n+          const data = await res.json()\n+          setMessages(data)\n+        } catch (error) {\n+          console.error('Error:', error)\n+        }\n+      }\n+\n+      fetchMessages()\n+\n+      // Escuchar mensajes recibidos\n+      const handleReceiveMessage = (message) => {\n+        setMessages((prevMessages) => [...prevMessages, message])\n+      }\n+      socket.on('receiveMessage', handleReceiveMessage)\n+\n+      // Limpiar el evento cuando el componente se desmonta\n+      return () => {\n+        socket.emit('leaveRoom', activeChat.id)\n+        socket.off('receiveMessage', handleReceiveMessage)\n+      }\n+    }\n+  }, [activeChat, user.id])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat.id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Settings size={20} />\n+              <span className=\"sr-only\">Configuración</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg, index) => (\n+            <div\n+              key={index}\n+              className={`max-w-[70%] p-3 rounded-lg ${\n+                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n+              }`}\n+            >\n+              <p className=\"text-[#042637]\">{msg.text}</p>\n+            </div>\n+          ))}\n+          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731382089885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,244 +235,5 @@\n         </div>\n       </div>\n     </div>\n   )\n-}\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-export function FbMessengerImproved({ user }) {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-\n-  useEffect(() => {\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [])\n-\n-  useEffect(() => {\n-    if (activeChat) {\n-      // Unirse a la sala específica del usuario\n-      socket.emit('joinRoom', activeChat.id)\n-\n-      // Fetch initial messages for the active chat\n-      const fetchMessages = async () => {\n-        try {\n-          const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n-          if (!res.ok) {\n-            throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-          }\n-          const data = await res.json()\n-          setMessages(data)\n-        } catch (error) {\n-          console.error('Error:', error)\n-        }\n-      }\n-\n-      fetchMessages()\n-\n-      // Escuchar mensajes recibidos\n-      const handleReceiveMessage = (message) => {\n-        setMessages((prevMessages) => [...prevMessages, message])\n-      }\n-      socket.on('receiveMessage', handleReceiveMessage)\n-\n-      // Limpiar el evento cuando el componente se desmonta\n-      return () => {\n-        socket.emit('leaveRoom', activeChat.id)\n-        socket.off('receiveMessage', handleReceiveMessage)\n-      }\n-    }\n-  }, [activeChat, user.id])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat.id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Settings size={20} />\n-              <span className=\"sr-only\">Configuración</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg, index) => (\n-            <div\n-              key={index}\n-              className={`max-w-[70%] p-3 rounded-lg ${\n-                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n-              }`}\n-            >\n-              <p className=\"text-[#042637]\">{msg.text}</p>\n-            </div>\n-          ))}\n-          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731382359878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import io from 'socket.io-client'\n \n const socket = io('http://localhost:3001')\n \n-export function FbMessengerImproved({ user }) {\n+const FbMessengerImproved = ({ user }) => {\n   const [activeChat, setActiveChat] = useState(null)\n   const [message, setMessage] = useState('')\n   const [messages, setMessages] = useState([])\n   const [chatPreviews, setChatPreviews] = useState([])\n@@ -235,5 +235,7 @@\n         </div>\n       </div>\n     </div>\n   )\n-}\n\\ No newline at end of file\n+}\n+\n+export default FbMessengerImproved;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731382673460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,269 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import { useRouter } from 'next/router'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerImproved = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+  const router = useRouter()\n+\n+  useEffect(() => {\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user.id])\n+\n+  useEffect(() => {\n+    if (receiverId) {\n+      // Crear un nuevo chat si se proporciona un receiverId\n+      const createChat = async () => {\n+        try {\n+          const res = await fetch('http://localhost:3001/chats', {\n+            method: 'POST',\n+            headers: {\n+              'Content-Type': 'application/json'\n+            },\n+            body: JSON.stringify({ userId: user.id, receiverId })\n+          })\n+          if (!res.ok) {\n+            throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+          }\n+          const newChat = await res.json()\n+          setActiveChat(newChat)\n+        } catch (error) {\n+          console.error('Error:', error)\n+        }\n+      }\n+\n+      createChat()\n+    }\n+  }, [receiverId, user.id])\n+\n+  useEffect(() => {\n+    if (activeChat) {\n+      // Unirse a la sala específica del usuario\n+      socket.emit('joinRoom', activeChat.id)\n+\n+      // Fetch initial messages for the active chat\n+      const fetchMessages = async () => {\n+        try {\n+          const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n+          if (!res.ok) {\n+            throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+          }\n+          const data = await res.json()\n+          setMessages(data)\n+        } catch (error) {\n+          console.error('Error:', error)\n+        }\n+      }\n+\n+      fetchMessages()\n+\n+      // Escuchar mensajes recibidos\n+      const handleReceiveMessage = (message) => {\n+        setMessages((prevMessages) => [...prevMessages, message])\n+      }\n+      socket.on('receiveMessage', handleReceiveMessage)\n+\n+      // Limpiar el evento cuando el componente se desmonta\n+      return () => {\n+        socket.emit('leaveRoom', activeChat.id)\n+        socket.off('receiveMessage', handleReceiveMessage)\n+      }\n+    }\n+  }, [activeChat, user.id])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat.id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Settings size={20} />\n+              <span className=\"sr-only\">Configuración</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg, index) => (\n+            <div\n+              key={index}\n+              className={`max-w-[70%] p-3 rounded-lg ${\n+                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n+              }`}\n+            >\n+              <p className=\"text-[#042637]\">{msg.text}</p>\n+            </div>\n+          ))}\n+          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default FbMessengerImproved;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731383109544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,271 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import { useRouter } from 'next/router'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerImproved = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+  const router = useRouter()\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat.id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat.id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat.id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Settings size={20} />\n+              <span className=\"sr-only\">Configuración</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg, index) => (\n+            <div\n+              key={index}\n+              className={`max-w-[70%] p-3 rounded-lg ${\n+                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n+              }`}\n+            >\n+              <p className=\"text-[#042637]\">{msg.text}</p>\n+            </div>\n+          ))}\n+          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default FbMessengerImproved;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731383189261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,515 +267,5 @@\n     </div>\n   )\n }\n \n-export default FbMessengerImproved;\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import { useRouter } from 'next/router'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerImproved = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-  const router = useRouter()\n-\n-  useEffect(() => {\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user.id])\n-\n-  useEffect(() => {\n-    if (receiverId) {\n-      // Crear un nuevo chat si se proporciona un receiverId\n-      const createChat = async () => {\n-        try {\n-          const res = await fetch('http://localhost:3001/chats', {\n-            method: 'POST',\n-            headers: {\n-              'Content-Type': 'application/json'\n-            },\n-            body: JSON.stringify({ userId: user.id, receiverId })\n-          })\n-          if (!res.ok) {\n-            throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-          }\n-          const newChat = await res.json()\n-          setActiveChat(newChat)\n-        } catch (error) {\n-          console.error('Error:', error)\n-        }\n-      }\n-\n-      createChat()\n-    }\n-  }, [receiverId, user.id])\n-\n-  useEffect(() => {\n-    if (activeChat) {\n-      // Unirse a la sala específica del usuario\n-      socket.emit('joinRoom', activeChat.id)\n-\n-      // Fetch initial messages for the active chat\n-      const fetchMessages = async () => {\n-        try {\n-          const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n-          if (!res.ok) {\n-            throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-          }\n-          const data = await res.json()\n-          setMessages(data)\n-        } catch (error) {\n-          console.error('Error:', error)\n-        }\n-      }\n-\n-      fetchMessages()\n-\n-      // Escuchar mensajes recibidos\n-      const handleReceiveMessage = (message) => {\n-        setMessages((prevMessages) => [...prevMessages, message])\n-      }\n-      socket.on('receiveMessage', handleReceiveMessage)\n-\n-      // Limpiar el evento cuando el componente se desmonta\n-      return () => {\n-        socket.emit('leaveRoom', activeChat.id)\n-        socket.off('receiveMessage', handleReceiveMessage)\n-      }\n-    }\n-  }, [activeChat, user.id])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat.id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Settings size={20} />\n-              <span className=\"sr-only\">Configuración</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg, index) => (\n-            <div\n-              key={index}\n-              className={`max-w-[70%] p-3 rounded-lg ${\n-                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n-              }`}\n-            >\n-              <p className=\"text-[#042637]\">{msg.text}</p>\n-            </div>\n-          ))}\n-          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default FbMessengerImproved;\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerImproved = ({ user }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-\n-  useEffect(() => {\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user.id])\n-\n-  useEffect(() => {\n-    if (activeChat) {\n-      // Unirse a la sala específica del usuario\n-      socket.emit('joinRoom', activeChat.id)\n-\n-      // Fetch initial messages for the active chat\n-      const fetchMessages = async () => {\n-        try {\n-          const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n-          if (!res.ok) {\n-            throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-          }\n-          const data = await res.json()\n-          setMessages(data)\n-        } catch (error) {\n-          console.error('Error:', error)\n-        }\n-      }\n-\n-      fetchMessages()\n-\n-      // Escuchar mensajes recibidos\n-      const handleReceiveMessage = (message) => {\n-        setMessages((prevMessages) => [...prevMessages, message])\n-      }\n-      socket.on('receiveMessage', handleReceiveMessage)\n-\n-      // Limpiar el evento cuando el componente se desmonta\n-      return () => {\n-        socket.emit('leaveRoom', activeChat.id)\n-        socket.off('receiveMessage', handleReceiveMessage)\n-      }\n-    }\n-  }, [activeChat, user.id])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat.id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Settings size={20} />\n-              <span className=\"sr-only\">Configuración</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg, index) => (\n-            <div\n-              key={index}\n-              className={`max-w-[70%] p-3 rounded-lg ${\n-                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n-              }`}\n-            >\n-              <p className=\"text-[#042637]\">{msg.text}</p>\n-            </div>\n-          ))}\n-          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n export default FbMessengerImproved;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731383271631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,270 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerImproved = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat.id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat.id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat.id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Settings size={20} />\n+              <span className=\"sr-only\">Configuración</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg, index) => (\n+            <div\n+              key={index}\n+              className={`max-w-[70%] p-3 rounded-lg ${\n+                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n+              }`}\n+            >\n+              <p className=\"text-[#042637]\">{msg.text}</p>\n+            </div>\n+          ))}\n+          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerImproved), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731383386765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,277 +1,8 @@\n 'use client'\n \n import React, { useState, useEffect } from 'react'\n import dynamic from 'next/dynamic'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerImproved = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat.id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat.id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat.id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Settings size={20} />\n-              <span className=\"sr-only\">Configuración</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg, index) => (\n-            <div\n-              key={index}\n-              className={`max-w-[70%] p-3 rounded-lg ${\n-                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n-              }`}\n-            >\n-              <p className=\"text-[#042637]\">{msg.text}</p>\n-            </div>\n-          ))}\n-          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerImproved), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n import { useRouter } from 'next/router'\n import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n import io from 'socket.io-client'\n \n@@ -537,5 +268,5 @@\n     </div>\n   )\n }\n \n-export default FbMessengerImproved;\n\\ No newline at end of file\n+export default dynamic(() => Promise.resolve(FbMessengerImproved), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731383401960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,272 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { useRouter } from 'next/router'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerImproved = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+  const router = useRouter()\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat.id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat.id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat.id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Settings size={20} />\n+              <span className=\"sr-only\">Configuración</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg, index) => (\n+            <div\n+              key={index}\n+              className={`max-w-[70%] p-3 rounded-lg ${\n+                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n+              }`}\n+            >\n+              <p className=\"text-[#042637]\">{msg.text}</p>\n+            </div>\n+          ))}\n+          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerImproved), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731383455538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,272 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { useRouter } from 'next/router'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerImproved = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat.id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat.id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat.id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Settings size={20} />\n+              <span className=\"sr-only\">Configuración</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg, index) => (\n+            <div\n+              key={index}\n+              className={`max-w-[70%] p-3 rounded-lg ${\n+                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n+              }`}\n+            >\n+              <p className=\"text-[#042637]\">{msg.text}</p>\n+            </div>\n+          ))}\n+          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerImproved), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731383549379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,270 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerImproved = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat.id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat.id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat.id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Settings size={20} />\n+              <span className=\"sr-only\">Configuración</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg, index) => (\n+            <div\n+              key={index}\n+              className={`max-w-[70%] p-3 rounded-lg ${\n+                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n+              }`}\n+            >\n+              <p className=\"text-[#042637]\">{msg.text}</p>\n+            </div>\n+          ))}\n+          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerImproved), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731383666588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,821 +266,5 @@\n     </div>\n   )\n }\n \n-export default dynamic(() => Promise.resolve(FbMessengerImproved), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import { useRouter } from 'next/router'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerImproved = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat.id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat.id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat.id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Settings size={20} />\n-              <span className=\"sr-only\">Configuración</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg, index) => (\n-            <div\n-              key={index}\n-              className={`max-w-[70%] p-3 rounded-lg ${\n-                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n-              }`}\n-            >\n-              <p className=\"text-[#042637]\">{msg.text}</p>\n-            </div>\n-          ))}\n-          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerImproved), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import { useRouter } from 'next/router'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerImproved = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-  const router = useRouter()\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat.id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat.id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat.id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Settings size={20} />\n-              <span className=\"sr-only\">Configuración</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg, index) => (\n-            <div\n-              key={index}\n-              className={`max-w-[70%] p-3 rounded-lg ${\n-                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n-              }`}\n-            >\n-              <p className=\"text-[#042637]\">{msg.text}</p>\n-            </div>\n-          ))}\n-          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerImproved), { ssr: false });\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import { useRouter } from 'next/router'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerImproved = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-  const router = useRouter()\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat.id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat.id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat.id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Settings size={20} />\n-              <span className=\"sr-only\">Configuración</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg, index) => (\n-            <div\n-              key={index}\n-              className={`max-w-[70%] p-3 rounded-lg ${\n-                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n-              }`}\n-            >\n-              <p className=\"text-[#042637]\">{msg.text}</p>\n-            </div>\n-          ))}\n-          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n export default dynamic(() => Promise.resolve(FbMessengerImproved), { ssr: false });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731385736477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,270 @@\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerImproved = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat._id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat._id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat._id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat._id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat._id === chat._id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Settings size={20} />\n+              <span className=\"sr-only\">Configuración</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg, index) => (\n+            <div\n+              key={index}\n+              className={`max-w-[70%] p-3 rounded-lg ${\n+                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n+              }`}\n+            >\n+              <p className=\"text-[#042637]\">{msg.text}</p>\n+            </div>\n+          ))}\n+          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerImproved), { ssr: false });\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731381791709,
            "name": "Commit-0",
            "content": "'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\nimport io from 'socket.io-client'\n\nconst socket = io('http://localhost:3001')\n\nexport function FbMessengerImproved({ user }) {\n  const [activeChat, setActiveChat] = useState(null)\n  const [message, setMessage] = useState('')\n  const [messages, setMessages] = useState([])\n  const [chatPreviews, setChatPreviews] = useState([])\n  const [showChatList, setShowChatList] = useState(true)\n\n  useEffect(() => {\n    // Fetch initial chat previews\n    const fetchChatPreviews = async () => {\n      try {\n        const res = await fetch('http://localhost:3001/chats', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n        if (!res.ok) {\n          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n        }\n        const data = await res.json()\n        setChatPreviews(data)\n      } catch (error) {\n        console.error('Error:', error)\n      }\n    }\n\n    fetchChatPreviews()\n  }, [])\n\n  useEffect(() => {\n    if (activeChat) {\n      // Unirse a la sala específica del usuario\n      socket.emit('joinRoom', activeChat.id)\n\n      // Fetch initial messages for the active chat\n      const fetchMessages = async () => {\n        try {\n          const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n          if (!res.ok) {\n            throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n          }\n          const data = await res.json()\n          setMessages(data)\n        } catch (error) {\n          console.error('Error:', error)\n        }\n      }\n\n      fetchMessages()\n\n      // Escuchar mensajes recibidos\n      const handleReceiveMessage = (message) => {\n        setMessages((prevMessages) => [...prevMessages, message])\n      }\n      socket.on('receiveMessage', handleReceiveMessage)\n\n      // Limpiar el evento cuando el componente se desmonta\n      return () => {\n        socket.emit('leaveRoom', activeChat.id)\n        socket.off('receiveMessage', handleReceiveMessage)\n      }\n    }\n  }, [activeChat, user.id])\n\n  const handleSend = () => {\n    if (message.trim()) {\n      const newMessage = {\n        senderId: user.id,\n        receiverId: activeChat.id,\n        text: message,\n      }\n      socket.emit('sendMessage', newMessage)\n      setMessages([...messages, newMessage])\n      setMessage('')\n    }\n  }\n\n  const toggleChatList = () => {\n    setShowChatList(!showChatList)\n  }\n\n  return (\n    <div className=\"flex h-screen bg-[#ECE3D4]\">\n      {/* Lista de chats */}\n      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n        <div className=\"p-4 bg-[#D8C7A9]\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n            <div className=\"flex space-x-2\">\n              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n                <MoreHorizontal size={20} />\n                <span className=\"sr-only\">Más opciones</span>\n              </button>\n              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n                <Edit size={20} />\n                <span className=\"sr-only\">Nuevo mensaje</span>\n              </button>\n            </div>\n          </div>\n          <div className=\"relative\">\n            <input\n              type=\"text\"\n              placeholder=\"Buscar en Messenger\"\n              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n            />\n            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n          </div>\n        </div>\n        <div className=\"flex-1 overflow-y-auto\">\n          {chatPreviews.map((chat) => (\n            <div\n              key={chat.id}\n              className={`flex items-center p-3 cursor-pointer transition-colors ${\n                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n              }`}\n              onClick={() => {\n                setActiveChat(chat)\n                if (window.innerWidth < 768) {\n                  setShowChatList(false)\n                }\n              }}\n            >\n              <div className=\"relative mr-3\">\n                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n                {chat.isActive && (\n                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n                )}\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex justify-between items-baseline\">\n                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n                </div>\n                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n              </div>\n              {chat.unread > 0 && (\n                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n                  {chat.unread}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Ventana de chat activa */}\n      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n          <div className=\"flex items-center\">\n            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n              <ArrowLeft size={20} />\n              <span className=\"sr-only\">Volver a la lista de chats</span>\n            </button>\n            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n            <div>\n              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n            </div>\n          </div>\n          <div className=\"flex space-x-2\">\n            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n              <Phone size={20} />\n              <span className=\"sr-only\">Llamada de voz</span>\n            </button>\n            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n              <Video size={20} />\n              <span className=\"sr-only\">Videollamada</span>\n            </button>\n            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n              <Settings size={20} />\n              <span className=\"sr-only\">Configuración</span>\n            </button>\n          </div>\n        </div>\n        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n          {messages.map((msg, index) => (\n            <div\n              key={index}\n              className={`max-w-[70%] p-3 rounded-lg ${\n                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n              }`}\n            >\n              <p className=\"text-[#042637]\">{msg.text}</p>\n            </div>\n          ))}\n          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n        </div>\n        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n              <Smile size={20} />\n              <span className=\"sr-only\">Emojis</span>\n            </button>\n            <input\n              type=\"text\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder=\"Aa\"\n              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n            />\n            <div className=\"flex space-x-2 mr-2\">\n              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n                <Paperclip size={20} />\n                <span className=\"sr-only\">Adjuntar archivo</span>\n              </button>\n              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n                <Image size={20} />\n                <span className=\"sr-only\">Adjuntar imagen</span>\n              </button>\n              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n                <ThumbsUp size={20} />\n                <span className=\"sr-only\">Me gusta</span>\n              </button>\n            </div>\n            <button\n              className={`p-2 rounded-full transition-colors ${\n                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n              }`}\n              onClick={handleSend}\n              disabled={!message.trim()}\n            >\n              <Send size={20} />\n              <span className=\"sr-only\">Enviar mensaje</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"
        }
    ]
}