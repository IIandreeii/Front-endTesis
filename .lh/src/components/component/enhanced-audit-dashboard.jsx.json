{
    "sourceFile": "src/components/component/enhanced-audit-dashboard.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1732001831614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732001988656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,266 @@\n+\"use client\";\n+\n+import { useState, useEffect } from 'react';\n+import { useRouter } from 'next/navigation';\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n+import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend, LineChart, Line } from 'recharts';\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n+import { Edit, FileText, Trash2, AlertCircle, Calendar, Clock } from 'lucide-react';\n+import { Badge } from \"@/components/ui/badge\";\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n+\n+const fetchAuditData = async (charityId) => {\n+  const token = localStorage.getItem('authToken');\n+  const res = await fetch(`http://localhost:3001/audits/${charityId}`, {\n+    method: 'GET',\n+    headers: {\n+      'Content-Type': 'application/json',\n+      'Authorization': `Bearer ${token}`\n+    }\n+  });\n+\n+  if (!res.ok) {\n+    throw new Error(`Error fetching audits: ${res.status} ${res.statusText}`);\n+  }\n+\n+  return res.json();\n+};\n+\n+export function EnhancedAuditDashboardComponent() {\n+  const [auditData, setAuditData] = useState([]);\n+  const [timeFilter, setTimeFilter] = useState('all');\n+  const [error, setError] = useState('');\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    const fetchProfileAndAudits = async () => {\n+      const token = localStorage.getItem('authToken');\n+\n+      if (!token) {\n+        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n+        return;\n+      }\n+\n+      try {\n+        const profileRes = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+\n+        if (!profileRes.ok) {\n+          throw new Error(`Error fetching profile: ${profileRes.status} ${profileRes.statusText}`);\n+        }\n+\n+        const profileData = await profileRes.json();\n+\n+        if (profileData.charity && profileData.charity.userType === 'charity') {\n+          const charityId = profileData.charity.id;\n+          const audits = await fetchAuditData(charityId);\n+          setAuditData(audits);\n+        } else {\n+          setError('No autorizado. Solo las organizaciones pueden acceder a esta p√°gina.');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setError('Error fetching profile or audits');\n+      }\n+    };\n+\n+    fetchProfileAndAudits();\n+  }, []);\n+\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\n+\n+  const filteredData = auditData.filter(audit => {\n+    if (timeFilter === 'all') return true;\n+    const date = new Date(audit.timestamp.$date);\n+    const now = new Date();\n+    switch (timeFilter) {\n+      case 'today':\n+        return date.toDateString() === now.toDateString();\n+      case 'week':\n+        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n+        return date > weekAgo;\n+      case 'month':\n+        return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n+      default:\n+        return true;\n+    }\n+  });\n+\n+  const actionCounts = filteredData.reduce((acc, audit) => {\n+    acc[audit.action] = (acc[audit.action] || 0) + 1;\n+    return acc;\n+  }, {});\n+\n+  const pieChartData = Object.entries(actionCounts).map(([name, value]) => ({ name, value }));\n+\n+  const timelineData = filteredData.reduce((acc, audit) => {\n+    const date = new Date(audit.timestamp.$date).toLocaleDateString();\n+    acc[date] = (acc[date] || 0) + 1;\n+    return acc;\n+  }, {});\n+\n+  const lineChartData = Object.entries(timelineData).map(([date, count]) => ({ date, count }));\n+\n+  return (\n+    <div className=\"min-h-screen p-8\" style={{ backgroundColor: '#ECE3D4' }}>\n+      <h1 className=\"text-4xl font-bold mb-8\" style={{ color: '#042637' }}>Enhanced Audit Dashboard</h1>\n+      <div className=\"mb-4\">\n+        <Select value={timeFilter} onValueChange={setTimeFilter}>\n+          <SelectTrigger className=\"w-[180px]\">\n+            <SelectValue placeholder=\"Select time range\" />\n+          </SelectTrigger>\n+          <SelectContent>\n+            <SelectItem value=\"all\">All Time</SelectItem>\n+            <SelectItem value=\"today\">Today</SelectItem>\n+            <SelectItem value=\"week\">This Week</SelectItem>\n+            <SelectItem value=\"month\">This Month</SelectItem>\n+          </SelectContent>\n+        </Select>\n+      </div>\n+      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n+        <TabsList>\n+          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n+          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n+          <TabsTrigger value=\"details\">Audit Details</TabsTrigger>\n+        </TabsList>\n+        <TabsContent value=\"overview\">\n+          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Total Audits</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <div className=\"text-4xl font-bold\" style={{ color: '#042637' }}>{filteredData.length}</div>\n+                <p className=\"text-sm text-muted-foreground\">in selected time range</p>\n+              </CardContent>\n+            </Card>\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Audit Actions</CardTitle>\n+              </CardHeader>\n+              <CardContent className=\"h-[300px]\">\n+                <ResponsiveContainer width=\"100%\" height=\"100%\">\n+                  <PieChart>\n+                    <Pie\n+                      data={pieChartData}\n+                      cx=\"50%\"\n+                      cy=\"50%\"\n+                      labelLine={false}\n+                      outerRadius={80}\n+                      fill=\"#8884d8\"\n+                      dataKey=\"value\"\n+                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n+                    >\n+                      {pieChartData.map((entry, index) => (\n+                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n+                      ))}\n+                    </Pie>\n+                    <Tooltip />\n+                    <Legend />\n+                  </PieChart>\n+                </ResponsiveContainer>\n+              </CardContent>\n+            </Card>\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Recent Activity</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <ul className=\"space-y-2\">\n+                  {filteredData.slice(0, 5).map((audit) => (\n+                    <li key={audit._id.$oid} className=\"flex items-center space-x-2\">\n+                      {audit.action === 'edit' && <Edit size={16} />}\n+                      {audit.action === 'report' && <FileText size={16} />}\n+                      {audit.action === 'delete' && <Trash2 size={16} />}\n+                      <span>{audit.action} - {new Date(audit.timestamp.$date).toLocaleString()}</span>\n+                    </li>\n+                  ))}\n+                </ul>\n+              </CardContent>\n+            </Card>\n+          </div>\n+        </TabsContent>\n+        <TabsContent value=\"timeline\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle>Audit Timeline</CardTitle>\n+              <CardDescription>Number of audits over time</CardDescription>\n+            </CardHeader>\n+            <CardContent className=\"h-[400px]\">\n+              <ResponsiveContainer width=\"100%\" height=\"100%\">\n+                <LineChart data={lineChartData}>\n+                  <XAxis dataKey=\"date\" />\n+                  <YAxis />\n+                  <Tooltip />\n+                  <Line type=\"monotone\" dataKey=\"count\" stroke=\"#042637\" strokeWidth={2} />\n+                </LineChart>\n+              </ResponsiveContainer>\n+            </CardContent>\n+          </Card>\n+        </TabsContent>\n+        <TabsContent value=\"details\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle>Audit Log</CardTitle>\n+              <CardDescription>Detailed view of all audit actions</CardDescription>\n+            </CardHeader>\n+            <CardContent>\n+              <Table>\n+                <TableHeader>\n+                  <TableRow>\n+                    <TableHead>Timestamp</TableHead>\n+                    <TableHead>Action</TableHead>\n+                    <TableHead>Details</TableHead>\n+                  </TableRow>\n+                </TableHeader>\n+                <TableBody>\n+                  {filteredData.map((audit) => (\n+                    <TableRow key={audit._id.$oid}>\n+                      <TableCell>\n+                        <div className=\"flex items-center space-x-2\">\n+                          <Calendar className=\"h-4 w-4\" />\n+                          <span>{new Date(audit.timestamp.$date).toLocaleDateString()}</span>\n+                          <Clock className=\"h-4 w-4 ml-2\" />\n+                          <span>{new Date(audit.timestamp.$date).toLocaleTimeString()}</span>\n+                        </div>\n+                      </TableCell>\n+                      <TableCell>\n+                        <Badge variant={audit.action === 'edit' ? 'default' : audit.action === 'report' ? 'secondary' : 'destructive'}>\n+                          {audit.action}\n+                        </Badge>\n+                      </TableCell>\n+                      <TableCell>\n+                        {audit.action === 'edit' && (\n+                          <span>\n+                            Value changed from {audit.details.before.valuePerUnit} to {audit.details.after.valuePerUnit}\n+                          </span>\n+                        )}\n+                        {audit.action === 'report' && (\n+                          <span>\n+                            Report type: {audit.details.reportType}, Donations: {audit.details.donationIds.length}\n+                          </span>\n+                        )}\n+                        {audit.action === 'delete' && (\n+                          <span className=\"flex items-center space-x-2\">\n+                            <AlertCircle className=\"h-4 w-4 text-red-500\" />\n+                            <span>Reason: {audit.details.reason}</span>\n+                          </span>\n+                        )}\n+                      </TableCell>\n+                    </TableRow>\n+                  ))}\n+                </TableBody>\n+              </Table>\n+            </CardContent>\n+          </Card>\n+        </TabsContent>\n+      </Tabs>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732002315340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,532 +0,0 @@\n-\"use client\";\n-\n-import { useState, useEffect } from 'react';\n-import { useRouter } from 'next/navigation';\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n-import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend, LineChart, Line } from 'recharts';\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n-import { Edit, FileText, Trash2, AlertCircle, Calendar, Clock } from 'lucide-react';\n-import { Badge } from \"@/components/ui/badge\";\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n-\n-const fetchAuditData = async (charityId) => {\n-  const token = localStorage.getItem('authToken');\n-  const res = await fetch(`http://localhost:3001/audits/${charityId}`, {\n-    method: 'GET',\n-    headers: {\n-      'Content-Type': 'application/json',\n-      'Authorization': `Bearer ${token}`\n-    }\n-  });\n-\n-  if (!res.ok) {\n-    throw new Error(`Error fetching audits: ${res.status} ${res.statusText}`);\n-  }\n-\n-  return res.json();\n-};\n-\n-export function EnhancedAuditDashboardComponent() {\n-  const [auditData, setAuditData] = useState([]);\n-  const [timeFilter, setTimeFilter] = useState('all');\n-  const [error, setError] = useState('');\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    const fetchProfileAndAudits = async () => {\n-      const token = localStorage.getItem('authToken');\n-\n-      if (!token) {\n-        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n-        return;\n-      }\n-\n-      try {\n-        const profileRes = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-\n-        if (!profileRes.ok) {\n-          throw new Error(`Error fetching profile: ${profileRes.status} ${profileRes.statusText}`);\n-        }\n-\n-        const profileData = await profileRes.json();\n-\n-        if (profileData.charity && profileData.charity.userType === 'charity') {\n-          const charityId = profileData.charity.id;\n-          const audits = await fetchAuditData(charityId);\n-          setAuditData(audits);\n-        } else {\n-          setError('No autorizado. Solo las organizaciones pueden acceder a esta p√°gina.');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setError('Error fetching profile or audits');\n-      }\n-    };\n-\n-    fetchProfileAndAudits();\n-  }, []);\n-\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\n-\n-  const filteredData = auditData.filter(audit => {\n-    if (timeFilter === 'all') return true;\n-    const date = new Date(audit.timestamp.$date);\n-    const now = new Date();\n-    switch (timeFilter) {\n-      case 'today':\n-        return date.toDateString() === now.toDateString();\n-      case 'week':\n-        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n-        return date > weekAgo;\n-      case 'month':\n-        return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n-      default:\n-        return true;\n-    }\n-  });\n-\n-  const actionCounts = filteredData.reduce((acc, audit) => {\n-    acc[audit.action] = (acc[audit.action] || 0) + 1;\n-    return acc;\n-  }, {});\n-\n-  const pieChartData = Object.entries(actionCounts).map(([name, value]) => ({ name, value }));\n-\n-  const timelineData = filteredData.reduce((acc, audit) => {\n-    const date = new Date(audit.timestamp.$date).toLocaleDateString();\n-    acc[date] = (acc[date] || 0) + 1;\n-    return acc;\n-  }, {});\n-\n-  const lineChartData = Object.entries(timelineData).map(([date, count]) => ({ date, count }));\n-\n-  return (\n-    <div className=\"min-h-screen p-8\" style={{ backgroundColor: '#ECE3D4' }}>\n-      <h1 className=\"text-4xl font-bold mb-8\" style={{ color: '#042637' }}>Enhanced Audit Dashboard</h1>\n-      <div className=\"mb-4\">\n-        <Select value={timeFilter} onValueChange={setTimeFilter}>\n-          <SelectTrigger className=\"w-[180px]\">\n-            <SelectValue placeholder=\"Select time range\" />\n-          </SelectTrigger>\n-          <SelectContent>\n-            <SelectItem value=\"all\">All Time</SelectItem>\n-            <SelectItem value=\"today\">Today</SelectItem>\n-            <SelectItem value=\"week\">This Week</SelectItem>\n-            <SelectItem value=\"month\">This Month</SelectItem>\n-          </SelectContent>\n-        </Select>\n-      </div>\n-      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n-        <TabsList>\n-          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n-          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n-          <TabsTrigger value=\"details\">Audit Details</TabsTrigger>\n-        </TabsList>\n-        <TabsContent value=\"overview\">\n-          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Total Audits</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <div className=\"text-4xl font-bold\" style={{ color: '#042637' }}>{filteredData.length}</div>\n-                <p className=\"text-sm text-muted-foreground\">in selected time range</p>\n-              </CardContent>\n-            </Card>\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Audit Actions</CardTitle>\n-              </CardHeader>\n-              <CardContent className=\"h-[300px]\">\n-                <ResponsiveContainer width=\"100%\" height=\"100%\">\n-                  <PieChart>\n-                    <Pie\n-                      data={pieChartData}\n-                      cx=\"50%\"\n-                      cy=\"50%\"\n-                      labelLine={false}\n-                      outerRadius={80}\n-                      fill=\"#8884d8\"\n-                      dataKey=\"value\"\n-                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n-                    >\n-                      {pieChartData.map((entry, index) => (\n-                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n-                      ))}\n-                    </Pie>\n-                    <Tooltip />\n-                    <Legend />\n-                  </PieChart>\n-                </ResponsiveContainer>\n-              </CardContent>\n-            </Card>\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Recent Activity</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <ul className=\"space-y-2\">\n-                  {filteredData.slice(0, 5).map((audit) => (\n-                    <li key={audit._id.$oid} className=\"flex items-center space-x-2\">\n-                      {audit.action === 'edit' && <Edit size={16} />}\n-                      {audit.action === 'report' && <FileText size={16} />}\n-                      {audit.action === 'delete' && <Trash2 size={16} />}\n-                      <span>{audit.action} - {new Date(audit.timestamp.$date).toLocaleString()}</span>\n-                    </li>\n-                  ))}\n-                </ul>\n-              </CardContent>\n-            </Card>\n-          </div>\n-        </TabsContent>\n-        <TabsContent value=\"timeline\">\n-          <Card>\n-            <CardHeader>\n-              <CardTitle>Audit Timeline</CardTitle>\n-              <CardDescription>Number of audits over time</CardDescription>\n-            </CardHeader>\n-            <CardContent className=\"h-[400px]\">\n-              <ResponsiveContainer width=\"100%\" height=\"100%\">\n-                <LineChart data={lineChartData}>\n-                  <XAxis dataKey=\"date\" />\n-                  <YAxis />\n-                  <Tooltip />\n-                  <Line type=\"monotone\" dataKey=\"count\" stroke=\"#042637\" strokeWidth={2} />\n-                </LineChart>\n-              </ResponsiveContainer>\n-            </CardContent>\n-          </Card>\n-        </TabsContent>\n-        <TabsContent value=\"details\">\n-          <Card>\n-            <CardHeader>\n-              <CardTitle>Audit Log</CardTitle>\n-              <CardDescription>Detailed view of all audit actions</CardDescription>\n-            </CardHeader>\n-            <CardContent>\n-              <Table>\n-                <TableHeader>\n-                  <TableRow>\n-                    <TableHead>Timestamp</TableHead>\n-                    <TableHead>Action</TableHead>\n-                    <TableHead>Details</TableHead>\n-                  </TableRow>\n-                </TableHeader>\n-                <TableBody>\n-                  {filteredData.map((audit) => (\n-                    <TableRow key={audit._id.$oid}>\n-                      <TableCell>\n-                        <div className=\"flex items-center space-x-2\">\n-                          <Calendar className=\"h-4 w-4\" />\n-                          <span>{new Date(audit.timestamp.$date).toLocaleDateString()}</span>\n-                          <Clock className=\"h-4 w-4 ml-2\" />\n-                          <span>{new Date(audit.timestamp.$date).toLocaleTimeString()}</span>\n-                        </div>\n-                      </TableCell>\n-                      <TableCell>\n-                        <Badge variant={audit.action === 'edit' ? 'default' : audit.action === 'report' ? 'secondary' : 'destructive'}>\n-                          {audit.action}\n-                        </Badge>\n-                      </TableCell>\n-                      <TableCell>\n-                        {audit.action === 'edit' && (\n-                          <span>\n-                            Value changed from {audit.details.before.valuePerUnit} to {audit.details.after.valuePerUnit}\n-                          </span>\n-                        )}\n-                        {audit.action === 'report' && (\n-                          <span>\n-                            Report type: {audit.details.reportType}, Donations: {audit.details.donationIds.length}\n-                          </span>\n-                        )}\n-                        {audit.action === 'delete' && (\n-                          <span className=\"flex items-center space-x-2\">\n-                            <AlertCircle className=\"h-4 w-4 text-red-500\" />\n-                            <span>Reason: {audit.details.reason}</span>\n-                          </span>\n-                        )}\n-                      </TableCell>\n-                    </TableRow>\n-                  ))}\n-                </TableBody>\n-              </Table>\n-            </CardContent>\n-          </Card>\n-        </TabsContent>\n-      </Tabs>\n-    </div>\n-  );\n-}\n-\"use client\";\n-\n-import { useState, useEffect } from 'react';\n-import { useRouter } from 'next/navigation';\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n-import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend, LineChart, Line } from 'recharts';\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n-import { Edit, FileText, Trash2, AlertCircle, Calendar, Clock } from 'lucide-react';\n-import { Badge } from \"@/components/ui/badge\";\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n-\n-const fetchAuditData = async (charityId) => {\n-  const token = localStorage.getItem('authToken');\n-  const res = await fetch(`http://localhost:3001/audits/${charityId}`, {\n-    method: 'GET',\n-    headers: {\n-      'Content-Type': 'application/json',\n-      'Authorization': `Bearer ${token}`\n-    }\n-  });\n-\n-  if (!res.ok) {\n-    throw new Error(`Error fetching audits: ${res.status} ${res.statusText}`);\n-  }\n-\n-  return res.json();\n-};\n-\n-export function EnhancedAuditDashboardComponent() {\n-  const [auditData, setAuditData] = useState([]);\n-  const [timeFilter, setTimeFilter] = useState('all');\n-  const [error, setError] = useState('');\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    const fetchProfileAndAudits = async () => {\n-      const token = localStorage.getItem('authToken');\n-\n-      if (!token) {\n-        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n-        return;\n-      }\n-\n-      try {\n-        const profileRes = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-\n-        if (!profileRes.ok) {\n-          throw new Error(`Error fetching profile: ${profileRes.status} ${profileRes.statusText}`);\n-        }\n-\n-        const profileData = await profileRes.json();\n-\n-        if (profileData.charity && profileData.charity.userType === 'charity') {\n-          const charityId = profileData.charity.id;\n-          const audits = await fetchAuditData(charityId);\n-          setAuditData(audits);\n-        } else {\n-          setError('No autorizado. Solo las organizaciones pueden acceder a esta p√°gina.');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setError('Error fetching profile or audits');\n-      }\n-    };\n-\n-    fetchProfileAndAudits();\n-  }, []);\n-\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\n-\n-  const filteredData = auditData.filter(audit => {\n-    if (timeFilter === 'all') return true;\n-    const date = new Date(audit.timestamp.$date);\n-    const now = new Date();\n-    switch (timeFilter) {\n-      case 'today':\n-        return date.toDateString() === now.toDateString();\n-      case 'week':\n-        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n-        return date > weekAgo;\n-      case 'month':\n-        return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n-      default:\n-        return true;\n-    }\n-  });\n-\n-  const actionCounts = filteredData.reduce((acc, audit) => {\n-    acc[audit.action] = (acc[audit.action] || 0) + 1;\n-    return acc;\n-  }, {});\n-\n-  const pieChartData = Object.entries(actionCounts).map(([name, value]) => ({ name, value }));\n-\n-  const timelineData = filteredData.reduce((acc, audit) => {\n-    const date = new Date(audit.timestamp.$date).toLocaleDateString();\n-    acc[date] = (acc[date] || 0) + 1;\n-    return acc;\n-  }, {});\n-\n-  const lineChartData = Object.entries(timelineData).map(([date, count]) => ({ date, count }));\n-\n-  return (\n-    <div className=\"min-h-screen p-8\" style={{ backgroundColor: '#ECE3D4' }}>\n-      <h1 className=\"text-4xl font-bold mb-8\" style={{ color: '#042637' }}>Enhanced Audit Dashboard</h1>\n-      <div className=\"mb-4\">\n-        <Select value={timeFilter} onValueChange={setTimeFilter}>\n-          <SelectTrigger className=\"w-[180px]\">\n-            <SelectValue placeholder=\"Select time range\" />\n-          </SelectTrigger>\n-          <SelectContent>\n-            <SelectItem value=\"all\">All Time</SelectItem>\n-            <SelectItem value=\"today\">Today</SelectItem>\n-            <SelectItem value=\"week\">This Week</SelectItem>\n-            <SelectItem value=\"month\">This Month</SelectItem>\n-          </SelectContent>\n-        </Select>\n-      </div>\n-      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n-        <TabsList>\n-          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n-          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n-          <TabsTrigger value=\"details\">Audit Details</TabsTrigger>\n-        </TabsList>\n-        <TabsContent value=\"overview\">\n-          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Total Audits</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <div className=\"text-4xl font-bold\" style={{ color: '#042637' }}>{filteredData.length}</div>\n-                <p className=\"text-sm text-muted-foreground\">in selected time range</p>\n-              </CardContent>\n-            </Card>\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Audit Actions</CardTitle>\n-              </CardHeader>\n-              <CardContent className=\"h-[300px]\">\n-                <ResponsiveContainer width=\"100%\" height=\"100%\">\n-                  <PieChart>\n-                    <Pie\n-                      data={pieChartData}\n-                      cx=\"50%\"\n-                      cy=\"50%\"\n-                      labelLine={false}\n-                      outerRadius={80}\n-                      fill=\"#8884d8\"\n-                      dataKey=\"value\"\n-                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n-                    >\n-                      {pieChartData.map((entry, index) => (\n-                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n-                      ))}\n-                    </Pie>\n-                    <Tooltip />\n-                    <Legend />\n-                  </PieChart>\n-                </ResponsiveContainer>\n-              </CardContent>\n-            </Card>\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Recent Activity</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <ul className=\"space-y-2\">\n-                  {filteredData.slice(0, 5).map((audit) => (\n-                    <li key={audit._id.$oid} className=\"flex items-center space-x-2\">\n-                      {audit.action === 'edit' && <Edit size={16} />}\n-                      {audit.action === 'report' && <FileText size={16} />}\n-                      {audit.action === 'delete' && <Trash2 size={16} />}\n-                      <span>{audit.action} - {new Date(audit.timestamp.$date).toLocaleString()}</span>\n-                    </li>\n-                  ))}\n-                </ul>\n-              </CardContent>\n-            </Card>\n-          </div>\n-        </TabsContent>\n-        <TabsContent value=\"timeline\">\n-          <Card>\n-            <CardHeader>\n-              <CardTitle>Audit Timeline</CardTitle>\n-              <CardDescription>Number of audits over time</CardDescription>\n-            </CardHeader>\n-            <CardContent className=\"h-[400px]\">\n-              <ResponsiveContainer width=\"100%\" height=\"100%\">\n-                <LineChart data={lineChartData}>\n-                  <XAxis dataKey=\"date\" />\n-                  <YAxis />\n-                  <Tooltip />\n-                  <Line type=\"monotone\" dataKey=\"count\" stroke=\"#042637\" strokeWidth={2} />\n-                </LineChart>\n-              </ResponsiveContainer>\n-            </CardContent>\n-          </Card>\n-        </TabsContent>\n-        <TabsContent value=\"details\">\n-          <Card>\n-            <CardHeader>\n-              <CardTitle>Audit Log</CardTitle>\n-              <CardDescription>Detailed view of all audit actions</CardDescription>\n-            </CardHeader>\n-            <CardContent>\n-              <Table>\n-                <TableHeader>\n-                  <TableRow>\n-                    <TableHead>Timestamp</TableHead>\n-                    <TableHead>Action</TableHead>\n-                    <TableHead>Details</TableHead>\n-                  </TableRow>\n-                </TableHeader>\n-                <TableBody>\n-                  {filteredData.map((audit) => (\n-                    <TableRow key={audit._id.$oid}>\n-                      <TableCell>\n-                        <div className=\"flex items-center space-x-2\">\n-                          <Calendar className=\"h-4 w-4\" />\n-                          <span>{new Date(audit.timestamp.$date).toLocaleDateString()}</span>\n-                          <Clock className=\"h-4 w-4 ml-2\" />\n-                          <span>{new Date(audit.timestamp.$date).toLocaleTimeString()}</span>\n-                        </div>\n-                      </TableCell>\n-                      <TableCell>\n-                        <Badge variant={audit.action === 'edit' ? 'default' : audit.action === 'report' ? 'secondary' : 'destructive'}>\n-                          {audit.action}\n-                        </Badge>\n-                      </TableCell>\n-                      <TableCell>\n-                        {audit.action === 'edit' && (\n-                          <span>\n-                            Value changed from {audit.details.before.valuePerUnit} to {audit.details.after.valuePerUnit}\n-                          </span>\n-                        )}\n-                        {audit.action === 'report' && (\n-                          <span>\n-                            Report type: {audit.details.reportType}, Donations: {audit.details.donationIds.length}\n-                          </span>\n-                        )}\n-                        {audit.action === 'delete' && (\n-                          <span className=\"flex items-center space-x-2\">\n-                            <AlertCircle className=\"h-4 w-4 text-red-500\" />\n-                            <span>Reason: {audit.details.reason}</span>\n-                          </span>\n-                        )}\n-                      </TableCell>\n-                    </TableRow>\n-                  ))}\n-                </TableBody>\n-              </Table>\n-            </CardContent>\n-          </Card>\n-        </TabsContent>\n-      </Tabs>\n-    </div>\n-  );\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732002562696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,267 @@\n+\"use client\";\n+\n+import { useState, useEffect } from 'react';\n+import { useRouter } from 'next/navigation';\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n+import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend, LineChart, Line } from 'recharts';\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n+import { Edit, FileText, Trash2, AlertCircle, Calendar, Clock } from 'lucide-react';\n+import { Badge } from \"@/components/ui/badge\";\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n+\n+const fetchAuditData = async (charityId) => {\n+  const token = localStorage.getItem('authToken');\n+  const res = await fetch(`http://localhost:3001/audits/${charityId}`, {\n+    method: 'GET',\n+    headers: {\n+      'Content-Type': 'application/json',\n+      'Authorization': `Bearer ${token}`\n+    }\n+  });\n+\n+  if (!res.ok) {\n+    throw new Error(`Error fetching audits: ${res.status} ${res.statusText}`);\n+  }\n+  return res.json();\n+};\n+\n+const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n+\n+export function EnhancedAuditDashboardComponent() {\n+  const [auditData, setAuditData] = useState([]);\n+  const [timeFilter, setTimeFilter] = useState('all');\n+  const [error, setError] = useState('');\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    const fetchProfileAndAudits = async () => {\n+      const token = localStorage.getItem('authToken');\n+\n+      if (!token) {\n+        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n+        return;\n+      }\n+\n+      try {\n+        const profileRes = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+\n+        if (!profileRes.ok) {\n+          throw new Error(`Error fetching profile: ${profileRes.status} ${profileRes.statusText}`);\n+        }\n+\n+        const profileData = await profileRes.json();\n+\n+        if (profileData.charity && profileData.charity.userType === 'charity') {\n+          const charityId = profileData.charity.id;\n+          const audits = await fetchAuditData(charityId);\n+          setAuditData(audits);\n+        } else {\n+          setError('No autorizado. Solo las organizaciones pueden acceder a esta p√°gina.');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setError('Error fetching profile or audits');\n+      }\n+    };\n+\n+    fetchProfileAndAudits();\n+  }, []);\n+\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\n+\n+  const filteredData = auditData.filter(audit => {\n+    if (timeFilter === 'all') return true;\n+    const date = new Date(audit.timestamp.$date);\n+    const now = new Date();\n+    switch (timeFilter) {\n+      case 'today':\n+        return date.toDateString() === now.toDateString();\n+      case 'week':\n+        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n+        return date > weekAgo;\n+      case 'month':\n+        return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n+      default:\n+        return true;\n+    }\n+  });\n+\n+  const actionCounts = filteredData.reduce((acc, audit) => {\n+    acc[audit.action] = (acc[audit.action] || 0) + 1;\n+    return acc;\n+  }, {});\n+\n+  const pieChartData = Object.entries(actionCounts).map(([name, value]) => ({ name, value }));\n+\n+  const timelineData = filteredData.reduce((acc, audit) => {\n+    const date = new Date(audit.timestamp.$date).toLocaleDateString();\n+    acc[date] = (acc[date] || 0) + 1;\n+    return acc;\n+  }, {});\n+\n+  const lineChartData = Object.entries(timelineData).map(([date, count]) => ({ date, count }));\n+\n+  return (\n+    <div className=\"min-h-screen p-8\" style={{ backgroundColor: '#ECE3D4' }}>\n+      <h1 className=\"text-4xl font-bold mb-8\" style={{ color: '#042637' }}>Enhanced Audit Dashboard</h1>\n+      <div className=\"mb-4\">\n+        <Select value={timeFilter} onValueChange={setTimeFilter}>\n+          <SelectTrigger className=\"w-[180px]\">\n+            <SelectValue placeholder=\"Select time range\" />\n+          </SelectTrigger>\n+          <SelectContent>\n+            <SelectItem value=\"all\">All Time</SelectItem>\n+            <SelectItem value=\"today\">Today</SelectItem>\n+            <SelectItem value=\"week\">This Week</SelectItem>\n+            <SelectItem value=\"month\">This Month</SelectItem>\n+          </SelectContent>\n+        </Select>\n+      </div>\n+      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n+        <TabsList>\n+          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n+          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n+          <TabsTrigger value=\"details\">Audit Details</TabsTrigger>\n+        </TabsList>\n+        <TabsContent value=\"overview\">\n+          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Total Audits</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <div className=\"text-4xl font-bold\" style={{ color: '#042637' }}>{filteredData.length}</div>\n+                <p className=\"text-sm text-muted-foreground\">in selected time range</p>\n+              </CardContent>\n+            </Card>\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Audit Actions</CardTitle>\n+              </CardHeader>\n+              <CardContent className=\"h-[300px]\">\n+                <ResponsiveContainer width=\"100%\" height=\"100%\">\n+                  <PieChart>\n+                    <Pie\n+                      data={pieChartData}\n+                      cx=\"50%\"\n+                      cy=\"50%\"\n+                      labelLine={false}\n+                      outerRadius={80}\n+                      fill=\"#8884d8\"\n+                      dataKey=\"value\"\n+                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n+                    >\n+                      {pieChartData.map((entry, index) => (\n+                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n+                      ))}\n+                    </Pie>\n+                    <Tooltip />\n+                    <Legend />\n+                  </PieChart>\n+                </ResponsiveContainer>\n+              </CardContent>\n+            </Card>\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Recent Activity</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <ul className=\"space-y-2\">\n+                  {filteredData.slice(0, 5).map((audit) => (\n+                    <li key={audit._id.$oid} className=\"flex items-center space-x-2\">\n+                      {audit.action === 'edit' && <Edit size={16} />}\n+                      {audit.action === 'report' && <FileText size={16} />}\n+                      {audit.action === 'delete' && <Trash2 size={16} />}\n+                      <span>{audit.action} - {new Date(audit.timestamp.$date).toLocaleString()}</span>\n+                    </li>\n+                  ))}\n+                </ul>\n+              </CardContent>\n+            </Card>\n+          </div>\n+        </TabsContent>\n+        <TabsContent value=\"timeline\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle>Audit Timeline</CardTitle>\n+              <CardDescription>Number of audits over time</CardDescription>\n+            </CardHeader>\n+            <CardContent className=\"h-[400px]\">\n+              <ResponsiveContainer width=\"100%\" height=\"100%\">\n+                <LineChart data={lineChartData}>\n+                  <XAxis dataKey=\"date\" />\n+                  <YAxis />\n+                  <Tooltip />\n+                  <Line type=\"monotone\" dataKey=\"count\" stroke=\"#042637\" strokeWidth={2} />\n+                </LineChart>\n+              </ResponsiveContainer>\n+            </CardContent>\n+          </Card>\n+        </TabsContent>\n+        <TabsContent value=\"details\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle>Audit Log</CardTitle>\n+              <CardDescription>Detailed view of all audit actions</CardDescription>\n+            </CardHeader>\n+            <CardContent>\n+              <Table>\n+                <TableHeader>\n+                  <TableRow>\n+                    <TableHead>Timestamp</TableHead>\n+                    <TableHead>Action</TableHead>\n+                    <TableHead>Details</TableHead>\n+                  </TableRow>\n+                </TableHeader>\n+                <TableBody>\n+                  {filteredData.map((audit) => (\n+                    <TableRow key={audit._id.$oid}>\n+                      <TableCell>\n+                        <div className=\"flex items-center space-x-2\">\n+                          <Calendar className=\"h-4 w-4\" />\n+                          <span>{new Date(audit.timestamp.$date).toLocaleDateString()}</span>\n+                          <Clock className=\"h-4 w-4 ml-2\" />\n+                          <span>{new Date(audit.timestamp.$date).toLocaleTimeString()}</span>\n+                        </div>\n+                      </TableCell>\n+                      <TableCell>\n+                        <Badge variant={audit.action === 'edit' ? 'default' : audit.action === 'report' ? 'secondary' : 'destructive'}>\n+                          {audit.action}\n+                        </Badge>\n+                      </TableCell>\n+                      <TableCell>\n+                        {audit.action === 'edit' && (\n+                          <span>\n+                            Value changed from {audit.details.before.valuePerUnit} to {audit.details.after.valuePerUnit}\n+                          </span>\n+                        )}\n+                        {audit.action === 'report' && (\n+                          <span>\n+                            Report type: {audit.details.reportType}, Donations: {audit.details.donationIds.length}\n+                          </span>\n+                        )}\n+                        {audit.action === 'delete' && (\n+                          <span className=\"flex items-center space-x-2\">\n+                            <AlertCircle className=\"h-4 w-4 text-red-500\" />\n+                            <span>Reason: {audit.details.reason}</span>\n+                          </span>\n+                        )}\n+                      </TableCell>\n+                    </TableRow>\n+                  ))}\n+                </TableBody>\n+              </Table>\n+            </CardContent>\n+          </Card>\n+        </TabsContent>\n+      </Tabs>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732002716371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n \n   if (!res.ok) {\n     throw new Error(`Error fetching audits: ${res.status} ${res.statusText}`);\n   }\n+\n   return res.json();\n };\n \n const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n@@ -220,43 +221,47 @@\n                     <TableHead>Details</TableHead>\n                   </TableRow>\n                 </TableHeader>\n                 <TableBody>\n-                  {filteredData.map((audit) => (\n-                    <TableRow key={audit._id.$oid}>\n-                      <TableCell>\n-                        <div className=\"flex items-center space-x-2\">\n-                          <Calendar className=\"h-4 w-4\" />\n-                          <span>{new Date(audit.timestamp.$date).toLocaleDateString()}</span>\n-                          <Clock className=\"h-4 w-4 ml-2\" />\n-                          <span>{new Date(audit.timestamp.$date).toLocaleTimeString()}</span>\n-                        </div>\n-                      </TableCell>\n-                      <TableCell>\n-                        <Badge variant={audit.action === 'edit' ? 'default' : audit.action === 'report' ? 'secondary' : 'destructive'}>\n-                          {audit.action}\n-                        </Badge>\n-                      </TableCell>\n-                      <TableCell>\n-                        {audit.action === 'edit' && (\n-                          <span>\n-                            Value changed from {audit.details.before.valuePerUnit} to {audit.details.after.valuePerUnit}\n-                          </span>\n-                        )}\n-                        {audit.action === 'report' && (\n-                          <span>\n-                            Report type: {audit.details.reportType}, Donations: {audit.details.donationIds.length}\n-                          </span>\n-                        )}\n-                        {audit.action === 'delete' && (\n-                          <span className=\"flex items-center space-x-2\">\n-                            <AlertCircle className=\"h-4 w-4 text-red-500\" />\n-                            <span>Reason: {audit.details.reason}</span>\n-                          </span>\n-                        )}\n-                      </TableCell>\n-                    </TableRow>\n-                  ))}\n+                  {filteredData.map((audit) => {\n+                    const date = new Date(audit.timestamp.$date);\n+                    const isValidDate = !isNaN(date);\n+                    return (\n+                      <TableRow key={audit._id.$oid}>\n+                        <TableCell>\n+                          <div className=\"flex items-center space-x-2\">\n+                            <Calendar className=\"h-4 w-4\" />\n+                            <span>{isValidDate ? date.toLocaleDateString() : 'Invalid Date'}</span>\n+                            <Clock className=\"h-4 w-4 ml-2\" />\n+                            <span>{isValidDate ? date.toLocaleTimeString() : 'Invalid Date'}</span>\n+                          </div>\n+                        </TableCell>\n+                        <TableCell>\n+                          <Badge variant={audit.action === 'edit' ? 'default' : audit.action === 'report' ? 'secondary' : 'destructive'}>\n+                            {audit.action}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell>\n+                          {audit.action === 'edit' && (\n+                            <span>\n+                              Value changed from {audit.details.before.valuePerUnit} to {audit.details.after.valuePerUnit}\n+                            </span>\n+                          )}\n+                          {audit.action === 'report' && (\n+                            <span>\n+                              Report type: {audit.details.reportType}, Donations: {audit.details.donationIds.length}\n+                            </span>\n+                          )}\n+                          {audit.action === 'delete' && (\n+                            <span className=\"flex items-center space-x-2\">\n+                              <AlertCircle className=\"h-4 w-4 text-red-500\" />\n+                              <span>Reason: {audit.details.reason}</span>\n+                            </span>\n+                          )}\n+                        </TableCell>\n+                      </TableRow>\n+                    );\n+                  })}\n                 </TableBody>\n               </Table>\n             </CardContent>\n           </Card>\n"
                },
                {
                    "date": 1732002778310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,271 @@\n+\"use client\";\n+\n+import { useState, useEffect } from 'react';\n+import { useRouter } from 'next/navigation';\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n+import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend, LineChart, Line } from 'recharts';\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n+import { Edit, FileText, Trash2, AlertCircle, Calendar, Clock } from 'lucide-react';\n+import { Badge } from \"@/components/ui/badge\";\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n+\n+const fetchAuditData = async (charityId) => {\n+  const token = localStorage.getItem('authToken');\n+  const res = await fetch(`http://localhost:3001/audits/${charityId}`, {\n+    method: 'GET',\n+    headers: {\n+      'Content-Type': 'application/json',\n+      'Authorization': `Bearer ${token}`\n+    }\n+  });\n+\n+  if (!res.ok) {\n+    throw new Error(`Error fetching audits: ${res.status} ${res.statusText}`);\n+  }\n+  return res.json();\n+};\n+\n+const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n+\n+export function EnhancedAuditDashboardComponent() {\n+  const [auditData, setAuditData] = useState([]);\n+  const [timeFilter, setTimeFilter] = useState('all');\n+  const [error, setError] = useState('');\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    const fetchProfileAndAudits = async () => {\n+      const token = localStorage.getItem('authToken');\n+\n+      if (!token) {\n+        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n+        return;\n+      }\n+\n+      try {\n+        const profileRes = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+\n+        if (!profileRes.ok) {\n+          throw new Error(`Error fetching profile: ${profileRes.status} ${profileRes.statusText}`);\n+        }\n+\n+        const profileData = await profileRes.json();\n+\n+        if (profileData.charity && profileData.charity.userType === 'charity') {\n+          const charityId = profileData.charity.id;\n+          const audits = await fetchAuditData(charityId);\n+          setAuditData(audits);\n+        } else {\n+          setError('No autorizado. Solo las organizaciones pueden acceder a esta p√°gina.');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setError('Error fetching profile or audits');\n+      }\n+    };\n+\n+    fetchProfileAndAudits();\n+  }, []);\n+\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\n+\n+  const filteredData = auditData.filter(audit => {\n+    if (timeFilter === 'all') return true;\n+    const date = new Date(audit.timestamp.$date);\n+    const now = new Date();\n+    switch (timeFilter) {\n+      case 'today':\n+        return date.toDateString() === now.toDateString();\n+      case 'week':\n+        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n+        return date > weekAgo;\n+      case 'month':\n+        return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n+      default:\n+        return true;\n+    }\n+  });\n+\n+  const actionCounts = filteredData.reduce((acc, audit) => {\n+    acc[audit.action] = (acc[audit.action] || 0) + 1;\n+    return acc;\n+  }, {});\n+\n+  const pieChartData = Object.entries(actionCounts).map(([name, value]) => ({ name, value }));\n+\n+  const timelineData = filteredData.reduce((acc, audit) => {\n+    const date = new Date(audit.timestamp.$date).toLocaleDateString();\n+    acc[date] = (acc[date] || 0) + 1;\n+    return acc;\n+  }, {});\n+\n+  const lineChartData = Object.entries(timelineData).map(([date, count]) => ({ date, count }));\n+\n+  return (\n+    <div className=\"min-h-screen p-8\" style={{ backgroundColor: '#ECE3D4' }}>\n+      <h1 className=\"text-4xl font-bold mb-8\" style={{ color: '#042637' }}>Enhanced Audit Dashboard</h1>\n+      <div className=\"mb-4\">\n+        <Select value={timeFilter} onValueChange={setTimeFilter}>\n+          <SelectTrigger className=\"w-[180px]\">\n+            <SelectValue placeholder=\"Select time range\" />\n+          </SelectTrigger>\n+          <SelectContent>\n+            <SelectItem value=\"all\">All Time</SelectItem>\n+            <SelectItem value=\"today\">Today</SelectItem>\n+            <SelectItem value=\"week\">This Week</SelectItem>\n+            <SelectItem value=\"month\">This Month</SelectItem>\n+          </SelectContent>\n+        </Select>\n+      </div>\n+      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n+        <TabsList>\n+          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n+          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n+          <TabsTrigger value=\"details\">Audit Details</TabsTrigger>\n+        </TabsList>\n+        <TabsContent value=\"overview\">\n+          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Total Audits</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <div className=\"text-4xl font-bold\" style={{ color: '#042637' }}>{filteredData.length}</div>\n+                <p className=\"text-sm text-muted-foreground\">in selected time range</p>\n+              </CardContent>\n+            </Card>\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Audit Actions</CardTitle>\n+              </CardHeader>\n+              <CardContent className=\"h-[300px]\">\n+                <ResponsiveContainer width=\"100%\" height=\"100%\">\n+                  <PieChart>\n+                    <Pie\n+                      data={pieChartData}\n+                      cx=\"50%\"\n+                      cy=\"50%\"\n+                      labelLine={false}\n+                      outerRadius={80}\n+                      fill=\"#8884d8\"\n+                      dataKey=\"value\"\n+                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n+                    >\n+                      {pieChartData.map((entry, index) => (\n+                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n+                      ))}\n+                    </Pie>\n+                    <Tooltip />\n+                    <Legend />\n+                  </PieChart>\n+                </ResponsiveContainer>\n+              </CardContent>\n+            </Card>\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Recent Activity</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <ul className=\"space-y-2\">\n+                  {filteredData.slice(0, 5).map((audit) => (\n+                    <li key={audit._id.$oid} className=\"flex items-center space-x-2\">\n+                      {audit.action === 'edit' && <Edit size={16} />}\n+                      {audit.action === 'report' && <FileText size={16} />}\n+                      {audit.action === 'delete' && <Trash2 size={16} />}\n+                      <span>{audit.action} - {new Date(audit.timestamp.$date).toLocaleString()}</span>\n+                    </li>\n+                  ))}\n+                </ul>\n+              </CardContent>\n+            </Card>\n+          </div>\n+        </TabsContent>\n+        <TabsContent value=\"timeline\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle>Audit Timeline</CardTitle>\n+              <CardDescription>Number of audits over time</CardDescription>\n+            </CardHeader>\n+            <CardContent className=\"h-[400px]\">\n+              <ResponsiveContainer width=\"100%\" height=\"100%\">\n+                <LineChart data={lineChartData}>\n+                  <XAxis dataKey=\"date\" />\n+                  <YAxis />\n+                  <Tooltip />\n+                  <Line type=\"monotone\" dataKey=\"count\" stroke=\"#042637\" strokeWidth={2} />\n+                </LineChart>\n+              </ResponsiveContainer>\n+            </CardContent>\n+          </Card>\n+        </TabsContent>\n+        <TabsContent value=\"details\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle>Audit Log</CardTitle>\n+              <CardDescription>Detailed view of all audit actions</CardDescription>\n+            </CardHeader>\n+            <CardContent>\n+              <Table>\n+                <TableHeader>\n+                  <TableRow>\n+                    <TableHead>Timestamp</TableHead>\n+                    <TableHead>Action</TableHead>\n+                    <TableHead>Details</TableHead>\n+                  </TableRow>\n+                </TableHeader>\n+                <TableBody>\n+                  {filteredData.map((audit) => {\n+                    const date = new Date(audit.timestamp.$date);\n+                    const isValidDate = !isNaN(date);\n+                    return (\n+                      <TableRow key={audit._id.$oid}>\n+                        <TableCell>\n+                          <div className=\"flex items-center space-x-2\">\n+                            <Calendar className=\"h-4 w-4\" />\n+                            <span>{isValidDate ? date.toLocaleDateString() : 'Invalid Date'}</span>\n+                            <Clock className=\"h-4 w-4 ml-2\" />\n+                            <span>{isValidDate ? date.toLocaleTimeString() : 'Invalid Date'}</span>\n+                          </div>\n+                        </TableCell>\n+                        <TableCell>\n+                          <Badge variant={audit.action === 'edit' ? 'default' : audit.action === 'report' ? 'secondary' : 'destructive'}>\n+                            {audit.action}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell>\n+                          {audit.action === 'edit' && (\n+                            <span>\n+                              Value changed from {audit.details.before.valuePerUnit} to {audit.details.after.valuePerUnit}\n+                            </span>\n+                          )}\n+                          {audit.action === 'report' && (\n+                            <span>\n+                              Report type: {audit.details.reportType}, Donations: {audit.details.donationIds.length}\n+                            </span>\n+                          )}\n+                          {audit.action === 'delete' && (\n+                            <span className=\"flex items-center space-x-2\">\n+                              <AlertCircle className=\"h-4 w-4 text-red-500\" />\n+                              <span>Reason: {audit.details.reason}</span>\n+                            </span>\n+                          )}\n+                        </TableCell>\n+                      </TableRow>\n+                    );\n+                  })}\n+                </TableBody>\n+              </Table>\n+            </CardContent>\n+          </Card>\n+        </TabsContent>\n+      </Tabs>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732002791953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,272 @@\n+\"use client\";\n+\n+import { useState, useEffect } from 'react';\n+import { useRouter } from 'next/navigation';\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n+import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend, LineChart, Line } from 'recharts';\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n+import { Edit, FileText, Trash2, AlertCircle, Calendar, Clock } from 'lucide-react';\n+import { Badge } from \"@/components/ui/badge\";\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n+\n+const fetchAuditData = async (charityId) => {\n+  const token = localStorage.getItem('authToken');\n+  const res = await fetch(`http://localhost:3001/audits/${charityId}`, {\n+    method: 'GET',\n+    headers: {\n+      'Content-Type': 'application/json',\n+      'Authorization': `Bearer ${token}`\n+    }\n+  });\n+\n+  if (!res.ok) {\n+    throw new Error(`Error fetching audits: ${res.status} ${res.statusText}`);\n+  }\n+  return res.json();\n+  \n+};\n+\n+const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n+\n+export function EnhancedAuditDashboardComponent() {\n+  const [auditData, setAuditData] = useState([]);\n+  const [timeFilter, setTimeFilter] = useState('all');\n+  const [error, setError] = useState('');\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    const fetchProfileAndAudits = async () => {\n+      const token = localStorage.getItem('authToken');\n+\n+      if (!token) {\n+        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n+        return;\n+      }\n+\n+      try {\n+        const profileRes = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+\n+        if (!profileRes.ok) {\n+          throw new Error(`Error fetching profile: ${profileRes.status} ${profileRes.statusText}`);\n+        }\n+\n+        const profileData = await profileRes.json();\n+\n+        if (profileData.charity && profileData.charity.userType === 'charity') {\n+          const charityId = profileData.charity.id;\n+          const audits = await fetchAuditData(charityId);\n+          setAuditData(audits);\n+        } else {\n+          setError('No autorizado. Solo las organizaciones pueden acceder a esta p√°gina.');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setError('Error fetching profile or audits');\n+      }\n+    };\n+\n+    fetchProfileAndAudits();\n+  }, []);\n+\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\n+\n+  const filteredData = auditData.filter(audit => {\n+    if (timeFilter === 'all') return true;\n+    const date = new Date(audit.timestamp.$date);\n+    const now = new Date();\n+    switch (timeFilter) {\n+      case 'today':\n+        return date.toDateString() === now.toDateString();\n+      case 'week':\n+        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n+        return date > weekAgo;\n+      case 'month':\n+        return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n+      default:\n+        return true;\n+    }\n+  });\n+\n+  const actionCounts = filteredData.reduce((acc, audit) => {\n+    acc[audit.action] = (acc[audit.action] || 0) + 1;\n+    return acc;\n+  }, {});\n+\n+  const pieChartData = Object.entries(actionCounts).map(([name, value]) => ({ name, value }));\n+\n+  const timelineData = filteredData.reduce((acc, audit) => {\n+    const date = new Date(audit.timestamp.$date).toLocaleDateString();\n+    acc[date] = (acc[date] || 0) + 1;\n+    return acc;\n+  }, {});\n+\n+  const lineChartData = Object.entries(timelineData).map(([date, count]) => ({ date, count }));\n+\n+  return (\n+    <div className=\"min-h-screen p-8\" style={{ backgroundColor: '#ECE3D4' }}>\n+      <h1 className=\"text-4xl font-bold mb-8\" style={{ color: '#042637' }}>Enhanced Audit Dashboard</h1>\n+      <div className=\"mb-4\">\n+        <Select value={timeFilter} onValueChange={setTimeFilter}>\n+          <SelectTrigger className=\"w-[180px]\">\n+            <SelectValue placeholder=\"Select time range\" />\n+          </SelectTrigger>\n+          <SelectContent>\n+            <SelectItem value=\"all\">All Time</SelectItem>\n+            <SelectItem value=\"today\">Today</SelectItem>\n+            <SelectItem value=\"week\">This Week</SelectItem>\n+            <SelectItem value=\"month\">This Month</SelectItem>\n+          </SelectContent>\n+        </Select>\n+      </div>\n+      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n+        <TabsList>\n+          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n+          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n+          <TabsTrigger value=\"details\">Audit Details</TabsTrigger>\n+        </TabsList>\n+        <TabsContent value=\"overview\">\n+          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Total Audits</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <div className=\"text-4xl font-bold\" style={{ color: '#042637' }}>{filteredData.length}</div>\n+                <p className=\"text-sm text-muted-foreground\">in selected time range</p>\n+              </CardContent>\n+            </Card>\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Audit Actions</CardTitle>\n+              </CardHeader>\n+              <CardContent className=\"h-[300px]\">\n+                <ResponsiveContainer width=\"100%\" height=\"100%\">\n+                  <PieChart>\n+                    <Pie\n+                      data={pieChartData}\n+                      cx=\"50%\"\n+                      cy=\"50%\"\n+                      labelLine={false}\n+                      outerRadius={80}\n+                      fill=\"#8884d8\"\n+                      dataKey=\"value\"\n+                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n+                    >\n+                      {pieChartData.map((entry, index) => (\n+                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n+                      ))}\n+                    </Pie>\n+                    <Tooltip />\n+                    <Legend />\n+                  </PieChart>\n+                </ResponsiveContainer>\n+              </CardContent>\n+            </Card>\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Recent Activity</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <ul className=\"space-y-2\">\n+                  {filteredData.slice(0, 5).map((audit) => (\n+                    <li key={audit._id.$oid} className=\"flex items-center space-x-2\">\n+                      {audit.action === 'edit' && <Edit size={16} />}\n+                      {audit.action === 'report' && <FileText size={16} />}\n+                      {audit.action === 'delete' && <Trash2 size={16} />}\n+                      <span>{audit.action} - {new Date(audit.timestamp.$date).toLocaleString()}</span>\n+                    </li>\n+                  ))}\n+                </ul>\n+              </CardContent>\n+            </Card>\n+          </div>\n+        </TabsContent>\n+        <TabsContent value=\"timeline\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle>Audit Timeline</CardTitle>\n+              <CardDescription>Number of audits over time</CardDescription>\n+            </CardHeader>\n+            <CardContent className=\"h-[400px]\">\n+              <ResponsiveContainer width=\"100%\" height=\"100%\">\n+                <LineChart data={lineChartData}>\n+                  <XAxis dataKey=\"date\" />\n+                  <YAxis />\n+                  <Tooltip />\n+                  <Line type=\"monotone\" dataKey=\"count\" stroke=\"#042637\" strokeWidth={2} />\n+                </LineChart>\n+              </ResponsiveContainer>\n+            </CardContent>\n+          </Card>\n+        </TabsContent>\n+        <TabsContent value=\"details\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle>Audit Log</CardTitle>\n+              <CardDescription>Detailed view of all audit actions</CardDescription>\n+            </CardHeader>\n+            <CardContent>\n+              <Table>\n+                <TableHeader>\n+                  <TableRow>\n+                    <TableHead>Timestamp</TableHead>\n+                    <TableHead>Action</TableHead>\n+                    <TableHead>Details</TableHead>\n+                  </TableRow>\n+                </TableHeader>\n+                <TableBody>\n+                  {filteredData.map((audit) => {\n+                    const date = new Date(audit.timestamp.$date);\n+                    const isValidDate = !isNaN(date);\n+                    return (\n+                      <TableRow key={audit._id.$oid}>\n+                        <TableCell>\n+                          <div className=\"flex items-center space-x-2\">\n+                            <Calendar className=\"h-4 w-4\" />\n+                            <span>{isValidDate ? date.toLocaleDateString() : 'Invalid Date'}</span>\n+                            <Clock className=\"h-4 w-4 ml-2\" />\n+                            <span>{isValidDate ? date.toLocaleTimeString() : 'Invalid Date'}</span>\n+                          </div>\n+                        </TableCell>\n+                        <TableCell>\n+                          <Badge variant={audit.action === 'edit' ? 'default' : audit.action === 'report' ? 'secondary' : 'destructive'}>\n+                            {audit.action}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell>\n+                          {audit.action === 'edit' && (\n+                            <span>\n+                              Value changed from {audit.details.before.valuePerUnit} to {audit.details.after.valuePerUnit}\n+                            </span>\n+                          )}\n+                          {audit.action === 'report' && (\n+                            <span>\n+                              Report type: {audit.details.reportType}, Donations: {audit.details.donationIds.length}\n+                            </span>\n+                          )}\n+                          {audit.action === 'delete' && (\n+                            <span className=\"flex items-center space-x-2\">\n+                              <AlertCircle className=\"h-4 w-4 text-red-500\" />\n+                              <span>Reason: {audit.details.reason}</span>\n+                            </span>\n+                          )}\n+                        </TableCell>\n+                      </TableRow>\n+                    );\n+                  })}\n+                </TableBody>\n+              </Table>\n+            </CardContent>\n+          </Card>\n+        </TabsContent>\n+      </Tabs>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732002914255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,280 +22,9 @@\n \n   if (!res.ok) {\n     throw new Error(`Error fetching audits: ${res.status} ${res.statusText}`);\n   }\n-  return res.json();\n-  \n-};\n \n-const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n-\n-export function EnhancedAuditDashboardComponent() {\n-  const [auditData, setAuditData] = useState([]);\n-  const [timeFilter, setTimeFilter] = useState('all');\n-  const [error, setError] = useState('');\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    const fetchProfileAndAudits = async () => {\n-      const token = localStorage.getItem('authToken');\n-\n-      if (!token) {\n-        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n-        return;\n-      }\n-\n-      try {\n-        const profileRes = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-\n-        if (!profileRes.ok) {\n-          throw new Error(`Error fetching profile: ${profileRes.status} ${profileRes.statusText}`);\n-        }\n-\n-        const profileData = await profileRes.json();\n-\n-        if (profileData.charity && profileData.charity.userType === 'charity') {\n-          const charityId = profileData.charity.id;\n-          const audits = await fetchAuditData(charityId);\n-          setAuditData(audits);\n-        } else {\n-          setError('No autorizado. Solo las organizaciones pueden acceder a esta p√°gina.');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setError('Error fetching profile or audits');\n-      }\n-    };\n-\n-    fetchProfileAndAudits();\n-  }, []);\n-\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\n-\n-  const filteredData = auditData.filter(audit => {\n-    if (timeFilter === 'all') return true;\n-    const date = new Date(audit.timestamp.$date);\n-    const now = new Date();\n-    switch (timeFilter) {\n-      case 'today':\n-        return date.toDateString() === now.toDateString();\n-      case 'week':\n-        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n-        return date > weekAgo;\n-      case 'month':\n-        return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n-      default:\n-        return true;\n-    }\n-  });\n-\n-  const actionCounts = filteredData.reduce((acc, audit) => {\n-    acc[audit.action] = (acc[audit.action] || 0) + 1;\n-    return acc;\n-  }, {});\n-\n-  const pieChartData = Object.entries(actionCounts).map(([name, value]) => ({ name, value }));\n-\n-  const timelineData = filteredData.reduce((acc, audit) => {\n-    const date = new Date(audit.timestamp.$date).toLocaleDateString();\n-    acc[date] = (acc[date] || 0) + 1;\n-    return acc;\n-  }, {});\n-\n-  const lineChartData = Object.entries(timelineData).map(([date, count]) => ({ date, count }));\n-\n-  return (\n-    <div className=\"min-h-screen p-8\" style={{ backgroundColor: '#ECE3D4' }}>\n-      <h1 className=\"text-4xl font-bold mb-8\" style={{ color: '#042637' }}>Enhanced Audit Dashboard</h1>\n-      <div className=\"mb-4\">\n-        <Select value={timeFilter} onValueChange={setTimeFilter}>\n-          <SelectTrigger className=\"w-[180px]\">\n-            <SelectValue placeholder=\"Select time range\" />\n-          </SelectTrigger>\n-          <SelectContent>\n-            <SelectItem value=\"all\">All Time</SelectItem>\n-            <SelectItem value=\"today\">Today</SelectItem>\n-            <SelectItem value=\"week\">This Week</SelectItem>\n-            <SelectItem value=\"month\">This Month</SelectItem>\n-          </SelectContent>\n-        </Select>\n-      </div>\n-      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n-        <TabsList>\n-          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n-          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n-          <TabsTrigger value=\"details\">Audit Details</TabsTrigger>\n-        </TabsList>\n-        <TabsContent value=\"overview\">\n-          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Total Audits</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <div className=\"text-4xl font-bold\" style={{ color: '#042637' }}>{filteredData.length}</div>\n-                <p className=\"text-sm text-muted-foreground\">in selected time range</p>\n-              </CardContent>\n-            </Card>\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Audit Actions</CardTitle>\n-              </CardHeader>\n-              <CardContent className=\"h-[300px]\">\n-                <ResponsiveContainer width=\"100%\" height=\"100%\">\n-                  <PieChart>\n-                    <Pie\n-                      data={pieChartData}\n-                      cx=\"50%\"\n-                      cy=\"50%\"\n-                      labelLine={false}\n-                      outerRadius={80}\n-                      fill=\"#8884d8\"\n-                      dataKey=\"value\"\n-                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n-                    >\n-                      {pieChartData.map((entry, index) => (\n-                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n-                      ))}\n-                    </Pie>\n-                    <Tooltip />\n-                    <Legend />\n-                  </PieChart>\n-                </ResponsiveContainer>\n-              </CardContent>\n-            </Card>\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Recent Activity</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <ul className=\"space-y-2\">\n-                  {filteredData.slice(0, 5).map((audit) => (\n-                    <li key={audit._id.$oid} className=\"flex items-center space-x-2\">\n-                      {audit.action === 'edit' && <Edit size={16} />}\n-                      {audit.action === 'report' && <FileText size={16} />}\n-                      {audit.action === 'delete' && <Trash2 size={16} />}\n-                      <span>{audit.action} - {new Date(audit.timestamp.$date).toLocaleString()}</span>\n-                    </li>\n-                  ))}\n-                </ul>\n-              </CardContent>\n-            </Card>\n-          </div>\n-        </TabsContent>\n-        <TabsContent value=\"timeline\">\n-          <Card>\n-            <CardHeader>\n-              <CardTitle>Audit Timeline</CardTitle>\n-              <CardDescription>Number of audits over time</CardDescription>\n-            </CardHeader>\n-            <CardContent className=\"h-[400px]\">\n-              <ResponsiveContainer width=\"100%\" height=\"100%\">\n-                <LineChart data={lineChartData}>\n-                  <XAxis dataKey=\"date\" />\n-                  <YAxis />\n-                  <Tooltip />\n-                  <Line type=\"monotone\" dataKey=\"count\" stroke=\"#042637\" strokeWidth={2} />\n-                </LineChart>\n-              </ResponsiveContainer>\n-            </CardContent>\n-          </Card>\n-        </TabsContent>\n-        <TabsContent value=\"details\">\n-          <Card>\n-            <CardHeader>\n-              <CardTitle>Audit Log</CardTitle>\n-              <CardDescription>Detailed view of all audit actions</CardDescription>\n-            </CardHeader>\n-            <CardContent>\n-              <Table>\n-                <TableHeader>\n-                  <TableRow>\n-                    <TableHead>Timestamp</TableHead>\n-                    <TableHead>Action</TableHead>\n-                    <TableHead>Details</TableHead>\n-                  </TableRow>\n-                </TableHeader>\n-                <TableBody>\n-                  {filteredData.map((audit) => {\n-                    const date = new Date(audit.timestamp.$date);\n-                    const isValidDate = !isNaN(date);\n-                    return (\n-                      <TableRow key={audit._id.$oid}>\n-                        <TableCell>\n-                          <div className=\"flex items-center space-x-2\">\n-                            <Calendar className=\"h-4 w-4\" />\n-                            <span>{isValidDate ? date.toLocaleDateString() : 'Invalid Date'}</span>\n-                            <Clock className=\"h-4 w-4 ml-2\" />\n-                            <span>{isValidDate ? date.toLocaleTimeString() : 'Invalid Date'}</span>\n-                          </div>\n-                        </TableCell>\n-                        <TableCell>\n-                          <Badge variant={audit.action === 'edit' ? 'default' : audit.action === 'report' ? 'secondary' : 'destructive'}>\n-                            {audit.action}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell>\n-                          {audit.action === 'edit' && (\n-                            <span>\n-                              Value changed from {audit.details.before.valuePerUnit} to {audit.details.after.valuePerUnit}\n-                            </span>\n-                          )}\n-                          {audit.action === 'report' && (\n-                            <span>\n-                              Report type: {audit.details.reportType}, Donations: {audit.details.donationIds.length}\n-                            </span>\n-                          )}\n-                          {audit.action === 'delete' && (\n-                            <span className=\"flex items-center space-x-2\">\n-                              <AlertCircle className=\"h-4 w-4 text-red-500\" />\n-                              <span>Reason: {audit.details.reason}</span>\n-                            </span>\n-                          )}\n-                        </TableCell>\n-                      </TableRow>\n-                    );\n-                  })}\n-                </TableBody>\n-              </Table>\n-            </CardContent>\n-          </Card>\n-        </TabsContent>\n-      </Tabs>\n-    </div>\n-  );\n-}\n-\"use client\";\n-\n-import { useState, useEffect } from 'react';\n-import { useRouter } from 'next/navigation';\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n-import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend, LineChart, Line } from 'recharts';\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n-import { Edit, FileText, Trash2, AlertCircle, Calendar, Clock } from 'lucide-react';\n-import { Badge } from \"@/components/ui/badge\";\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n-\n-const fetchAuditData = async (charityId) => {\n-  const token = localStorage.getItem('authToken');\n-  const res = await fetch(`http://localhost:3001/audits/${charityId}`, {\n-    method: 'GET',\n-    headers: {\n-      'Content-Type': 'application/json',\n-      'Authorization': `Bearer ${token}`\n-    }\n-  });\n-\n-  if (!res.ok) {\n-    throw new Error(`Error fetching audits: ${res.status} ${res.statusText}`);\n-  }\n   return res.json();\n };\n \n const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n@@ -332,8 +61,9 @@\n \n         if (profileData.charity && profileData.charity.userType === 'charity') {\n           const charityId = profileData.charity.id;\n           const audits = await fetchAuditData(charityId);\n+          console.log('Datos recibidos del backend:', audits);\n           setAuditData(audits);\n         } else {\n           setError('No autorizado. Solo las organizaciones pueden acceder a esta p√°gina.');\n         }\n@@ -445,10 +175,10 @@\n                 <CardTitle>Recent Activity</CardTitle>\n               </CardHeader>\n               <CardContent>\n                 <ul className=\"space-y-2\">\n-                  {filteredData.slice(0, 5).map((audit) => (\n-                    <li key={audit._id.$oid} className=\"flex items-center space-x-2\">\n+                  {filteredData.slice(0, 5).map((audit, index) => (\n+                    <li key={index} className=\"flex items-center space-x-2\">\n                       {audit.action === 'edit' && <Edit size={16} />}\n                       {audit.action === 'report' && <FileText size={16} />}\n                       {audit.action === 'delete' && <Trash2 size={16} />}\n                       <span>{audit.action} - {new Date(audit.timestamp.$date).toLocaleString()}</span>\n@@ -492,13 +222,13 @@\n                     <TableHead>Details</TableHead>\n                   </TableRow>\n                 </TableHeader>\n                 <TableBody>\n-                  {filteredData.map((audit) => {\n+                  {filteredData.map((audit, index) => {\n                     const date = new Date(audit.timestamp.$date);\n                     const isValidDate = !isNaN(date);\n                     return (\n-                      <TableRow key={audit._id.$oid}>\n+                      <TableRow key={index}>\n                         <TableCell>\n                           <div className=\"flex items-center space-x-2\">\n                             <Calendar className=\"h-4 w-4\" />\n                             <span>{isValidDate ? date.toLocaleDateString() : 'Invalid Date'}</span>\n@@ -539,277 +269,5 @@\n         </TabsContent>\n       </Tabs>\n     </div>\n   );\n-}\n-\"use client\";\n-\n-import { useState, useEffect } from 'react';\n-import { useRouter } from 'next/navigation';\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n-import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend, LineChart, Line } from 'recharts';\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n-import { Edit, FileText, Trash2, AlertCircle, Calendar, Clock } from 'lucide-react';\n-import { Badge } from \"@/components/ui/badge\";\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n-\n-const fetchAuditData = async (charityId) => {\n-  const token = localStorage.getItem('authToken');\n-  const res = await fetch(`http://localhost:3001/audits/${charityId}`, {\n-    method: 'GET',\n-    headers: {\n-      'Content-Type': 'application/json',\n-      'Authorization': `Bearer ${token}`\n-    }\n-  });\n-\n-  if (!res.ok) {\n-    throw new Error(`Error fetching audits: ${res.status} ${res.statusText}`);\n-  }\n-\n-  return res.json();\n-};\n-\n-const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n-\n-export function EnhancedAuditDashboardComponent() {\n-  const [auditData, setAuditData] = useState([]);\n-  const [timeFilter, setTimeFilter] = useState('all');\n-  const [error, setError] = useState('');\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    const fetchProfileAndAudits = async () => {\n-      const token = localStorage.getItem('authToken');\n-\n-      if (!token) {\n-        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n-        return;\n-      }\n-\n-      try {\n-        const profileRes = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-\n-        if (!profileRes.ok) {\n-          throw new Error(`Error fetching profile: ${profileRes.status} ${profileRes.statusText}`);\n-        }\n-\n-        const profileData = await profileRes.json();\n-\n-        if (profileData.charity && profileData.charity.userType === 'charity') {\n-          const charityId = profileData.charity.id;\n-          const audits = await fetchAuditData(charityId);\n-          setAuditData(audits);\n-        } else {\n-          setError('No autorizado. Solo las organizaciones pueden acceder a esta p√°gina.');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setError('Error fetching profile or audits');\n-      }\n-    };\n-\n-    fetchProfileAndAudits();\n-  }, []);\n-\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\n-\n-  const filteredData = auditData.filter(audit => {\n-    if (timeFilter === 'all') return true;\n-    const date = new Date(audit.timestamp.$date);\n-    const now = new Date();\n-    switch (timeFilter) {\n-      case 'today':\n-        return date.toDateString() === now.toDateString();\n-      case 'week':\n-        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n-        return date > weekAgo;\n-      case 'month':\n-        return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n-      default:\n-        return true;\n-    }\n-  });\n-\n-  const actionCounts = filteredData.reduce((acc, audit) => {\n-    acc[audit.action] = (acc[audit.action] || 0) + 1;\n-    return acc;\n-  }, {});\n-\n-  const pieChartData = Object.entries(actionCounts).map(([name, value]) => ({ name, value }));\n-\n-  const timelineData = filteredData.reduce((acc, audit) => {\n-    const date = new Date(audit.timestamp.$date).toLocaleDateString();\n-    acc[date] = (acc[date] || 0) + 1;\n-    return acc;\n-  }, {});\n-\n-  const lineChartData = Object.entries(timelineData).map(([date, count]) => ({ date, count }));\n-\n-  return (\n-    <div className=\"min-h-screen p-8\" style={{ backgroundColor: '#ECE3D4' }}>\n-      <h1 className=\"text-4xl font-bold mb-8\" style={{ color: '#042637' }}>Enhanced Audit Dashboard</h1>\n-      <div className=\"mb-4\">\n-        <Select value={timeFilter} onValueChange={setTimeFilter}>\n-          <SelectTrigger className=\"w-[180px]\">\n-            <SelectValue placeholder=\"Select time range\" />\n-          </SelectTrigger>\n-          <SelectContent>\n-            <SelectItem value=\"all\">All Time</SelectItem>\n-            <SelectItem value=\"today\">Today</SelectItem>\n-            <SelectItem value=\"week\">This Week</SelectItem>\n-            <SelectItem value=\"month\">This Month</SelectItem>\n-          </SelectContent>\n-        </Select>\n-      </div>\n-      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n-        <TabsList>\n-          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n-          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n-          <TabsTrigger value=\"details\">Audit Details</TabsTrigger>\n-        </TabsList>\n-        <TabsContent value=\"overview\">\n-          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Total Audits</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <div className=\"text-4xl font-bold\" style={{ color: '#042637' }}>{filteredData.length}</div>\n-                <p className=\"text-sm text-muted-foreground\">in selected time range</p>\n-              </CardContent>\n-            </Card>\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Audit Actions</CardTitle>\n-              </CardHeader>\n-              <CardContent className=\"h-[300px]\">\n-                <ResponsiveContainer width=\"100%\" height=\"100%\">\n-                  <PieChart>\n-                    <Pie\n-                      data={pieChartData}\n-                      cx=\"50%\"\n-                      cy=\"50%\"\n-                      labelLine={false}\n-                      outerRadius={80}\n-                      fill=\"#8884d8\"\n-                      dataKey=\"value\"\n-                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n-                    >\n-                      {pieChartData.map((entry, index) => (\n-                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n-                      ))}\n-                    </Pie>\n-                    <Tooltip />\n-                    <Legend />\n-                  </PieChart>\n-                </ResponsiveContainer>\n-              </CardContent>\n-            </Card>\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Recent Activity</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <ul className=\"space-y-2\">\n-                  {filteredData.slice(0, 5).map((audit) => (\n-                    <li key={audit._id.$oid} className=\"flex items-center space-x-2\">\n-                      {audit.action === 'edit' && <Edit size={16} />}\n-                      {audit.action === 'report' && <FileText size={16} />}\n-                      {audit.action === 'delete' && <Trash2 size={16} />}\n-                      <span>{audit.action} - {new Date(audit.timestamp.$date).toLocaleString()}</span>\n-                    </li>\n-                  ))}\n-                </ul>\n-              </CardContent>\n-            </Card>\n-          </div>\n-        </TabsContent>\n-        <TabsContent value=\"timeline\">\n-          <Card>\n-            <CardHeader>\n-              <CardTitle>Audit Timeline</CardTitle>\n-              <CardDescription>Number of audits over time</CardDescription>\n-            </CardHeader>\n-            <CardContent className=\"h-[400px]\">\n-              <ResponsiveContainer width=\"100%\" height=\"100%\">\n-                <LineChart data={lineChartData}>\n-                  <XAxis dataKey=\"date\" />\n-                  <YAxis />\n-                  <Tooltip />\n-                  <Line type=\"monotone\" dataKey=\"count\" stroke=\"#042637\" strokeWidth={2} />\n-                </LineChart>\n-              </ResponsiveContainer>\n-            </CardContent>\n-          </Card>\n-        </TabsContent>\n-        <TabsContent value=\"details\">\n-          <Card>\n-            <CardHeader>\n-              <CardTitle>Audit Log</CardTitle>\n-              <CardDescription>Detailed view of all audit actions</CardDescription>\n-            </CardHeader>\n-            <CardContent>\n-              <Table>\n-                <TableHeader>\n-                  <TableRow>\n-                    <TableHead>Timestamp</TableHead>\n-                    <TableHead>Action</TableHead>\n-                    <TableHead>Details</TableHead>\n-                  </TableRow>\n-                </TableHeader>\n-                <TableBody>\n-                  {filteredData.map((audit) => {\n-                    const date = new Date(audit.timestamp.$date);\n-                    const isValidDate = !isNaN(date);\n-                    return (\n-                      <TableRow key={audit._id.$oid}>\n-                        <TableCell>\n-                          <div className=\"flex items-center space-x-2\">\n-                            <Calendar className=\"h-4 w-4\" />\n-                            <span>{isValidDate ? date.toLocaleDateString() : 'Invalid Date'}</span>\n-                            <Clock className=\"h-4 w-4 ml-2\" />\n-                            <span>{isValidDate ? date.toLocaleTimeString() : 'Invalid Date'}</span>\n-                          </div>\n-                        </TableCell>\n-                        <TableCell>\n-                          <Badge variant={audit.action === 'edit' ? 'default' : audit.action === 'report' ? 'secondary' : 'destructive'}>\n-                            {audit.action}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell>\n-                          {audit.action === 'edit' && (\n-                            <span>\n-                              Value changed from {audit.details.before.valuePerUnit} to {audit.details.after.valuePerUnit}\n-                            </span>\n-                          )}\n-                          {audit.action === 'report' && (\n-                            <span>\n-                              Report type: {audit.details.reportType}, Donations: {audit.details.donationIds.length}\n-                            </span>\n-                          )}\n-                          {audit.action === 'delete' && (\n-                            <span className=\"flex items-center space-x-2\">\n-                              <AlertCircle className=\"h-4 w-4 text-red-500\" />\n-                              <span>Reason: {audit.details.reason}</span>\n-                            </span>\n-                          )}\n-                        </TableCell>\n-                      </TableRow>\n-                    );\n-                  })}\n-                </TableBody>\n-              </Table>\n-            </CardContent>\n-          </Card>\n-        </TabsContent>\n-      </Tabs>\n-    </div>\n-  );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732003112775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,273 +0,0 @@\n-\"use client\";\n-\n-import { useState, useEffect } from 'react';\n-import { useRouter } from 'next/navigation';\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n-import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend, LineChart, Line } from 'recharts';\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n-import { Edit, FileText, Trash2, AlertCircle, Calendar, Clock } from 'lucide-react';\n-import { Badge } from \"@/components/ui/badge\";\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n-\n-const fetchAuditData = async (charityId) => {\n-  const token = localStorage.getItem('authToken');\n-  const res = await fetch(`http://localhost:3001/audits/${charityId}`, {\n-    method: 'GET',\n-    headers: {\n-      'Content-Type': 'application/json',\n-      'Authorization': `Bearer ${token}`\n-    }\n-  });\n-\n-  if (!res.ok) {\n-    throw new Error(`Error fetching audits: ${res.status} ${res.statusText}`);\n-  }\n-\n-  return res.json();\n-};\n-\n-const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n-\n-export function EnhancedAuditDashboardComponent() {\n-  const [auditData, setAuditData] = useState([]);\n-  const [timeFilter, setTimeFilter] = useState('all');\n-  const [error, setError] = useState('');\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    const fetchProfileAndAudits = async () => {\n-      const token = localStorage.getItem('authToken');\n-\n-      if (!token) {\n-        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n-        return;\n-      }\n-\n-      try {\n-        const profileRes = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          }\n-        });\n-\n-        if (!profileRes.ok) {\n-          throw new Error(`Error fetching profile: ${profileRes.status} ${profileRes.statusText}`);\n-        }\n-\n-        const profileData = await profileRes.json();\n-\n-        if (profileData.charity && profileData.charity.userType === 'charity') {\n-          const charityId = profileData.charity.id;\n-          const audits = await fetchAuditData(charityId);\n-          console.log('Datos recibidos del backend:', audits);\n-          setAuditData(audits);\n-        } else {\n-          setError('No autorizado. Solo las organizaciones pueden acceder a esta p√°gina.');\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-        setError('Error fetching profile or audits');\n-      }\n-    };\n-\n-    fetchProfileAndAudits();\n-  }, []);\n-\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\n-\n-  const filteredData = auditData.filter(audit => {\n-    if (timeFilter === 'all') return true;\n-    const date = new Date(audit.timestamp.$date);\n-    const now = new Date();\n-    switch (timeFilter) {\n-      case 'today':\n-        return date.toDateString() === now.toDateString();\n-      case 'week':\n-        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n-        return date > weekAgo;\n-      case 'month':\n-        return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n-      default:\n-        return true;\n-    }\n-  });\n-\n-  const actionCounts = filteredData.reduce((acc, audit) => {\n-    acc[audit.action] = (acc[audit.action] || 0) + 1;\n-    return acc;\n-  }, {});\n-\n-  const pieChartData = Object.entries(actionCounts).map(([name, value]) => ({ name, value }));\n-\n-  const timelineData = filteredData.reduce((acc, audit) => {\n-    const date = new Date(audit.timestamp.$date).toLocaleDateString();\n-    acc[date] = (acc[date] || 0) + 1;\n-    return acc;\n-  }, {});\n-\n-  const lineChartData = Object.entries(timelineData).map(([date, count]) => ({ date, count }));\n-\n-  return (\n-    <div className=\"min-h-screen p-8\" style={{ backgroundColor: '#ECE3D4' }}>\n-      <h1 className=\"text-4xl font-bold mb-8\" style={{ color: '#042637' }}>Enhanced Audit Dashboard</h1>\n-      <div className=\"mb-4\">\n-        <Select value={timeFilter} onValueChange={setTimeFilter}>\n-          <SelectTrigger className=\"w-[180px]\">\n-            <SelectValue placeholder=\"Select time range\" />\n-          </SelectTrigger>\n-          <SelectContent>\n-            <SelectItem value=\"all\">All Time</SelectItem>\n-            <SelectItem value=\"today\">Today</SelectItem>\n-            <SelectItem value=\"week\">This Week</SelectItem>\n-            <SelectItem value=\"month\">This Month</SelectItem>\n-          </SelectContent>\n-        </Select>\n-      </div>\n-      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n-        <TabsList>\n-          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n-          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n-          <TabsTrigger value=\"details\">Audit Details</TabsTrigger>\n-        </TabsList>\n-        <TabsContent value=\"overview\">\n-          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Total Audits</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <div className=\"text-4xl font-bold\" style={{ color: '#042637' }}>{filteredData.length}</div>\n-                <p className=\"text-sm text-muted-foreground\">in selected time range</p>\n-              </CardContent>\n-            </Card>\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Audit Actions</CardTitle>\n-              </CardHeader>\n-              <CardContent className=\"h-[300px]\">\n-                <ResponsiveContainer width=\"100%\" height=\"100%\">\n-                  <PieChart>\n-                    <Pie\n-                      data={pieChartData}\n-                      cx=\"50%\"\n-                      cy=\"50%\"\n-                      labelLine={false}\n-                      outerRadius={80}\n-                      fill=\"#8884d8\"\n-                      dataKey=\"value\"\n-                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n-                    >\n-                      {pieChartData.map((entry, index) => (\n-                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n-                      ))}\n-                    </Pie>\n-                    <Tooltip />\n-                    <Legend />\n-                  </PieChart>\n-                </ResponsiveContainer>\n-              </CardContent>\n-            </Card>\n-            <Card>\n-              <CardHeader>\n-                <CardTitle>Recent Activity</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <ul className=\"space-y-2\">\n-                  {filteredData.slice(0, 5).map((audit, index) => (\n-                    <li key={index} className=\"flex items-center space-x-2\">\n-                      {audit.action === 'edit' && <Edit size={16} />}\n-                      {audit.action === 'report' && <FileText size={16} />}\n-                      {audit.action === 'delete' && <Trash2 size={16} />}\n-                      <span>{audit.action} - {new Date(audit.timestamp.$date).toLocaleString()}</span>\n-                    </li>\n-                  ))}\n-                </ul>\n-              </CardContent>\n-            </Card>\n-          </div>\n-        </TabsContent>\n-        <TabsContent value=\"timeline\">\n-          <Card>\n-            <CardHeader>\n-              <CardTitle>Audit Timeline</CardTitle>\n-              <CardDescription>Number of audits over time</CardDescription>\n-            </CardHeader>\n-            <CardContent className=\"h-[400px]\">\n-              <ResponsiveContainer width=\"100%\" height=\"100%\">\n-                <LineChart data={lineChartData}>\n-                  <XAxis dataKey=\"date\" />\n-                  <YAxis />\n-                  <Tooltip />\n-                  <Line type=\"monotone\" dataKey=\"count\" stroke=\"#042637\" strokeWidth={2} />\n-                </LineChart>\n-              </ResponsiveContainer>\n-            </CardContent>\n-          </Card>\n-        </TabsContent>\n-        <TabsContent value=\"details\">\n-          <Card>\n-            <CardHeader>\n-              <CardTitle>Audit Log</CardTitle>\n-              <CardDescription>Detailed view of all audit actions</CardDescription>\n-            </CardHeader>\n-            <CardContent>\n-              <Table>\n-                <TableHeader>\n-                  <TableRow>\n-                    <TableHead>Timestamp</TableHead>\n-                    <TableHead>Action</TableHead>\n-                    <TableHead>Details</TableHead>\n-                  </TableRow>\n-                </TableHeader>\n-                <TableBody>\n-                  {filteredData.map((audit, index) => {\n-                    const date = new Date(audit.timestamp.$date);\n-                    const isValidDate = !isNaN(date);\n-                    return (\n-                      <TableRow key={index}>\n-                        <TableCell>\n-                          <div className=\"flex items-center space-x-2\">\n-                            <Calendar className=\"h-4 w-4\" />\n-                            <span>{isValidDate ? date.toLocaleDateString() : 'Invalid Date'}</span>\n-                            <Clock className=\"h-4 w-4 ml-2\" />\n-                            <span>{isValidDate ? date.toLocaleTimeString() : 'Invalid Date'}</span>\n-                          </div>\n-                        </TableCell>\n-                        <TableCell>\n-                          <Badge variant={audit.action === 'edit' ? 'default' : audit.action === 'report' ? 'secondary' : 'destructive'}>\n-                            {audit.action}\n-                          </Badge>\n-                        </TableCell>\n-                        <TableCell>\n-                          {audit.action === 'edit' && (\n-                            <span>\n-                              Value changed from {audit.details.before.valuePerUnit} to {audit.details.after.valuePerUnit}\n-                            </span>\n-                          )}\n-                          {audit.action === 'report' && (\n-                            <span>\n-                              Report type: {audit.details.reportType}, Donations: {audit.details.donationIds.length}\n-                            </span>\n-                          )}\n-                          {audit.action === 'delete' && (\n-                            <span className=\"flex items-center space-x-2\">\n-                              <AlertCircle className=\"h-4 w-4 text-red-500\" />\n-                              <span>Reason: {audit.details.reason}</span>\n-                            </span>\n-                          )}\n-                        </TableCell>\n-                      </TableRow>\n-                    );\n-                  })}\n-                </TableBody>\n-              </Table>\n-            </CardContent>\n-          </Card>\n-        </TabsContent>\n-      </Tabs>\n-    </div>\n-  );\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732003594646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,287 @@\n+\"use client\";\n+\n+import { useState, useEffect } from 'react';\n+import { useRouter } from 'next/navigation';\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n+import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend, LineChart, Line } from 'recharts';\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n+import { Edit, FileText, Trash2, AlertCircle, Calendar, Clock, LogIn } from 'lucide-react';\n+import { Badge } from \"@/components/ui/badge\";\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n+\n+const fetchAuditData = async (charityId) => {\n+  const token = localStorage.getItem('authToken');\n+  const res = await fetch(`http://localhost:3001/audits/${charityId}`, {\n+    method: 'GET',\n+    headers: {\n+      'Content-Type': 'application/json',\n+      'Authorization': `Bearer ${token}`\n+    }\n+  });\n+\n+  if (!res.ok) {\n+    throw new Error(`Error fetching audits: ${res.status} ${res.statusText}`);\n+  }\n+\n+  return res.json();\n+};\n+\n+const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n+\n+export function EnhancedAuditDashboardComponent() {\n+  const [auditData, setAuditData] = useState([]);\n+  const [timeFilter, setTimeFilter] = useState('all');\n+  const [error, setError] = useState('');\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    const fetchProfileAndAudits = async () => {\n+      const token = localStorage.getItem('authToken');\n+\n+      if (!token) {\n+        setError('P√ÅGINA PROTEGIDA, TIENES QUE INICIAR SESI√ìN');\n+        return;\n+      }\n+\n+      try {\n+        const profileRes = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          }\n+        });\n+\n+        if (!profileRes.ok) {\n+          throw new Error(`Error al obtener el perfil: ${profileRes.status} ${profileRes.statusText}`);\n+        }\n+\n+        const profileData = await profileRes.json();\n+\n+        if (profileData.charity && profileData.charity.userType === 'charity') {\n+          const charityId = profileData.charity.id;\n+          const audits = await fetchAuditData(charityId);\n+          console.log('Datos recibidos del backend:', audits);\n+          setAuditData(audits);\n+        } else {\n+          setError('No autorizado. Solo las organizaciones pueden acceder a esta p√°gina.');\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+        setError('Error al obtener el perfil o las auditor√≠as');\n+      }\n+    };\n+\n+    fetchProfileAndAudits();\n+  }, []);\n+\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\n+\n+  const filteredData = auditData.filter(audit => {\n+    if (timeFilter === 'all') return true;\n+    const date = new Date(audit.timestamp);\n+    const now = new Date();\n+    switch (timeFilter) {\n+      case 'today':\n+        return date.toDateString() === now.toDateString();\n+      case 'week':\n+        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n+        return date > weekAgo;\n+      case 'month':\n+        return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n+      default:\n+        return true;\n+    }\n+  });\n+\n+  const actionCounts = filteredData.reduce((acc, audit) => {\n+    acc[audit.action] = (acc[audit.action] || 0) + 1;\n+    return acc;\n+  }, {});\n+\n+  const pieChartData = Object.entries(actionCounts).map(([name, value]) => ({ name, value }));\n+\n+  const timelineData = filteredData.reduce((acc, audit) => {\n+    const date = new Date(audit.timestamp).toLocaleDateString();\n+    acc[date] = (acc[date] || 0) + 1;\n+    return acc;\n+  }, {});\n+\n+  const lineChartData = Object.entries(timelineData).map(([date, count]) => ({ date, count }));\n+\n+  return (\n+    <div className=\"min-h-screen p-8\" style={{ backgroundColor: '#ECE3D4' }}>\n+      <h1 className=\"text-4xl font-bold mb-8\" style={{ color: '#042637' }}>Panel de Auditor√≠as Mejorado</h1>\n+      <div className=\"mb-4\">\n+        <Select value={timeFilter} onValueChange={setTimeFilter}>\n+          <SelectTrigger className=\"w-[180px]\">\n+            <SelectValue placeholder=\"Seleccionar rango de tiempo\" />\n+          </SelectTrigger>\n+          <SelectContent>\n+            <SelectItem value=\"all\">Todo el tiempo</SelectItem>\n+            <SelectItem value=\"today\">Hoy</SelectItem>\n+            <SelectItem value=\"week\">Esta semana</SelectItem>\n+            <SelectItem value=\"month\">Este mes</SelectItem>\n+          </SelectContent>\n+        </Select>\n+      </div>\n+      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n+        <TabsList>\n+          <TabsTrigger value=\"overview\">Resumen</TabsTrigger>\n+          <TabsTrigger value=\"timeline\">L√≠nea de tiempo</TabsTrigger>\n+          <TabsTrigger value=\"details\">Detalles de Auditor√≠a</TabsTrigger>\n+        </TabsList>\n+        <TabsContent value=\"overview\">\n+          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Total de Auditor√≠as</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <div className=\"text-4xl font-bold\" style={{ color: '#042637' }}>{filteredData.length}</div>\n+                <p className=\"text-sm text-muted-foreground\">en el rango de tiempo seleccionado</p>\n+              </CardContent>\n+            </Card>\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Acciones de Auditor√≠a</CardTitle>\n+              </CardHeader>\n+              <CardContent className=\"h-[300px]\">\n+                <ResponsiveContainer width=\"100%\" height=\"100%\">\n+                  <PieChart>\n+                    <Pie\n+                      data={pieChartData}\n+                      cx=\"50%\"\n+                      cy=\"50%\"\n+                      labelLine={false}\n+                      outerRadius={80}\n+                      fill=\"#8884d8\"\n+                      dataKey=\"value\"\n+                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n+                    >\n+                      {pieChartData.map((entry, index) => (\n+                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n+                      ))}\n+                    </Pie>\n+                    <Tooltip />\n+                    <Legend />\n+                  </PieChart>\n+                </ResponsiveContainer>\n+              </CardContent>\n+            </Card>\n+            <Card>\n+              <CardHeader>\n+                <CardTitle>Actividad Reciente</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <ul className=\"space-y-2\">\n+                  {filteredData.slice(0, 5).map((audit) => {\n+                    const date = new Date(audit.timestamp);\n+                    const isValidDate = !isNaN(date);\n+                    return (\n+                      <li key={audit._id} className=\"flex items-center space-x-2\">\n+                        {audit.action === 'edit' && <Edit size={16} />}\n+                        {audit.action === 'report' && <FileText size={16} />}\n+                        {audit.action === 'delete' && <Trash2 size={16} />}\n+                        {audit.action === 'login' && <LogIn size={16} />}\n+                        <span>{audit.action} - {isValidDate ? date.toLocaleString() : 'Fecha inv√°lida'}</span>\n+                      </li>\n+                    );\n+                  })}\n+                </ul>\n+              </CardContent>\n+            </Card>\n+          </div>\n+        </TabsContent>\n+        <TabsContent value=\"timeline\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle>L√≠nea de Tiempo de Auditor√≠a</CardTitle>\n+              <CardDescription>N√∫mero de auditor√≠as a lo largo del tiempo</CardDescription>\n+            </CardHeader>\n+            <CardContent className=\"h-[400px]\">\n+              <ResponsiveContainer width=\"100%\" height=\"100%\">\n+                <LineChart data={lineChartData}>\n+                  <XAxis dataKey=\"date\" />\n+                  <YAxis />\n+                  <Tooltip />\n+                  <Line type=\"monotone\" dataKey=\"count\" stroke=\"#042637\" strokeWidth={2} />\n+                </LineChart>\n+              </ResponsiveContainer>\n+            </CardContent>\n+          </Card>\n+        </TabsContent>\n+        <TabsContent value=\"details\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle>Registro de Auditor√≠a</CardTitle>\n+              <CardDescription>Vista detallada de todas las acciones de auditor√≠a</CardDescription>\n+            </CardHeader>\n+            <CardContent>\n+              <Table>\n+                <TableHeader>\n+                  <TableRow>\n+                    <TableHead>Fecha y Hora</TableHead>\n+                    <TableHead>Acci√≥n</TableHead>\n+                    <TableHead>Detalles</TableHead>\n+                    <TableHead>Usuario</TableHead>\n+                  </TableRow>\n+                </TableHeader>\n+                <TableBody>\n+                  {filteredData.map((audit) => {\n+                    const date = new Date(audit.timestamp);\n+                    const isValidDate = !isNaN(date);\n+                    return (\n+                      <TableRow key={audit._id}>\n+                        <TableCell>\n+                          <div className=\"flex items-center space-x-2\">\n+                            <Calendar className=\"h-4 w-4\" />\n+                            <span>{isValidDate ? date.toLocaleDateString() : 'Fecha inv√°lida'}</span>\n+                            <Clock className=\"h-4 w-4 ml-2\" />\n+                            <span>{isValidDate ? date.toLocaleTimeString() : 'Fecha inv√°lida'}</span>\n+                          </div>\n+                        </TableCell>\n+                        <TableCell>\n+                          <Badge variant={audit.action === 'edit' ? 'default' : audit.action === 'report' ? 'secondary' : 'destructive'}>\n+                            {audit.action}\n+                          </Badge>\n+                        </TableCell>\n+                        <TableCell>\n+                          {audit.action === 'edit' && (\n+                            <span>\n+                              Valor cambiado de {audit.details.before.valuePerUnit} a {audit.details.after.valuePerUnit}\n+                            </span>\n+                          )}\n+                          {audit.action === 'report' && (\n+                            <span>\n+                              Tipo de reporte: {audit.details.reportType}, Donaciones: {audit.details.donationIds.length}\n+                            </span>\n+                          )}\n+                          {audit.action === 'delete' && (\n+                            <span className=\"flex items-center space-x-2\">\n+                              <AlertCircle className=\"h-4 w-4 text-red-500\" />\n+                              <span>Raz√≥n: {audit.details.reason}</span>\n+                            </span>\n+                          )}\n+                          {audit.action === 'login' && (\n+                            <span>\n+                              {audit.details.message}\n+                            </span>\n+                          )}\n+                        </TableCell>\n+                        <TableCell>\n+                          <span>{audit.userName}</span>\n+                        </TableCell>\n+                      </TableRow>\n+                    );\n+                  })}\n+                </TableBody>\n+              </Table>\n+            </CardContent>\n+          </Card>\n+        </TabsContent>\n+      </Tabs>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1732001831614,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend, LineChart, Line } from 'recharts';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Edit, FileText, Trash2, AlertCircle, Calendar, Clock } from 'lucide-react';\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nconst fetchAuditData = async (charityId) => {\n  const token = localStorage.getItem('authToken');\n  const res = await fetch(`http://localhost:3001/audits/${charityId}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  if (!res.ok) {\n    throw new Error(`Error fetching audits: ${res.status} ${res.statusText}`);\n  }\n\n  return res.json();\n};\n\nexport function EnhancedAuditDashboardComponent() {\n  const [auditData, setAuditData] = useState([]);\n  const [timeFilter, setTimeFilter] = useState('all');\n  const [error, setError] = useState('');\n  const router = useRouter();\n\n  useEffect(() => {\n    const fetchProfileAndAudits = async () => {\n      const token = localStorage.getItem('authToken');\n\n      if (!token) {\n        setError('PAGINA PROTEGIDA TIENES QUE INICIAR SESION');\n        return;\n      }\n\n      try {\n        const profileRes = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        if (!profileRes.ok) {\n          throw new Error(`Error fetching profile: ${profileRes.status} ${profileRes.statusText}`);\n        }\n\n        const profileData = await profileRes.json();\n\n        if (profileData.charity && profileData.charity.userType === 'charity') {\n          const charityId = profileData.charity.id;\n          const audits = await fetchAuditData(charityId);\n          setAuditData(audits);\n        } else {\n          setError('No autorizado. Solo las organizaciones pueden acceder a esta p√°gina.');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        setError('Error fetching profile or audits');\n      }\n    };\n\n    fetchProfileAndAudits();\n  }, []);\n\n  if (error) return <p className=\"text-red-500\">{error}</p>;\n\n  const filteredData = auditData.filter(audit => {\n    if (timeFilter === 'all') return true;\n    const date = new Date(audit.timestamp.$date);\n    const now = new Date();\n    switch (timeFilter) {\n      case 'today':\n        return date.toDateString() === now.toDateString();\n      case 'week':\n        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        return date > weekAgo;\n      case 'month':\n        return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n      default:\n        return true;\n    }\n  });\n\n  const actionCounts = filteredData.reduce((acc, audit) => {\n    acc[audit.action] = (acc[audit.action] || 0) + 1;\n    return acc;\n  }, {});\n\n  const pieChartData = Object.entries(actionCounts).map(([name, value]) => ({ name, value }));\n\n  const timelineData = filteredData.reduce((acc, audit) => {\n    const date = new Date(audit.timestamp.$date).toLocaleDateString();\n    acc[date] = (acc[date] || 0) + 1;\n    return acc;\n  }, {});\n\n  const lineChartData = Object.entries(timelineData).map(([date, count]) => ({ date, count }));\n\n  return (\n    <div className=\"min-h-screen p-8\" style={{ backgroundColor: '#ECE3D4' }}>\n      <h1 className=\"text-4xl font-bold mb-8\" style={{ color: '#042637' }}>Enhanced Audit Dashboard</h1>\n      <div className=\"mb-4\">\n        <Select value={timeFilter} onValueChange={setTimeFilter}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Select time range\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Time</SelectItem>\n            <SelectItem value=\"today\">Today</SelectItem>\n            <SelectItem value=\"week\">This Week</SelectItem>\n            <SelectItem value=\"month\">This Month</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n          <TabsTrigger value=\"details\">Audit Details</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"overview\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Total Audits</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-4xl font-bold\" style={{ color: '#042637' }}>{filteredData.length}</div>\n                <p className=\"text-sm text-muted-foreground\">in selected time range</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle>Audit Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {pieChartData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2\">\n                  {filteredData.slice(0, 5).map((audit) => (\n                    <li key={audit._id.$oid} className=\"flex items-center space-x-2\">\n                      {audit.action === 'edit' && <Edit size={16} />}\n                      {audit.action === 'report' && <FileText size={16} />}\n                      {audit.action === 'delete' && <Trash2 size={16} />}\n                      <span>{audit.action} - {new Date(audit.timestamp.$date).toLocaleString()}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n        <TabsContent value=\"timeline\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Audit Timeline</CardTitle>\n              <CardDescription>Number of audits over time</CardDescription>\n            </CardHeader>\n            <CardContent className=\"h-[400px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={lineChartData}>\n                  <XAxis dataKey=\"date\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Line type=\"monotone\" dataKey=\"count\" stroke=\"#042637\" strokeWidth={2} />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        <TabsContent value=\"details\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Audit Log</CardTitle>\n              <CardDescription>Detailed view of all audit actions</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Timestamp</TableHead>\n                    <TableHead>Action</TableHead>\n                    <TableHead>Details</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredData.map((audit) => (\n                    <TableRow key={audit._id.$oid}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>{new Date(audit.timestamp.$date).toLocaleDateString()}</span>\n                          <Clock className=\"h-4 w-4 ml-2\" />\n                          <span>{new Date(audit.timestamp.$date).toLocaleTimeString()}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={audit.action === 'edit' ? 'default' : audit.action === 'report' ? 'secondary' : 'destructive'}>\n                          {audit.action}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {audit.action === 'edit' && (\n                          <span>\n                            Value changed from {audit.details.before.valuePerUnit} to {audit.details.after.valuePerUnit}\n                          </span>\n                        )}\n                        {audit.action === 'report' && (\n                          <span>\n                            Report type: {audit.details.reportType}, Donations: {audit.details.donationIds.length}\n                          </span>\n                        )}\n                        {audit.action === 'delete' && (\n                          <span className=\"flex items-center space-x-2\">\n                            <AlertCircle className=\"h-4 w-4 text-red-500\" />\n                            <span>Reason: {audit.details.reason}</span>\n                          </span>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}"
        }
    ]
}