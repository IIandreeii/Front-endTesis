{
    "sourceFile": "src/components/component/event-view.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 110,
            "patches": [
                {
                    "date": 1731816047404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731816634306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import React, { useEffect, useState } from 'react';\n import axios from 'axios';\n import io from 'socket.io-client';\n \n-const socket = io('http://localhost:3000');\n+const socket = io('http://localhost:3001');\n \n const Publications = () => {\n     const [publications, setPublications] = useState([]);\n \n"
                },
                {
                    "date": 1731819966032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+// FILE: src/components/Publications.js\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+const Publications = () => {\n+    const [publications, setPublications] = useState([]);\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('/');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    return (\n+        <div>\n+            {publications.map(publication => (\n+                <div key={publication._id}>\n+                    <h2>{publication.title}</h2>\n+                    <p>{publication.description}</p>\n+                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\n+                    <p>{publication.location}</p>\n+                    <p>{new Date(publication.date).toLocaleString()}</p>\n+                    <p>Likes: {publication.likes}</p>\n+                    <div>\n+                        {publication.comments.map((comment, index) => (\n+                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\n+                        ))}\n+                    </div>\n+                </div>\n+            ))}\n+        </div>\n+    );\n+};\n+\n+export default Publications;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731820116823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \n     useEffect(() => {\n         const fetchPublications = async () => {\n             try {\n-                const response = await axios.get('/');\n+                const response = await axios.get('http://localhost:3001/');\n                 setPublications(response.data);\n             } catch (error) {\n                 console.error('Error fetching publications:', error);\n             }\n@@ -71,80 +71,5 @@\n         </div>\n     );\n };\n \n-export default Publications;\n-// FILE: src/components/Publications.js\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-const Publications = () => {\n-    const [publications, setPublications] = useState([]);\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('/api/publications');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    return (\n-        <div>\n-            {publications.map(publication => (\n-                <div key={publication._id}>\n-                    <h2>{publication.title}</h2>\n-                    <p>{publication.description}</p>\n-                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\n-                    <p>{publication.location}</p>\n-                    <p>{new Date(publication.date).toLocaleString()}</p>\n-                    <p>Likes: {publication.likes}</p>\n-                    <div>\n-                        {publication.comments.map((comment, index) => (\n-                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\n-                        ))}\n-                    </div>\n-                </div>\n-            ))}\n-        </div>\n-    );\n-};\n-\n export default Publications;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731820129274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+const Publications = () => {\n+    const [publications, setPublications] = useState([]);\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001/api/publications');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    return (\n+        <div>\n+            {publications.map(publication => (\n+                <div key={publication._id}>\n+                    <h2>{publication.title}</h2>\n+                    <p>{publication.description}</p>\n+                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\n+                    <p>{publication.location}</p>\n+                    <p>{new Date(publication.date).toLocaleString()}</p>\n+                    <p>Likes: {publication.likes}</p>\n+                    <div>\n+                        {publication.comments && publication.comments.map((comment, index) => (\n+                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\n+                        ))}\n+                    </div>\n+                </div>\n+            ))}\n+        </div>\n+    );\n+};\n+\n+export default Publications;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731820140794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+const Publications = () => {\n+    const [publications, setPublications] = useState([]);\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    return (\n+        <div>\n+            {publications.map(publication => (\n+                <div key={publication._id}>\n+                    <h2>{publication.title}</h2>\n+                    <p>{publication.description}</p>\n+                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\n+                    <p>{publication.location}</p>\n+                    <p>{new Date(publication.date).toLocaleString()}</p>\n+                    <p>Likes: {publication.likes}</p>\n+                    <div>\n+                        {publication.comments && publication.comments.map((comment, index) => (\n+                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\n+                        ))}\n+                    </div>\n+                </div>\n+            ))}\n+        </div>\n+    );\n+};\n+\n+export default Publications;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731820350147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,223 +0,0 @@\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-const Publications = () => {\n-    const [publications, setPublications] = useState([]);\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    return (\n-        <div>\n-            {publications.map(publication => (\n-                <div key={publication._id}>\n-                    <h2>{publication.title}</h2>\n-                    <p>{publication.description}</p>\n-                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\n-                    <p>{publication.location}</p>\n-                    <p>{new Date(publication.date).toLocaleString()}</p>\n-                    <p>Likes: {publication.likes}</p>\n-                    <div>\n-                        {publication.comments && publication.comments.map((comment, index) => (\n-                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\n-                        ))}\n-                    </div>\n-                </div>\n-            ))}\n-        </div>\n-    );\n-};\n-\n-export default Publications;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-const Publications = () => {\n-    const [publications, setPublications] = useState([]);\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001/api/publications');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    return (\n-        <div>\n-            {publications.map(publication => (\n-                <div key={publication._id}>\n-                    <h2>{publication.title}</h2>\n-                    <p>{publication.description}</p>\n-                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\n-                    <p>{publication.location}</p>\n-                    <p>{new Date(publication.date).toLocaleString()}</p>\n-                    <p>Likes: {publication.likes}</p>\n-                    <div>\n-                        {publication.comments && publication.comments.map((comment, index) => (\n-                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\n-                        ))}\n-                    </div>\n-                </div>\n-            ))}\n-        </div>\n-    );\n-};\n-\n-export default Publications;\n-// FILE: src/components/Publications.js\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-const Publications = () => {\n-    const [publications, setPublications] = useState([]);\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001/');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    return (\n-        <div>\n-            {publications.map(publication => (\n-                <div key={publication._id}>\n-                    <h2>{publication.title}</h2>\n-                    <p>{publication.description}</p>\n-                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\n-                    <p>{publication.location}</p>\n-                    <p>{new Date(publication.date).toLocaleString()}</p>\n-                    <p>Likes: {publication.likes}</p>\n-                    <div>\n-                        {publication.comments.map((comment, index) => (\n-                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\n-                        ))}\n-                    </div>\n-                </div>\n-            ))}\n-        </div>\n-    );\n-};\n-\n-export default Publications;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731820409277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.organization?.avatar || '/placeholder.svg'} alt={event.organization?.name || 'Organización'} />\n+                                <AvatarFallback>{event.organization?.name?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.organization?.name || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={event.imageUrl} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731820721839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001/api/publications');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={event.imageUrl} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731820726906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n     useEffect(() => {\n         const fetchPublications = async () => {\n             try {\n-                const response = await axios.get('http://localhost:3001/api/publications');\n+                const response = await axios.get('http://localhost:3001');\n                 setPublications(response.data);\n             } catch (error) {\n                 console.error('Error fetching publications:', error);\n             }\n@@ -168,177 +168,5 @@\n         </div>\n     );\n };\n \n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.organization?.avatar || '/placeholder.svg'} alt={event.organization?.name || 'Organización'} />\n-                                <AvatarFallback>{event.organization?.name?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.organization?.name || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={event.imageUrl} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731820901619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,172 +0,0 @@\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={event.imageUrl} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731820921080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001/');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731821116419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            {/* Aquí se asegura de que la imagen se carga o se usa una imagen por defecto si no carga */}\n+                            <img \n+                                src={`http://localhost:3001${event.imageUrl}`} \n+                                alt={event.title} \n+                                onError={(e) => e.target.src = '/default-image.jpg'} // Imagen por defecto si no se carga\n+                                className=\"w-full h-56 object-cover\" \n+                            />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n"
                },
                {
                    "date": 1731821493644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731821752005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731821841820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,185 +14,19 @@\n     const [publications, setPublications] = useState([]);\n     const [likedEvents, setLikedEvents] = useState([]);\n     const [comments, setComments] = useState({});\n     const [newComments, setNewComments] = useState({});\n+    const [isAuthenticated, setIsAuthenticated] = useState(false);\n \n     useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        const token = localStorage.getItem('authToken');\n+        if (token) {\n+            setIsAuthenticated(true);\n         }\n-    };\n \n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-\n-    useEffect(() => {\n         const fetchPublications = async () => {\n             try {\n-                const response = await axios.get('http://localhost:3001');\n+                const response = await axios.get('http://localhost:3001/api/publications');\n                 setPublications(response.data);\n             } catch (error) {\n                 console.error('Error fetching publications:', error);\n             }\n@@ -229,180 +63,13 @@\n         };\n     }, []);\n \n     const handleLike = (eventId) => {\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        if (!isAuthenticated) {\n+            alert('Por favor, inicia sesión para dar \"me gusta\".');\n+            return;\n         }\n-    };\n \n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n         setLikedEvents(prev =>\n             prev.includes(eventId)\n                 ? prev.filter(id => id !== eventId)\n                 : [...prev, eventId]\n@@ -413,186 +80,13 @@\n         setNewComments(prev => ({ ...prev, [eventId]: text }));\n     };\n \n     const handleCommentSubmit = (eventId) => {\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        if (!isAuthenticated) {\n+            alert('Por favor, inicia sesión para comentar.');\n+            return;\n         }\n-    };\n \n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            {/* Aquí se asegura de que la imagen se carga o se usa una imagen por defecto si no carga */}\n-                            <img \n-                                src={`http://localhost:3001${event.imageUrl}`} \n-                                alt={event.title} \n-                                onError={(e) => e.target.src = '/default-image.jpg'} // Imagen por defecto si no se carga\n-                                className=\"w-full h-56 object-cover\" \n-                            />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001/');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n         if (newComments[eventId]?.trim()) {\n             const newComment = {\n                 id: Date.now(),\n                 user: \"Usuario\",\n"
                },
                {
                    "date": 1731821954054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const [isAuthenticated, setIsAuthenticated] = useState(false);\n+\n+    useEffect(() => {\n+        const token = localStorage.getItem('authToken');\n+        if (token) {\n+            setIsAuthenticated(true);\n+        }\n+\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001/api/publications');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated) {\n+            alert('Por favor, inicia sesión para dar \"me gusta\".');\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated) {\n+            alert('Por favor, inicia sesión para comentar.');\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731822024988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const [isAuthenticated, setIsAuthenticated] = useState(false);\n+\n+    useEffect(() => {\n+        const token = localStorage.getItem('authToken');\n+        if (token) {\n+            setIsAuthenticated(true);\n+        }\n+\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001/api/publications');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated) {\n+            alert('Por favor, inicia sesión para dar \"me gusta\".');\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated) {\n+            alert('Por favor, inicia sesión para comentar.');\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731822035450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,381 +184,5 @@\n         </div>\n     );\n };\n \n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const [isAuthenticated, setIsAuthenticated] = useState(false);\n-\n-    useEffect(() => {\n-        const token = localStorage.getItem('authToken');\n-        if (token) {\n-            setIsAuthenticated(true);\n-        }\n-\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001/api/publications');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated) {\n-            alert('Por favor, inicia sesión para dar \"me gusta\".');\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated) {\n-            alert('Por favor, inicia sesión para comentar.');\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const [isAuthenticated, setIsAuthenticated] = useState(false);\n-\n-    useEffect(() => {\n-        const token = localStorage.getItem('authToken');\n-        if (token) {\n-            setIsAuthenticated(true);\n-        }\n-\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001/api/publications');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated) {\n-            alert('Por favor, inicia sesión para dar \"me gusta\".');\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated) {\n-            alert('Por favor, inicia sesión para comentar.');\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731822225123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,189 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { useRouter } from 'next/router'; // Importar el hook de redirección\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter(); // Hook para redirigir\n+\n+    // Función para verificar si el usuario está logeado\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken'); // Verifica si hay un token en el localStorage\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Si no está autenticado, redirige al login\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Si no está autenticado, redirige al login\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n"
                },
                {
                    "date": 1731822233785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,189 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { useRouter } from 'next/router'; // Importar el hook de redirección\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter(); // Hook para redirigir\n+\n+    // Función para verificar si el usuario está logeado\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken'); // Verifica si hay un token en el localStorage\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Si no está autenticado, redirige al login\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Si no está autenticado, redirige al login\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n"
                },
                {
                    "date": 1731822242730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,189 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+ // Importar el hook de redirección\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter(); // Hook para redirigir\n+\n+    // Función para verificar si el usuario está logeado\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken'); // Verifica si hay un token en el localStorage\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Si no está autenticado, redirige al login\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Si no está autenticado, redirige al login\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n"
                },
                {
                    "date": 1731822249372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,189 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { useRouter } from 'next/router'; // Importar el hook de redirección\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter(); // Hook para redirigir\n+\n+    // Función para verificar si el usuario está logeado\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken'); // Verifica si hay un token en el localStorage\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Si no está autenticado, redirige al login\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Si no está autenticado, redirige al login\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n"
                },
                {
                    "date": 1731822313691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,189 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { useRouter } from 'next/router'; // Asegúrate de que esto esté aquí\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter(); // Hook para redirigir\n+\n+    // Función para verificar si el usuario está logeado\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken'); // Verifica si hay un token en el localStorage\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Si no está autenticado, redirige al login\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Si no está autenticado, redirige al login\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n"
                },
                {
                    "date": 1731822329832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731822401919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,197 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { useRouter } from 'next/router'; // Importar useRouter\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const [isMounted, setIsMounted] = useState(false); // Para controlar si el componente está montado en el cliente\n+    const router = useRouter();\n+\n+    // Función para verificar si el usuario está logeado\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken'); // Verifica si hay un token en el localStorage\n+    };\n+\n+    useEffect(() => {\n+        setIsMounted(true); // Cambiar a true cuando el componente se monte en el cliente\n+    }, []);\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Si no está autenticado, redirige al login\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Si no está autenticado, redirige al login\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    // Solo renderizar el componente cuando esté montado en el cliente\n+    if (!isMounted) return null;\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n"
                },
                {
                    "date": 1731822411592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,37 +2,31 @@\n \n import React, { useEffect, useState } from 'react';\n import axios from 'axios';\n import io from 'socket.io-client';\n+import { useRouter } from 'next/router';\n import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n import { Button } from \"@/components/ui/button\";\n import { Input } from \"@/components/ui/input\";\n-import { useRouter } from 'next/router'; // Importar useRouter\n \n const socket = io('http://localhost:3001');\n \n const EventViewComponent = () => {\n     const [publications, setPublications] = useState([]);\n     const [likedEvents, setLikedEvents] = useState([]);\n     const [comments, setComments] = useState({});\n     const [newComments, setNewComments] = useState({});\n-    const [isMounted, setIsMounted] = useState(false); // Para controlar si el componente está montado en el cliente\n     const router = useRouter();\n \n-    // Función para verificar si el usuario está logeado\n     const isAuthenticated = () => {\n-        return localStorage.getItem('authToken'); // Verifica si hay un token en el localStorage\n+        return localStorage.getItem('authToken');\n     };\n \n     useEffect(() => {\n-        setIsMounted(true); // Cambiar a true cuando el componente se monte en el cliente\n-    }, []);\n-\n-    useEffect(() => {\n         const fetchPublications = async () => {\n             try {\n-                const response = await axios.get('http://localhost:3001');\n+                const response = await axios.get('http://localhost:3001/api/publications');\n                 setPublications(response.data);\n             } catch (error) {\n                 console.error('Error fetching publications:', error);\n             }\n@@ -70,9 +64,9 @@\n     }, []);\n \n     const handleLike = (eventId) => {\n         if (!isAuthenticated()) {\n-            router.push('/logind'); // Si no está autenticado, redirige al login\n+            router.push('/login'); // Redirige al login si no está autenticado\n             return;\n         }\n \n         setLikedEvents(prev =>\n@@ -87,9 +81,9 @@\n     };\n \n     const handleCommentSubmit = (eventId) => {\n         if (!isAuthenticated()) {\n-            router.push('/logind'); // Si no está autenticado, redirige al login\n+            router.push('/login'); // Redirige al login si no está autenticado\n             return;\n         }\n \n         if (newComments[eventId]?.trim()) {\n@@ -105,11 +99,8 @@\n             setNewComments(prev => ({ ...prev, [eventId]: '' }));\n         }\n     };\n \n-    // Solo renderizar el componente cuando esté montado en el cliente\n-    if (!isMounted) return null;\n-\n     return (\n         <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n             <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n                 Eventos de la Comunidad\n@@ -193,5 +184,5 @@\n         </div>\n     );\n };\n \n-export default EventViewComponent;\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731822499880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,1310 +184,5 @@\n         </div>\n     );\n };\n \n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { useRouter } from 'next/router'; // Asegúrate de que esto esté aquí\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter(); // Hook para redirigir\n-\n-    // Función para verificar si el usuario está logeado\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken'); // Verifica si hay un token en el localStorage\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Si no está autenticado, redirige al login\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Si no está autenticado, redirige al login\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { useRouter } from 'next/router'; // Importar el hook de redirección\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter(); // Hook para redirigir\n-\n-    // Función para verificar si el usuario está logeado\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken'); // Verifica si hay un token en el localStorage\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Si no está autenticado, redirige al login\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Si no está autenticado, redirige al login\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n- // Importar el hook de redirección\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter(); // Hook para redirigir\n-\n-    // Función para verificar si el usuario está logeado\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken'); // Verifica si hay un token en el localStorage\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Si no está autenticado, redirige al login\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Si no está autenticado, redirige al login\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { useRouter } from 'next/router'; // Importar el hook de redirección\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter(); // Hook para redirigir\n-\n-    // Función para verificar si el usuario está logeado\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken'); // Verifica si hay un token en el localStorage\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Si no está autenticado, redirige al login\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Si no está autenticado, redirige al login\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { useRouter } from 'next/router'; // Importar el hook de redirección\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter(); // Hook para redirigir\n-\n-    // Función para verificar si el usuario está logeado\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken'); // Verifica si hay un token en el localStorage\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Si no está autenticado, redirige al login\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Si no está autenticado, redirige al login\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const [isAuthenticated, setIsAuthenticated] = useState(false);\n-\n-    useEffect(() => {\n-        const token = localStorage.getItem('authToken');\n-        if (token) {\n-            setIsAuthenticated(true);\n-        }\n-\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001/api/publications');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated) {\n-            alert('Por favor, inicia sesión para dar \"me gusta\".');\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated) {\n-            alert('Por favor, inicia sesión para comentar.');\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731822819073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n import React, { useEffect, useState } from 'react';\n import axios from 'axios';\n import io from 'socket.io-client';\n-import { useRouter } from 'next/router';\n+import { useRouter } from 'next/compat/router';\n import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n import { Button } from \"@/components/ui/button\";\n import { Input } from \"@/components/ui/input\";\n"
                },
                {
                    "date": 1731823361559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n     useEffect(() => {\n         const fetchPublications = async () => {\n             try {\n-                const response = await axios.get('http://localhost:3001/api/publications');\n+                const response = await axios.get('http://localhost:3001');\n                 setPublications(response.data);\n             } catch (error) {\n                 console.error('Error fetching publications:', error);\n             }\n"
                },
                {
                    "date": 1731823380094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/compat/router';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/login'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731823393100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+'use client';\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/compat/router';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731823405147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/router';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = typeof window !== 'undefined' ? useRouter() : null;\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            if (router) {\n+                router.push('/login'); // Redirige al login si no está autenticado\n+            }\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated()) {\n+            if (router) {\n+                router.push('/login'); // Redirige al login si no está autenticado\n+            }\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731823456687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input';\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/login'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/login'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731823484438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { useRouter } from 'next/navigation';\n import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input';\n+import { Input } from \"@/components/ui/input\";\n \n const socket = io('http://localhost:3001');\n \n const EventViewComponent = () => {\n"
                },
                {
                    "date": 1731823498309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/login'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731824927217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        setLikedEvents(prev =>\n+            prev.includes(eventId)\n+                ? prev.filter(id => id !== eventId)\n+                : [...prev, eventId]\n+        );\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: \"Usuario\",\n+                text: newComments[eventId].trim()\n+            };\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            setComments(prev => ({\n+                ...prev,\n+                [eventId]: [...(prev[eventId] || []), newComment]\n+            }));\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n+                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.text}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731825337073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1320 +0,0 @@\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/login'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/login'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/login'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/router';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = typeof window !== 'undefined' ? useRouter() : null;\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            if (router) {\n-                router.push('/login'); // Redirige al login si no está autenticado\n-            }\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated()) {\n-            if (router) {\n-                router.push('/login'); // Redirige al login si no está autenticado\n-            }\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/compat/router';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/compat/router';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/login'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-'use client';\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/compat/router';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/login'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        setLikedEvents(prev =>\n-            prev.includes(eventId)\n-                ? prev.filter(id => id !== eventId)\n-                : [...prev, eventId]\n-        );\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/login'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: \"Usuario\",\n-                text: newComments[eventId].trim()\n-            };\n-            setComments(prev => ({\n-                ...prev,\n-                [eventId]: [...(prev[eventId] || []), newComment]\n-            }));\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes + (likedEvents.includes(event._id) ? 1 : 0)})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes + (likedEvents.includes(event._id) ? 1 : 0)}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {[...(event.comments || []), ...(comments[event._id] || [])].map((comment) => (\n-                                        <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.text}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731825458499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserIdFromToken = () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        // Decodifica el token para obtener el userId (esto depende de cómo esté codificado el token)\n+        // Aquí se asume que el token es un JWT y que contiene el userId en el payload\n+        const payload = JSON.parse(atob(token.split('.')[1]));\n+        return payload.userId;\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publication\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/login'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const userId = getUserIdFromToken();\n+        if (newComments[eventId]?.trim()) {\n+            socket.emit('addComment', {\n+                publicationId: eventId,\n+                userId,\n+                comment: newComments[eventId].trim()\n+            });\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731825676519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,190 +0,0 @@\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserIdFromToken = () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        // Decodifica el token para obtener el userId (esto depende de cómo esté codificado el token)\n-        // Aquí se asume que el token es un JWT y que contiene el userId en el payload\n-        const payload = JSON.parse(atob(token.split('.')[1]));\n-        return payload.userId;\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publication\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/login'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const userId = getUserIdFromToken();\n-        if (newComments[eventId]?.trim()) {\n-            socket.emit('addComment', {\n-                publicationId: eventId,\n-                userId,\n-                comment: newComments[eventId].trim()\n-            });\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731825690824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,200 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            return response.data; // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: `${user.nombre} ${user.apellido}`, // Asumiendo que el usuario tiene los campos 'nombre' y 'apellido'\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731825825722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,200 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            return response.data; // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: use,\n+                user: `${user.nombre} ${user.apellido}`, // Asumiendo que el usuario tiene los campos 'nombre' y 'apellido'\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731825848096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,201 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            return response.data; // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: user.id, // Asumiendo que el usuario tiene un campo 'id'\n+                user: `${user.nombre} ${user.apellido}`, // Asumiendo que el usuario tiene los campos 'nombre' y 'apellido'\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            \n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731825886842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,202 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            return response.data;\n+            console // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: user.id, // Asumiendo que el usuario tiene un campo 'id'\n+                user: `${user.nombre} ${user.apellido}`, // Asumiendo que el usuario tiene los campos 'nombre' y 'apellido'\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731825891890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,202 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            return response.data;\n+            console.log(res) // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: user.id, // Asumiendo que el usuario tiene un campo 'id'\n+                user: `${user.nombre} ${user.apellido}`, // Asumiendo que el usuario tiene los campos 'nombre' y 'apellido'\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731825925834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,202 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            \n+            console.log(response) // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: user.id, // Asumiendo que el usuario tiene un campo 'id'\n+                user: `${user.nombre} ${user.apellido}`, // Asumiendo que el usuario tiene los campos 'nombre' y 'apellido'\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731825933178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         const token = localStorage.getItem('authToken');\n         if (!token) return null;\n         try {\n             const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            \n+            return response.data;\n             console.log(response) // Asumiendo que la respuesta tiene los campos del usuario\n         } catch (error) {\n             console.error('Error obteniendo el usuario:', error);\n             return null;\n"
                },
                {
                    "date": 1731826254830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,205 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            return response.data; // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826309784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,206 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            return response.data; \n+            console// Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826318355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,205 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            console // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826339614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,206 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+        console\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            console.log(data) // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826345880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,206 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        \n+        console.log('Usuario autenticado:', !!token); // Agrega este console.log\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            console.log(data) // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826359160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,207 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        \n+        console.log('Usuario autenticado:', !!token); // Agrega este console.log\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        loca\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            console.log(data) // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826366434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,207 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        \n+        console.log('Usuario autenticado:', !!token); // Agrega este console.log\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        console.log('Token recuperado de localStorage:', token); // Agrega este console.log\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            console.log(data) // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826541981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,205 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n+            return response.data; // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826602111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data; // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826750758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data; // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826835037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user._id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826841563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731827166824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,15 @@\n             try {\n                 const res = await fetch('http://localhost:3001');\n                 const data = await res.json();\n                 setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n             } catch (error) {\n                 console.error('Error fetching publications:', error);\n             }\n         };\n@@ -71,15 +78,12 @@\n             );\n         });\n \n         socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publicationId]: [...(prevComments[newComment.publicationId] || []), newComment]\n+            }));\n         });\n \n         return () => {\n             socket.off('newPublication');\n@@ -178,11 +182,11 @@\n                             </div>\n                             <div className=\"mt-4\">\n                                 <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n                                 <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n+                                    {(comments[event._id] || []).map((comment) => (\n                                         <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.nombre} {comment.apellido}: </span>\n                                             <span className=\"text-[#042637]\">{comment.comment}</span>\n                                         </div>\n                                     ))}\n                                 </div>\n@@ -210,3509 +214,5 @@\n         </div>\n     );\n };\n \n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user._id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data; // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data; // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            return response.data; // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        \n-        console.log('Usuario autenticado:', !!token); // Agrega este console.log\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        console.log('Token recuperado de localStorage:', token); // Agrega este console.log\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            console.log(data) // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        \n-        console.log('Usuario autenticado:', !!token); // Agrega este console.log\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        loca\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            console.log(data) // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        \n-        console.log('Usuario autenticado:', !!token); // Agrega este console.log\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            console.log(data) // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-        console\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            console.log(data) // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            console // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            return response.data; \n-            console// Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            return response.data; // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            return response.data;\n-            console.log(response) // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: user.id, // Asumiendo que el usuario tiene un campo 'id'\n-                user: `${user.nombre} ${user.apellido}`, // Asumiendo que el usuario tiene los campos 'nombre' y 'apellido'\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            return response.data;\n-            console.log(res) // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: user.id, // Asumiendo que el usuario tiene un campo 'id'\n-                user: `${user.nombre} ${user.apellido}`, // Asumiendo que el usuario tiene los campos 'nombre' y 'apellido'\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            return response.data;\n-            console // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: user.id, // Asumiendo que el usuario tiene un campo 'id'\n-                user: `${user.nombre} ${user.apellido}`, // Asumiendo que el usuario tiene los campos 'nombre' y 'apellido'\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            return response.data; // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: user.id, // Asumiendo que el usuario tiene un campo 'id'\n-                user: `${user.nombre} ${user.apellido}`, // Asumiendo que el usuario tiene los campos 'nombre' y 'apellido'\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            \n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            return response.data; // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: use,\n-                user: `${user.nombre} ${user.apellido}`, // Asumiendo que el usuario tiene los campos 'nombre' y 'apellido'\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const response = await axios.get(`http://localhost:3001/profile?secret_token=${token}`);\n-            return response.data; // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: `${user.nombre} ${user.apellido}`, // Asumiendo que el usuario tiene los campos 'nombre' y 'apellido'\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731827364732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731827613402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,223 +214,5 @@\n         </div>\n     );\n };\n \n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publicationId]: [...(prevComments[newComment.publicationId] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.nombre} {comment.apellido}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731827785491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user.id });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes.length})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes.length}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731827844512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user.id });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes.length})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes.length}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731827891363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user.id });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731827975274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            \n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user.id });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731827993991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user.id });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731828130576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user._id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731828219777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user._id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731828288001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731828313095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,231 +125,10 @@\n                 comment: newComments[eventId].trim(),\n                 publicationId: eventId\n             };\n \n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n \n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n \n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user._id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n             socket.emit('addComment', newComment);\n             setNewComments(prev => ({ ...prev, [eventId]: '' }));\n         }\n     };\n@@ -438,1549 +217,5 @@\n         </div>\n     );\n };\n \n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user._id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user.id });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            \n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user.id });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user.id });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user.id });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes.length})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes.length}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user.id });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes.length})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes.length}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731828328400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731829339716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            console.log(res);\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731829364060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,8 @@\n                     'Content-Type': 'application/json',\n                     'Authorization': `Bearer ${token}`\n                 },\n             });\n-            console.log(res);\n             if (!res.ok) {\n                 throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n             }\n             const data = await res.json();\n"
                },
                {
                    "date": 1731829374204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            console\n+            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n+\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731829766463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            console.log('Usuario obtenido:', data.user || data.organization);\n+            return data.user || data.organization; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user._id,\n+                charityId: user.charityId,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731829857843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            console.log('Usuario obtenido:', data.user || data.organization);\n+            return data.user || data.organization; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charityId,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731829902279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            console.log('Usuario obtenido:', data.user || data.cha);\n+            return data.user || data.organization; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charityId,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731829921512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            console.log('Usuario obtenido:', data.user || data.charity);\n+            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charityId,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731830329901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            console.log('Usuario obtenido:', data.user || data.organization);\n+            return data.user || data.organization; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user._id,\n+                charityId: user.charityId,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731830342785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,10 @@\n             if (!res.ok) {\n                 throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n             }\n             const data = await res.json();\n-            console.log('Usuario obtenido:', data.user || data.organization);\n-            return data.user || data.organization; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+            console.log('Usuario obtenido:', data.user || data.charity);\n+            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n         } catch (error) {\n             console.error('Error obteniendo el usuario:', error);\n             return null;\n         }\n@@ -116,9 +116,9 @@\n         if (!user) return;\n \n         if (newComments[eventId]?.trim()) {\n             const newComment = {\n-                userId: user._id,\n+                userId: user.id,\n                 charityId: user.charityId,\n                 nombre: user.nombre,\n                 apellido: user.apellido,\n                 comment: newComments[eventId].trim(),\n"
                },
                {
                    "date": 1731830350078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            console.log('Usuario obtenido:', data.user || data.organization);\n+            return data.user || data.organization; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user._id,\n+                charityId: user.charityId,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731830363124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            console.log('Usuario obtenido:', data.user || data.ca);\n+            return data.user || data.organization; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user._id,\n+                charityId: user.charityId,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731830369143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            console.log('Usuario obtenido:', data.user || data.charity);\n+            return data.user || data.c; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user._id,\n+                charityId: user.charityId,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731831045374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,659 +36,8 @@\n                 throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n             }\n             const data = await res.json();\n             console.log('Usuario obtenido:', data.user || data.charity);\n-            return data.user || data.c; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user._id,\n-                charityId: user.charityId,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            console.log('Usuario obtenido:', data.user || data.ca);\n-            return data.user || data.organization; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user._id,\n-                charityId: user.charityId,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            console.log('Usuario obtenido:', data.user || data.organization);\n-            return data.user || data.organization; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user._id,\n-                charityId: user.charityId,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            console.log('Usuario obtenido:', data.user || data.charity);\n             return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n         } catch (error) {\n             console.error('Error obteniendo el usuario:', error);\n             return null;\n@@ -864,1743 +213,5 @@\n         </div>\n     );\n };\n \n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            console.log('Usuario obtenido:', data.user || data.charity);\n-            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charityId,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            console.log('Usuario obtenido:', data.user || data.cha);\n-            return data.user || data.organization; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charityId,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            console.log('Usuario obtenido:', data.user || data.organization);\n-            return data.user || data.organization; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charityId,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            console.log('Usuario obtenido:', data.user || data.organization);\n-            return data.user || data.organization; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user._id,\n-                charityId: user.charityId,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            console\n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data.user; // Asegúrate de que la respuesta tiene los campos del usuario en `user`\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user.nombre} {comment.user.apellido}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731831614284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n \n         if (newComments[eventId]?.trim()) {\n             const newComment = {\n                 userId: user.id,\n-                charityId: user.charityId,\n+                charityId: user.charity_Id,\n                 nombre: user.nombre,\n                 apellido: user.apellido,\n                 comment: newComments[eventId].trim(),\n                 publicationId: eventId\n"
                },
                {
                    "date": 1731831852429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charity_Id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732065777613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n import { Button } from \"@/components/ui/button\";\n import { Input } from \"@/components/ui/input\";\n \n-const socket = io('http://localhost:3001');\n+const socket = io('https://rwggxws5-3000.brs.devtunnels.ms/');\n \n const EventViewComponent = () => {\n     const [publications, setPublications] = useState([]);\n     const [likedEvents, setLikedEvents] = useState([]);\n@@ -212,222 +212,5 @@\n         </div>\n     );\n };\n \n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            console.log('Usuario obtenido:', data.user || data.charity);\n-            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charity_Id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732065785756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n import { Button } from \"@/components/ui/button\";\n import { Input } from \"@/components/ui/input\";\n \n-const socket = io('https://rwggxws5-3000.brs.devtunnels.ms/');\n+const socket = io('http://localhost:3001');\n \n const EventViewComponent = () => {\n     const [publications, setPublications] = useState([]);\n     const [likedEvents, setLikedEvents] = useState([]);\n"
                },
                {
                    "date": 1732065816058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n import { Button } from \"@/components/ui/button\";\n import { Input } from \"@/components/ui/input\";\n \n-const socket = io('http://localhost:3001');\n+const socket = io('https://rwggxws5-3001.brs.devtunnels.ms/');\n \n const EventViewComponent = () => {\n     const [publications, setPublications] = useState([]);\n     const [likedEvents, setLikedEvents] = useState([]);\n"
                },
                {
                    "date": 1732065822958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n import { Button } from \"@/components/ui/button\";\n import { Input } from \"@/components/ui/input\";\n \n-const socket = io('https://rwggxws5-3001.brs.devtunnels.ms/');\n+const socket = io('https://rwggxws5-3001.brs.devtunnels.ms');\n \n const EventViewComponent = () => {\n     const [publications, setPublications] = useState([]);\n     const [likedEvents, setLikedEvents] = useState([]);\n@@ -24,9 +24,9 @@\n     const getUserFromToken = async () => {\n         const token = localStorage.getItem('authToken');\n         if (!token) return null;\n         try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+            const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms//profile?secret_token=${token}`, {\n                 method: 'GET',\n                 headers: {\n                     'Content-Type': 'application/json',\n                     'Authorization': `Bearer ${token}`\n"
                },
                {
                    "date": 1732065830723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     const getUserFromToken = async () => {\n         const token = localStorage.getItem('authToken');\n         if (!token) return null;\n         try {\n-            const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms//profile?secret_token=${token}`, {\n+            const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n                 method: 'GET',\n                 headers: {\n                     'Content-Type': 'application/json',\n                     'Authorization': `Bearer ${token}`\n@@ -45,9 +45,9 @@\n \n     useEffect(() => {\n         const fetchPublications = async () => {\n             try {\n-                const res = await fetch('http://localhost:3001');\n+                const res = await fetch('https://rwggxws5-3001.brs.devtunnels.ms');\n                 const data = await res.json();\n                 setPublications(data);\n \n                 // Cargar comentarios para cada publicación\n"
                },
                {
                    "date": 1732065836586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('https://rwggxws5-3001.brs.devtunnels.ms');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('https://rwggxws5-3001.brs.devtunnels.ms');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charity_Id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732065847173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('https://rwggxws5-3001.brs.devtunnels.ms');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('https://rwggxws5-3001.brs.devtunnels.ms');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charity_Id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`https://rwggxws5-3001.brs.devtunnels.ms${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732065874843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n                             </Avatar>\n                             <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n                         </div>\n                         <div className=\"relative\">\n-                            <img src={`https://rwggxws5-3001.brs.devtunnels.ms${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n                             <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n                                 Nuevo\n                             </div>\n                         </div>\n"
                },
                {
                    "date": 1732065940065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('https://rwggxws5-3001.brs.devtunnels.ms');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('https://rwggxws5-3001.brs.devtunnels.ms');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms//comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charity_Id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732154036912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n import { Button } from \"@/components/ui/button\";\n import { Input } from \"@/components/ui/input\";\n \n-const socket = io('https://rwggxws5-3001.brs.devtunnels.ms');\n+const socket = io('http://localhost:3001');\n \n const EventViewComponent = () => {\n     const [publications, setPublications] = useState([]);\n     const [likedEvents, setLikedEvents] = useState([]);\n@@ -51,224 +51,8 @@\n                 setPublications(data);\n \n                 // Cargar comentarios para cada publicación\n                 data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms//comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charity_Id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('https://rwggxws5-3001.brs.devtunnels.ms');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('https://rwggxws5-3001.brs.devtunnels.ms');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n                     const commentsRes = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/comments/${publication._id}`);\n                     const commentsData = await commentsRes.json();\n                     setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n                 });\n@@ -359,9 +143,9 @@\n                             </Avatar>\n                             <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n                         </div>\n                         <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <img src={`https://rwggxws5-3001.brs.devtunnels.ms${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n                             <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n                                 Nuevo\n                             </div>\n                         </div>\n@@ -428,437 +212,5 @@\n         </div>\n     );\n };\n \n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('https://rwggxws5-3001.brs.devtunnels.ms');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('https://rwggxws5-3001.brs.devtunnels.ms');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charity_Id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('https://rwggxws5-3001.brs.devtunnels.ms');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('https://rwggxws5-3001.brs.devtunnels.ms');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charity_Id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732154054069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     const getUserFromToken = async () => {\n         const token = localStorage.getItem('authToken');\n         if (!token) return null;\n         try {\n-            const res = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/profile?secret_token=${token}`, {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n                 method: 'GET',\n                 headers: {\n                     'Content-Type': 'application/json',\n                     'Authorization': `Bearer ${token}`\n@@ -45,9 +45,9 @@\n \n     useEffect(() => {\n         const fetchPublications = async () => {\n             try {\n-                const res = await fetch('https://rwggxws5-3001.brs.devtunnels.ms');\n+                const res = await fetch('http://localhost:3001');\n                 const data = await res.json();\n                 setPublications(data);\n \n                 // Cargar comentarios para cada publicación\n"
                },
                {
                    "date": 1732154062428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charity_Id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`https://rwggxws5-3001.brs.devtunnels.ms${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732154074566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charity_Id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732156832990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? { ...publication, ...updatedPublication } : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charity_Id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732156960845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? { ...publication, ...updatedPublication, charity: publication.charity } : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charity_Id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732157112157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,869 +212,5 @@\n         </div>\n     );\n };\n \n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? { ...publication, ...updatedPublication } : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charity_Id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charity_Id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charity_Id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`https://rwggxws5-3001.brs.devtunnels.ms${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charity_Id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`https://rwggxws5-3001.brs.devtunnels.ms${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732157244843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,216 +0,0 @@\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? { ...publication, ...updatedPublication, charity: publication.charity } : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charity_Id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732157256889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? { ...publication, ...updatedPublication, charity: publication.charity } : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charity_Id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-24 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732157263858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n \n         socket.on('updatePublication', (updatedPublication) => {\n             setPublications((prevPublications) =>\n                 prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? { ...publication, ...updatedPublication, charity: publication.charity } : publication\n+                    publication._id === updatedPublication._id ? { ...publication, ...updatedPublication } : publication\n                 )\n             );\n         });\n \n@@ -179,9 +179,9 @@\n                                 </button>\n                             </div>\n                             <div className=\"mt-4\">\n                                 <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-24 overflow-y-auto mb-2\">\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n                                     {(comments[event._id] || []).map((comment) => (\n                                         <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n                                             <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n                                             <span className=\"text-[#042637]\">{comment.comment}</span>\n"
                },
                {
                    "date": 1732157272182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n                 setPublications(data);\n \n                 // Cargar comentarios para cada publicación\n                 data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsRes = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/comments/${publication._id}`);\n                     const commentsData = await commentsRes.json();\n                     setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n                 });\n             } catch (error) {\n@@ -143,9 +143,9 @@\n                             </Avatar>\n                             <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n                         </div>\n                         <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <img src={`https://rwggxws5-3001.brs.devtunnels.ms${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n                             <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n                                 Nuevo\n                             </div>\n                         </div>\n"
                },
                {
                    "date": 1732157287086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? { ...publication, ...updatedPublication, charity: publication.charity } : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charity_Id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732157482997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,432 +0,0 @@\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? { ...publication, ...updatedPublication, charity: publication.charity } : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charity_Id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`https://rwggxws5-3001.brs.devtunnels.ms/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? { ...publication, ...updatedPublication } : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charity_Id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`https://rwggxws5-3001.brs.devtunnels.ms${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732157797046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,223 +0,0 @@\n-\"use client\";\n-\n-import React, { useEffect, useState, useRef } from 'react';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-    const commentsEndRef = useRef(null);\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-            const data = await res.json();\n-            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const res = await fetch('http://localhost:3001');\n-                const data = await res.json();\n-                setPublications(data);\n-\n-                // Cargar comentarios para cada publicación\n-                data.forEach(async (publication) => {\n-                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n-                    const commentsData = await commentsRes.json();\n-                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n-                });\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? { ...publication, ...updatedPublication, charity: publication.charity } : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setComments((prevComments) => ({\n-                ...prevComments,\n-                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n-            }));\n-            commentsEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                userId: user.id,\n-                charityId: user.charity_Id,\n-                nombre: user.nombre,\n-                apellido: user.apellido,\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    useEffect(() => {\n-        commentsEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n-    }, [comments]);\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes ? event.likes.length : 0}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {(comments[event._id] || []).map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                    <div ref={commentsEndRef} />\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732158337530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,223 @@\n+\"use client\";\n+\n+import React, { useEffect, useState, useRef } from 'react';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+    const commentsEndRef = useRef(null);\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+            const data = await res.json();\n+            return data.user || data.charity; // Asegúrate de que la respuesta tiene los campos del usuario o de la organización\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const res = await fetch('http://localhost:3001');\n+                const data = await res.json();\n+                setPublications(data);\n+\n+                // Cargar comentarios para cada publicación\n+                data.forEach(async (publication) => {\n+                    const commentsRes = await fetch(`http://localhost:3001/comments/${publication._id}`);\n+                    const commentsData = await commentsRes.json();\n+                    setComments(prev => ({ ...prev, [publication._id]: commentsData }));\n+                });\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? { ...publication, ...updatedPublication, charity: publication.charity } : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setComments((prevComments) => ({\n+                ...prevComments,\n+                [newComment.publication]: [...(prevComments[newComment.publication] || []), newComment]\n+            }));\n+            commentsEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        socket.emit('likePublication', { publicationId: eventId, userId: user._id, charityId: user.charityId });\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                userId: user.id,\n+                charityId: user.charity_Id,\n+                nombre: user.nombre,\n+                apellido: user.apellido,\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    useEffect(() => {\n+        commentsEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n+    }, [comments]);\n+\n+    return (\n+        <div className=\"min-h-full p-4 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || 'https://via.placeholder.com/150'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-[#D8C7A9]\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes ? event.likes.length : 0})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes ? event.likes.length : 0}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {(comments[event._id] || []).map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user?.nombre || comment.charity?.nombre}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                    <div ref={commentsEndRef} />\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731816047404,
            "name": "Commit-0",
            "content": "// FILE: src/components/Publications.js\n'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:3000');\n\nconst Publications = () => {\n    const [publications, setPublications] = useState([]);\n\n    useEffect(() => {\n        const fetchPublications = async () => {\n            try {\n                const response = await axios.get('/api/publications');\n                setPublications(response.data);\n            } catch (error) {\n                console.error('Error fetching publications:', error);\n            }\n        };\n\n        fetchPublications();\n\n        socket.on('newPublication', (publication) => {\n            setPublications((prevPublications) => [publication, ...prevPublications]);\n        });\n\n        socket.on('updatePublication', (updatedPublication) => {\n            setPublications((prevPublications) =>\n                prevPublications.map((publication) =>\n                    publication._id === updatedPublication._id ? updatedPublication : publication\n                )\n            );\n        });\n\n        socket.on('newComment', (newComment) => {\n            setPublications((prevPublications) =>\n                prevPublications.map((publication) =>\n                    publication._id === newComment.publicationId\n                        ? { ...publication, comments: [...publication.comments, newComment] }\n                        : publication\n                )\n            );\n        });\n\n        return () => {\n            socket.off('newPublication');\n            socket.off('updatePublication');\n            socket.off('newComment');\n        };\n    }, []);\n\n    return (\n        <div>\n            {publications.map(publication => (\n                <div key={publication._id}>\n                    <h2>{publication.title}</h2>\n                    <p>{publication.description}</p>\n                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\n                    <p>{publication.location}</p>\n                    <p>{new Date(publication.date).toLocaleString()}</p>\n                    <p>Likes: {publication.likes}</p>\n                    <div>\n                        {publication.comments.map((comment, index) => (\n                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\n                        ))}\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Publications;"
        }
    ]
}