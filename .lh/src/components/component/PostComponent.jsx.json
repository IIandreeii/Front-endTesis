{
    "sourceFile": "src/components/component/PostComponent.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1731024358198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731024594800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+const PostComponent = ({ organizationId, userId }) => {\r\n+    const [content, setContent] = useState('');\r\n+    const [posts, setPosts] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        const fetchPosts = async () => {\r\n+            const response = await axios.get('http://localhost:3000/posts');\r\n+            setPosts(response.data);\r\n+        };\r\n+\r\n+        fetchPosts();\r\n+    }, []);\r\n+\r\n+    const createPost = async () => {\r\n+        const response = await axios.post('http://localhost:3000/posts', {\r\n+            content,\r\n+            organization: organizationId,\r\n+        });\r\n+        setPosts((prevPosts) => [...prevPosts, response.data]);\r\n+        setContent('');\r\n+    };\r\n+\r\n+    const likePost = async (postId) => {\r\n+        const response = await axios.post(`http://localhost:3000/posts/${postId}/like`, {\r\n+            userId,\r\n+        });\r\n+        setPosts((prevPosts) =>\r\n+            prevPosts.map((post) =>\r\n+                post._id === postId ? { ...post, likes: response.data.likes } : post\r\n+            )\r\n+        );\r\n+    };\r\n+\r\n+    return (\r\n+        <div>\r\n+            <div>\r\n+                <input\r\n+                    type=\"text\"\r\n+                    value={content}\r\n+                    onChange={(e) => setContent(e.target.value)}\r\n+                />\r\n+                <button onClick={createPost}>Publicar</button>\r\n+            </div>\r\n+            <div>\r\n+                {posts.map((post) => (\r\n+                    <div key={post._id}>\r\n+                        <p>{post.content}</p>\r\n+                        <button onClick={() => likePost(post._id)}>\r\n+                            Like ({post.likes.length})\r\n+                        </button>\r\n+                    </div>\r\n+                ))}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default PostComponent;\r\n"
                },
                {
                    "date": 1731024743376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,26 +6,26 @@\n     const [posts, setPosts] = useState([]);\r\n \r\n     useEffect(() => {\r\n         const fetchPosts = async () => {\r\n-            const response = await axios.get('http://localhost:3000/posts');\r\n+            const response = await axios.get('http://localhost:3002/posts');\r\n             setPosts(response.data);\r\n         };\r\n \r\n         fetchPosts();\r\n     }, []);\r\n \r\n     const createPost = async () => {\r\n-        const response = await axios.post('http://localhost:3000/posts', {\r\n+        const response = await axios.post('http://localhost:3002/posts', {\r\n             content,\r\n             organization: organizationId,\r\n         });\r\n         setPosts((prevPosts) => [...prevPosts, response.data]);\r\n         setContent('');\r\n     };\r\n \r\n     const likePost = async (postId) => {\r\n-        const response = await axios.post(`http://localhost:3000/posts/${postId}/like`, {\r\n+        const response = await axios.post(`http://localhost:3002/posts/${postId}/like`, {\r\n             userId,\r\n         });\r\n         setPosts((prevPosts) =>\r\n             prevPosts.map((post) =>\r\n"
                },
                {
                    "date": 1731024940783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+\"use client\";\r\n+\r\n import React, { useState, useEffect } from 'react';\r\n import axios from 'axios';\r\n \r\n const PostComponent = ({ organizationId, userId }) => {\r\n"
                },
                {
                    "date": 1731025246122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,33 +8,45 @@\n     const [posts, setPosts] = useState([]);\r\n \r\n     useEffect(() => {\r\n         const fetchPosts = async () => {\r\n-            const response = await axios.get('http://localhost:3002/posts');\r\n-            setPosts(response.data);\r\n+            try {\r\n+                const response = await axios.get('http://localhost:3002/posts');\r\n+                setPosts(response.data);\r\n+            } catch (error) {\r\n+                console.error('Error fetching posts:', error);\r\n+            }\r\n         };\r\n \r\n         fetchPosts();\r\n     }, []);\r\n \r\n     const createPost = async () => {\r\n-        const response = await axios.post('http://localhost:3002/posts', {\r\n-            content,\r\n-            organization: organizationId,\r\n-        });\r\n-        setPosts((prevPosts) => [...prevPosts, response.data]);\r\n-        setContent('');\r\n+        try {\r\n+            const response = await axios.post('http://localhost:3002/posts', {\r\n+                content,\r\n+                organization: organizationId,\r\n+            });\r\n+            setPosts((prevPosts) => [...prevPosts, response.data]);\r\n+            setContent('');\r\n+        } catch (error) {\r\n+            console.error('Error creating post:', error);\r\n+        }\r\n     };\r\n \r\n     const likePost = async (postId) => {\r\n-        const response = await axios.post(`http://localhost:3002/posts/${postId}/like`, {\r\n-            userId,\r\n-        });\r\n-        setPosts((prevPosts) =>\r\n-            prevPosts.map((post) =>\r\n-                post._id === postId ? { ...post, likes: response.data.likes } : post\r\n-            )\r\n-        );\r\n+        try {\r\n+            const response = await axios.post(`http://localhost:3002/posts/${postId}/like`, {\r\n+                userId,\r\n+            });\r\n+            setPosts((prevPosts) =>\r\n+                prevPosts.map((post) =>\r\n+                    post._id === postId ? { ...post, likes: response.data.likes } : post\r\n+                )\r\n+            );\r\n+        } catch (error) {\r\n+            console.error('Error liking post:', error);\r\n+        }\r\n     };\r\n \r\n     return (\r\n         <div>\r\n"
                },
                {
                    "date": 1731025943987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \r\n     useEffect(() => {\r\n         const fetchPosts = async () => {\r\n             try {\r\n-                const response = await axios.get('http://localhost:3002/posts');\r\n+                const response = await axios.get('http://localhost:3001/posts');\r\n                 setPosts(response.data);\r\n             } catch (error) {\r\n                 console.error('Error fetching posts:', error);\r\n             }\r\n"
                },
                {
                    "date": 1731025949402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+const PostComponent = ({ organizationId, userId }) => {\r\n+    const [content, setContent] = useState('');\r\n+    const [posts, setPosts] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        const fetchPosts = async () => {\r\n+            try {\r\n+                const response = await axios.get('http://localhost:3001/posts');\r\n+                setPosts(response.data);\r\n+            } catch (error) {\r\n+                console.error('Error fetching posts:', error);\r\n+            }\r\n+        };\r\n+\r\n+        fetchPosts();\r\n+    }, []);\r\n+\r\n+    const createPost = async () => {\r\n+        try {\r\n+            const response = await axios.post('http://localhost:3001/posts', {\r\n+                content,\r\n+                organization: organizationId,\r\n+            });\r\n+            setPosts((prevPosts) => [...prevPosts, response.data]);\r\n+            setContent('');\r\n+        } catch (error) {\r\n+            console.error('Error creating post:', error);\r\n+        }\r\n+    };\r\n+\r\n+    const likePost = async (postId) => {\r\n+        try {\r\n+            const response = await axios.post(`http://localhost:3001/posts/${postId}/like`, {\r\n+                userId,\r\n+            });\r\n+            setPosts((prevPosts) =>\r\n+                prevPosts.map((post) =>\r\n+                    post._id === postId ? { ...post, likes: response.data.likes } : post\r\n+                )\r\n+            );\r\n+        } catch (error) {\r\n+            console.error('Error liking post:', error);\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <div>\r\n+            <div>\r\n+                <input\r\n+                    type=\"text\"\r\n+                    value={content}\r\n+                    onChange={(e) => setContent(e.target.value)}\r\n+                />\r\n+                <button onClick={createPost}>Publicar</button>\r\n+            </div>\r\n+            <div>\r\n+                {posts.map((post) => (\r\n+                    <div key={post._id}>\r\n+                        <p>{post.content}</p>\r\n+                        <button onClick={() => likePost(post._id)}>\r\n+                            Like ({post.likes.length})\r\n+                        </button>\r\n+                    </div>\r\n+                ))}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default PostComponent;\r\n"
                },
                {
                    "date": 1731026579033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,79 +72,4 @@\n     );\r\n };\r\n \r\n export default PostComponent;\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-const PostComponent = ({ organizationId, userId }) => {\r\n-    const [content, setContent] = useState('');\r\n-    const [posts, setPosts] = useState([]);\r\n-\r\n-    useEffect(() => {\r\n-        const fetchPosts = async () => {\r\n-            try {\r\n-                const response = await axios.get('http://localhost:3001/posts');\r\n-                setPosts(response.data);\r\n-            } catch (error) {\r\n-                console.error('Error fetching posts:', error);\r\n-            }\r\n-        };\r\n-\r\n-        fetchPosts();\r\n-    }, []);\r\n-\r\n-    const createPost = async () => {\r\n-        try {\r\n-            const response = await axios.post('http://localhost:3002/posts', {\r\n-                content,\r\n-                organization: organizationId,\r\n-            });\r\n-            setPosts((prevPosts) => [...prevPosts, response.data]);\r\n-            setContent('');\r\n-        } catch (error) {\r\n-            console.error('Error creating post:', error);\r\n-        }\r\n-    };\r\n-\r\n-    const likePost = async (postId) => {\r\n-        try {\r\n-            const response = await axios.post(`http://localhost:3002/posts/${postId}/like`, {\r\n-                userId,\r\n-            });\r\n-            setPosts((prevPosts) =>\r\n-                prevPosts.map((post) =>\r\n-                    post._id === postId ? { ...post, likes: response.data.likes } : post\r\n-                )\r\n-            );\r\n-        } catch (error) {\r\n-            console.error('Error liking post:', error);\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <div>\r\n-            <div>\r\n-                <input\r\n-                    type=\"text\"\r\n-                    value={content}\r\n-                    onChange={(e) => setContent(e.target.value)}\r\n-                />\r\n-                <button onClick={createPost}>Publicar</button>\r\n-            </div>\r\n-            <div>\r\n-                {posts.map((post) => (\r\n-                    <div key={post._id}>\r\n-                        <p>{post.content}</p>\r\n-                        <button onClick={() => likePost(post._id)}>\r\n-                            Like ({post.likes.length})\r\n-                        </button>\r\n-                    </div>\r\n-                ))}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default PostComponent;\r\n"
                },
                {
                    "date": 1731813120913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,75 +1,203 @@\n-\"use client\";\r\n+'use client'\r\n \r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n+import { useState } from 'react'\r\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react'\r\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\r\n+import { Button } from \"@/components/ui/button\"\r\n+import { Input } from \"@/components/ui/input\"\r\n \r\n-const PostComponent = ({ organizationId, userId }) => {\r\n-    const [content, setContent] = useState('');\r\n-    const [posts, setPosts] = useState([]);\r\n+interface Comment {\r\n+  id: number\r\n+  user: string\r\n+  text: string\r\n+}\r\n \r\n-    useEffect(() => {\r\n-        const fetchPosts = async () => {\r\n-            try {\r\n-                const response = await axios.get('http://localhost:3001/posts');\r\n-                setPosts(response.data);\r\n-            } catch (error) {\r\n-                console.error('Error fetching posts:', error);\r\n-            }\r\n-        };\r\n+interface Event {\r\n+  id: number\r\n+  title: string\r\n+  description: string\r\n+  date: string\r\n+  time: string\r\n+  location: string\r\n+  image: string\r\n+  likes: number\r\n+  organization: {\r\n+    name: string\r\n+    avatar: string\r\n+  }\r\n+  comments: Comment[]\r\n+}\r\n \r\n-        fetchPosts();\r\n-    }, []);\r\n+const events: Event[] = [\r\n+  {\r\n+    id: 1,\r\n+    title: \"Festival de Música en el Parque\",\r\n+    description: \"Disfruta de una tarde llena de música en vivo con artistas locales.\",\r\n+    date: \"15 Jul 2023\",\r\n+    time: \"16:00\",\r\n+    location: \"Parque Central\",\r\n+    image: \"/placeholder.svg?height=200&width=400\",\r\n+    likes: 124,\r\n+    organization: {\r\n+      name: \"Asociación Cultural Armonia\",\r\n+      avatar: \"/placeholder.svg?height=40&width=40\"\r\n+    },\r\n+    comments: [\r\n+      { id: 1, user: \"María\", text: \"¡Suena genial! No puedo esperar.\" },\r\n+      { id: 2, user: \"Carlos\", text: \"¿Alguien sabe si habrá puestos de comida?\" }\r\n+    ]\r\n+  },\r\n+  {\r\n+    id: 2,\r\n+    title: \"Maratón por la Caridad\",\r\n+    description: \"Corre por una buena causa en nuestro maratón anual de 10km.\",\r\n+    date: \"05 Ago 2023\",\r\n+    time: \"08:00\",\r\n+    location: \"Plaza Mayor\",\r\n+    image: \"/placeholder.svg?height=200&width=400\",\r\n+    likes: 89,\r\n+    organization: {\r\n+      name: \"Fundación Pasos Solidarios\",\r\n+      avatar: \"/placeholder.svg?height=40&width=40\"\r\n+    },\r\n+    comments: [\r\n+      { id: 1, user: \"Ana\", text: \"Ya estoy entrenando para este evento.\" },\r\n+      { id: 2, user: \"Pedro\", text: \"¿Cuál es la cuota de inscripción?\" }\r\n+    ]\r\n+  },\r\n+  {\r\n+    id: 3,\r\n+    title: \"Exposición de Arte Moderno\",\r\n+    description: \"Explora las últimas tendencias en arte contemporáneo en nuestra galería.\",\r\n+    date: \"22 Jul 2023\",\r\n+    time: \"10:00\",\r\n+    location: \"Galería de Arte Municipal\",\r\n+    image: \"/placeholder.svg?height=200&width=400\",\r\n+    likes: 56,\r\n+    organization: {\r\n+      name: \"Colectivo Artístico Vanguardia\",\r\n+      avatar: \"/placeholder.svg?height=40&width=40\"\r\n+    },\r\n+    comments: [\r\n+      { id: 1, user: \"Laura\", text: \"¿Habrá visitas guiadas?\" },\r\n+      { id: 2, user: \"Miguel\", text: \"Me encanta el arte moderno, allí estaré.\" }\r\n+    ]\r\n+  }\r\n+]\r\n \r\n-    const createPost = async () => {\r\n-        try {\r\n-            const response = await axios.post('http://localhost:3001/posts', {\r\n-                content,\r\n-                organization: organizationId,\r\n-            });\r\n-            setPosts((prevPosts) => [...prevPosts, response.data]);\r\n-            setContent('');\r\n-        } catch (error) {\r\n-            console.error('Error creating post:', error);\r\n-        }\r\n-    };\r\n+export function EventViewComponent() {\r\n+  const [likedEvents, setLikedEvents] = useState<number[]>([])\r\n+  const [comments, setComments] = useState<{ [key: number]: Comment[] }>({})\r\n+  const [newComments, setNewComments] = useState<{ [key: number]: string }>({})\r\n \r\n-    const likePost = async (postId) => {\r\n-        try {\r\n-            const response = await axios.post(`http://localhost:3001/posts/${postId}/like`, {\r\n-                userId,\r\n-            });\r\n-            setPosts((prevPosts) =>\r\n-                prevPosts.map((post) =>\r\n-                    post._id === postId ? { ...post, likes: response.data.likes } : post\r\n-                )\r\n-            );\r\n-        } catch (error) {\r\n-            console.error('Error liking post:', error);\r\n-        }\r\n-    };\r\n+  const handleLike = (eventId: number) => {\r\n+    setLikedEvents(prev => \r\n+      prev.includes(eventId) \r\n+        ? prev.filter(id => id !== eventId)\r\n+        : [...prev, eventId]\r\n+    )\r\n+  }\r\n \r\n-    return (\r\n-        <div>\r\n-            <div>\r\n-                <input\r\n-                    type=\"text\"\r\n-                    value={content}\r\n-                    onChange={(e) => setContent(e.target.value)}\r\n-                />\r\n-                <button onClick={createPost}>Publicar</button>\r\n+  const handleCommentChange = (eventId: number, text: string) => {\r\n+    setNewComments(prev => ({ ...prev, [eventId]: text }))\r\n+  }\r\n+\r\n+  const handleCommentSubmit = (eventId: number) => {\r\n+    if (newComments[eventId]?.trim()) {\r\n+      const newComment = {\r\n+        id: Date.now(),\r\n+        user: \"Usuario\",\r\n+        text: newComments[eventId].trim()\r\n+      }\r\n+      setComments(prev => ({\r\n+        ...prev,\r\n+        [eventId]: [...(prev[eventId] || []), newComment]\r\n+      }))\r\n+      setNewComments(prev => ({ ...prev, [eventId]: '' }))\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\r\n+      <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\r\n+        Eventos de la Comunidad\r\n+      </h1>\r\n+      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\r\n+        {events.map(event => (\r\n+          <div key={event.id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\r\n+            <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\r\n+              <Avatar className=\"h-8 w-8\">\r\n+                <AvatarImage src={event.organization.avatar} alt={event.organization.name} />\r\n+                <AvatarFallback>{event.organization.name.charAt(0)}</AvatarFallback>\r\n+              </Avatar>\r\n+              <span className=\"font-semibold text-white\">{event.organization.name}</span>\r\n             </div>\r\n-            <div>\r\n-                {posts.map((post) => (\r\n-                    <div key={post._id}>\r\n-                        <p>{post.content}</p>\r\n-                        <button onClick={() => likePost(post._id)}>\r\n-                            Like ({post.likes.length})\r\n-                        </button>\r\n+            <div className=\"relative\">\r\n+              <img src={event.image} alt={event.title} className=\"w-full h-56 object-cover\" />\r\n+              <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\r\n+                Nuevo\r\n+              </div>\r\n+            </div>\r\n+            <div className=\"p-6\">\r\n+              <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\r\n+              <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\r\n+              <div className=\"flex items-center mb-2 text-[#042637]\">\r\n+                <Calendar className=\"h-4 w-4 mr-2\" />\r\n+                <span className=\"text-sm\">{event.date}</span>\r\n+              </div>\r\n+              <div className=\"flex items-center mb-2 text-[#042637]\">\r\n+                <Clock className=\"h-4 w-4 mr-2\" />\r\n+                <span className=\"text-sm\">{event.time}</span>\r\n+              </div>\r\n+              <div className=\"flex items-center mb-4 text-[#042637]\">\r\n+                <MapPin className=\"h-4 w-4 mr-2\" />\r\n+                <span className=\"text-sm\">{event.location}</span>\r\n+              </div>\r\n+              <div className=\"flex items-center mb-4\">\r\n+                <button \r\n+                  onClick={() => handleLike(event.id)}\r\n+                  className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\r\n+                  aria-label={`Me gusta (${event.likes + (likedEvents.includes(event.id) ? 1 : 0)})`}\r\n+                >\r\n+                  <Heart \r\n+                    className={`h-6 w-6 ${likedEvents.includes(event.id) ? 'fill-current text-red-500' : 'text-[#042637]'}`} \r\n+                  />\r\n+                  <span className=\"text-[#042637] font-medium\">\r\n+                    {event.likes + (likedEvents.includes(event.id) ? 1 : 0)}\r\n+                  </span>\r\n+                </button>\r\n+              </div>\r\n+              <div className=\"mt-4\">\r\n+                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\r\n+                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\r\n+                  {[...(event.comments || []), ...(comments[event.id] || [])].map((comment) => (\r\n+                    <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\r\n+                      <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\r\n+                      <span className=\"text-[#042637]\">{comment.text}</span>\r\n                     </div>\r\n-                ))}\r\n+                  ))}\r\n+                </div>\r\n+                <div className=\"flex items-center mt-2\">\r\n+                  <Input\r\n+                    type=\"text\"\r\n+                    placeholder=\"Añade un comentario...\"\r\n+                    value={newComments[event.id] || ''}\r\n+                    onChange={(e) => handleCommentChange(event.id, e.target.value)}\r\n+                    className=\"flex-grow mr-2\"\r\n+                  />\r\n+                  <Button\r\n+                    onClick={() => handleCommentSubmit(event.id)}\r\n+                    size=\"icon\"\r\n+                    aria-label=\"Enviar comentario\"\r\n+                  >\r\n+                    <Send className=\"h-4 w-4\" />\r\n+                  </Button>\r\n+                </div>\r\n+              </div>\r\n             </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default PostComponent;\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731813164102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import React, { useState } from 'react';\r\n+\r\n+interface Comment {\r\n+  id: number;\r\n+  user: string;\r\n+  text: string;\r\n+}\r\n+\r\n+interface Event {\r\n+  id: number;\r\n+  organization: {\r\n+    avatar: string;\r\n+    name: string;\r\n+  };\r\n+  image: string;\r\n+  title: string;\r\n+  description: string;\r\n+  date: string;\r\n+  time: string;\r\n+  location: string;\r\n+  likes: number;\r\n+  comments: Comment[];\r\n+}\r\n+\r\n+interface EventViewComponentProps {\r\n+  events: Event[];\r\n+}\r\n+\r\n+export function EventViewComponent({ events }: EventViewComponentProps) {\r\n+  const [likedEvents, setLikedEvents] = useState<number[]>([]);\r\n+  const [comments, setComments] = useState<{ [key: number]: Comment[] }>({});\r\n+  const [newComments, setNewComments] = useState<{ [key: number]: string }>({});\r\n+\r\n+  const handleLike = (eventId: number) => {\r\n+    setLikedEvents(prev =>\r\n+      prev.includes(eventId)\r\n+        ? prev.filter(id => id !== eventId)\r\n+        : [...prev, eventId]\r\n+    );\r\n+  };\r\n+\r\n+  const handleCommentChange = (eventId: number, text: string) => {\r\n+    setNewComments(prev => ({ ...prev, [eventId]: text }));\r\n+  };\r\n+\r\n+  const handleCommentSubmit = (eventId: number) => {\r\n+    if (newComments[eventId]?.trim()) {\r\n+      const newComment: Comment = {\r\n+        id: Date.now(),\r\n+        user: \"Usuario\",\r\n+        text: newComments[eventId].trim()\r\n+      };\r\n+      setComments(prev => ({\r\n+        ...prev,\r\n+        [eventId]: [...(prev[eventId] || []), newComment]\r\n+      }));\r\n+      setNewComments(prev => ({ ...prev, [eventId]: '' }));\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\r\n+      <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\r\n+        Eventos de la Comunidad\r\n+      </h1>\r\n+      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\r\n+        {events.map(event => (\r\n+          <div key={event.id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\r\n+            <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\r\n+              <Avatar className=\"h-8 w-8\">\r\n+                <AvatarImage src={event.organization.avatar} alt={event.organization.name} />\r\n+                <AvatarFallback>{event.organization.name.charAt(0)}</AvatarFallback>\r\n+              </Avatar>\r\n+              <span className=\"font-semibold text-white\">{event.organization.name}</span>\r\n+            </div>\r\n+            <div className=\"relative\">\r\n+              <img src={event.image} alt={event.title} className=\"w-full h-56 object-cover\" />\r\n+              <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\r\n+                Nuevo\r\n+              </div>\r\n+            </div>\r\n+            <div className=\"p-6\">\r\n+              <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\r\n+              <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\r\n+              <div className=\"flex items-center mb-2 text-[#042637]\">\r\n+                <Calendar className=\"h-4 w-4 mr-2\" />\r\n+                <span className=\"text-sm\">{event.date}</span>\r\n+              </div>\r\n+              <div className=\"flex items-center mb-2 text-[#042637]\">\r\n+                <Clock className=\"h-4 w-4 mr-2\" />\r\n+                <span className=\"text-sm\">{event.time}</span>\r\n+              </div>\r\n+              <div className=\"flex items-center mb-4 text-[#042637]\">\r\n+                <MapPin className=\"h-4 w-4 mr-2\" />\r\n+                <span className=\"text-sm\">{event.location}</span>\r\n+              </div>\r\n+              <div className=\"flex items-center mb-4\">\r\n+                <button\r\n+                  onClick={() => handleLike(event.id)}\r\n+                  className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\r\n+                  aria-label={`Me gusta (${event.likes + (likedEvents.includes(event.id) ? 1 : 0)})`}\r\n+                >\r\n+                  <Heart\r\n+                    className={`h-6 w-6 ${likedEvents.includes(event.id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\r\n+                  />\r\n+                  <span className=\"text-[#042637] font-medium\">\r\n+                    {event.likes + (likedEvents.includes(event.id) ? 1 : 0)}\r\n+                  </span>\r\n+                </button>\r\n+              </div>\r\n+              <div className=\"mt-4\">\r\n+                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\r\n+                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\r\n+                  {[...(event.comments || []), ...(comments[event.id] || [])].map((comment) => (\r\n+                    <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\r\n+                      <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\r\n+                      <span className=\"text-[#042637]\">{comment.text}</span>\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                <div className=\"flex items-center mt-2\">\r\n+                  <Input\r\n+                    type=\"text\"\r\n+                    placeholder=\"Añade un comentario...\"\r\n+                    value={newComments[event.id] || ''}\r\n+                    onChange={(e) => handleCommentChange(event.id, e.target.value)}\r\n+                    className=\"flex-grow mr-2\"\r\n+                  />\r\n+                  <Button\r\n+                    onClick={() => handleCommentSubmit(event.id)}\r\n+                    size=\"icon\"\r\n+                    aria-label=\"Enviar comentario\"\r\n+                  >\r\n+                    <Send className=\"h-4 w-4\" />\r\n+                  </Button>\r\n+                </div>\r\n+              </div>\r\n+            </div>\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731813226285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,52 +1,31 @@\n import React, { useState } from 'react';\r\n+import PropTypes from 'prop-types';\r\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\r\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { Input } from \"@/components/ui/input\";\r\n \r\n-interface Comment {\r\n-  id: number;\r\n-  user: string;\r\n-  text: string;\r\n-}\r\n+const EventViewComponent = ({ events }) => {\r\n+  const [likedEvents, setLikedEvents] = useState([]);\r\n+  const [comments, setComments] = useState({});\r\n+  const [newComments, setNewComments] = useState({});\r\n \r\n-interface Event {\r\n-  id: number;\r\n-  organization: {\r\n-    avatar: string;\r\n-    name: string;\r\n-  };\r\n-  image: string;\r\n-  title: string;\r\n-  description: string;\r\n-  date: string;\r\n-  time: string;\r\n-  location: string;\r\n-  likes: number;\r\n-  comments: Comment[];\r\n-}\r\n-\r\n-interface EventViewComponentProps {\r\n-  events: Event[];\r\n-}\r\n-\r\n-export function EventViewComponent({ events }: EventViewComponentProps) {\r\n-  const [likedEvents, setLikedEvents] = useState<number[]>([]);\r\n-  const [comments, setComments] = useState<{ [key: number]: Comment[] }>({});\r\n-  const [newComments, setNewComments] = useState<{ [key: number]: string }>({});\r\n-\r\n-  const handleLike = (eventId: number) => {\r\n+  const handleLike = (eventId) => {\r\n     setLikedEvents(prev =>\r\n       prev.includes(eventId)\r\n         ? prev.filter(id => id !== eventId)\r\n         : [...prev, eventId]\r\n     );\r\n   };\r\n \r\n-  const handleCommentChange = (eventId: number, text: string) => {\r\n+  const handleCommentChange = (eventId, text) => {\r\n     setNewComments(prev => ({ ...prev, [eventId]: text }));\r\n   };\r\n \r\n-  const handleCommentSubmit = (eventId: number) => {\r\n+  const handleCommentSubmit = (eventId) => {\r\n     if (newComments[eventId]?.trim()) {\r\n-      const newComment: Comment = {\r\n+      const newComment = {\r\n         id: Date.now(),\r\n         user: \"Usuario\",\r\n         text: newComments[eventId].trim()\r\n       };\r\n@@ -140,5 +119,29 @@\n         ))}\r\n       </div>\r\n     </div>\r\n   );\r\n-}\n\\ No newline at end of file\n+};\r\n+\r\n+EventViewComponent.propTypes = {\r\n+  events: PropTypes.arrayOf(PropTypes.shape({\r\n+    id: PropTypes.number.isRequired,\r\n+    organization: PropTypes.shape({\r\n+      avatar: PropTypes.string.isRequired,\r\n+      name: PropTypes.string.isRequired,\r\n+    }).isRequired,\r\n+    image: PropTypes.string.isRequired,\r\n+    title: PropTypes.string.isRequired,\r\n+    description: PropTypes.string.isRequired,\r\n+    date: PropTypes.string.isRequired,\r\n+    time: PropTypes.string.isRequired,\r\n+    location: PropTypes.string.isRequired,\r\n+    likes: PropTypes.number.isRequired,\r\n+    comments: PropTypes.arrayOf(PropTypes.shape({\r\n+      id: PropTypes.number.isRequired,\r\n+      user: PropTypes.string.isRequired,\r\n+      text: PropTypes.string.isRequired,\r\n+    })).isRequired,\r\n+  })).isRequired,\r\n+};\r\n+\r\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731813321432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,350 +0,0 @@\n-import React, { useState } from 'react';\r\n-import PropTypes from 'prop-types';\r\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\r\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { Input } from \"@/components/ui/input\";\r\n-\r\n-const EventViewComponent = ({ events }) => {\r\n-  const [likedEvents, setLikedEvents] = useState([]);\r\n-  const [comments, setComments] = useState({});\r\n-  const [newComments, setNewComments] = useState({});\r\n-\r\n-  const handleLike = (eventId) => {\r\n-    setLikedEvents(prev =>\r\n-      prev.includes(eventId)\r\n-        ? prev.filter(id => id !== eventId)\r\n-        : [...prev, eventId]\r\n-    );\r\n-  };\r\n-\r\n-  const handleCommentChange = (eventId, text) => {\r\n-    setNewComments(prev => ({ ...prev, [eventId]: text }));\r\n-  };\r\n-\r\n-  const handleCommentSubmit = (eventId) => {\r\n-    if (newComments[eventId]?.trim()) {\r\n-      const newComment = {\r\n-        id: Date.now(),\r\n-        user: \"Usuario\",\r\n-        text: newComments[eventId].trim()\r\n-      };\r\n-      setComments(prev => ({\r\n-        ...prev,\r\n-        [eventId]: [...(prev[eventId] || []), newComment]\r\n-      }));\r\n-      setNewComments(prev => ({ ...prev, [eventId]: '' }));\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\r\n-      <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\r\n-        Eventos de la Comunidad\r\n-      </h1>\r\n-      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\r\n-        {events.map(event => (\r\n-          <div key={event.id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\r\n-            <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\r\n-              <Avatar className=\"h-8 w-8\">\r\n-                <AvatarImage src={event.organization.avatar} alt={event.organization.name} />\r\n-                <AvatarFallback>{event.organization.name.charAt(0)}</AvatarFallback>\r\n-              </Avatar>\r\n-              <span className=\"font-semibold text-white\">{event.organization.name}</span>\r\n-            </div>\r\n-            <div className=\"relative\">\r\n-              <img src={event.image} alt={event.title} className=\"w-full h-56 object-cover\" />\r\n-              <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\r\n-                Nuevo\r\n-              </div>\r\n-            </div>\r\n-            <div className=\"p-6\">\r\n-              <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\r\n-              <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\r\n-              <div className=\"flex items-center mb-2 text-[#042637]\">\r\n-                <Calendar className=\"h-4 w-4 mr-2\" />\r\n-                <span className=\"text-sm\">{event.date}</span>\r\n-              </div>\r\n-              <div className=\"flex items-center mb-2 text-[#042637]\">\r\n-                <Clock className=\"h-4 w-4 mr-2\" />\r\n-                <span className=\"text-sm\">{event.time}</span>\r\n-              </div>\r\n-              <div className=\"flex items-center mb-4 text-[#042637]\">\r\n-                <MapPin className=\"h-4 w-4 mr-2\" />\r\n-                <span className=\"text-sm\">{event.location}</span>\r\n-              </div>\r\n-              <div className=\"flex items-center mb-4\">\r\n-                <button\r\n-                  onClick={() => handleLike(event.id)}\r\n-                  className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\r\n-                  aria-label={`Me gusta (${event.likes + (likedEvents.includes(event.id) ? 1 : 0)})`}\r\n-                >\r\n-                  <Heart\r\n-                    className={`h-6 w-6 ${likedEvents.includes(event.id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\r\n-                  />\r\n-                  <span className=\"text-[#042637] font-medium\">\r\n-                    {event.likes + (likedEvents.includes(event.id) ? 1 : 0)}\r\n-                  </span>\r\n-                </button>\r\n-              </div>\r\n-              <div className=\"mt-4\">\r\n-                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\r\n-                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\r\n-                  {[...(event.comments || []), ...(comments[event.id] || [])].map((comment) => (\r\n-                    <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\r\n-                      <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\r\n-                      <span className=\"text-[#042637]\">{comment.text}</span>\r\n-                    </div>\r\n-                  ))}\r\n-                </div>\r\n-                <div className=\"flex items-center mt-2\">\r\n-                  <Input\r\n-                    type=\"text\"\r\n-                    placeholder=\"Añade un comentario...\"\r\n-                    value={newComments[event.id] || ''}\r\n-                    onChange={(e) => handleCommentChange(event.id, e.target.value)}\r\n-                    className=\"flex-grow mr-2\"\r\n-                  />\r\n-                  <Button\r\n-                    onClick={() => handleCommentSubmit(event.id)}\r\n-                    size=\"icon\"\r\n-                    aria-label=\"Enviar comentario\"\r\n-                  >\r\n-                    <Send className=\"h-4 w-4\" />\r\n-                  </Button>\r\n-                </div>\r\n-              </div>\r\n-            </div>\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-EventViewComponent.propTypes = {\r\n-  events: PropTypes.arrayOf(PropTypes.shape({\r\n-    id: PropTypes.number.isRequired,\r\n-    organization: PropTypes.shape({\r\n-      avatar: PropTypes.string.isRequired,\r\n-      name: PropTypes.string.isRequired,\r\n-    }).isRequired,\r\n-    image: PropTypes.string.isRequired,\r\n-    title: PropTypes.string.isRequired,\r\n-    description: PropTypes.string.isRequired,\r\n-    date: PropTypes.string.isRequired,\r\n-    time: PropTypes.string.isRequired,\r\n-    location: PropTypes.string.isRequired,\r\n-    likes: PropTypes.number.isRequired,\r\n-    comments: PropTypes.arrayOf(PropTypes.shape({\r\n-      id: PropTypes.number.isRequired,\r\n-      user: PropTypes.string.isRequired,\r\n-      text: PropTypes.string.isRequired,\r\n-    })).isRequired,\r\n-  })).isRequired,\r\n-};\r\n-\r\n-export default EventViewComponent;\n-'use client'\r\n-\r\n-import { useState } from 'react'\r\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react'\r\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\r\n-import { Button } from \"@/components/ui/button\"\r\n-import { Input } from \"@/components/ui/input\"\r\n-\r\n-interface Comment {\r\n-  id: number\r\n-  user: string\r\n-  text: string\r\n-}\r\n-\r\n-interface Event {\r\n-  id: number\r\n-  title: string\r\n-  description: string\r\n-  date: string\r\n-  time: string\r\n-  location: string\r\n-  image: string\r\n-  likes: number\r\n-  organization: {\r\n-    name: string\r\n-    avatar: string\r\n-  }\r\n-  comments: Comment[]\r\n-}\r\n-\r\n-const events: Event[] = [\r\n-  {\r\n-    id: 1,\r\n-    title: \"Festival de Música en el Parque\",\r\n-    description: \"Disfruta de una tarde llena de música en vivo con artistas locales.\",\r\n-    date: \"15 Jul 2023\",\r\n-    time: \"16:00\",\r\n-    location: \"Parque Central\",\r\n-    image: \"/placeholder.svg?height=200&width=400\",\r\n-    likes: 124,\r\n-    organization: {\r\n-      name: \"Asociación Cultural Armonia\",\r\n-      avatar: \"/placeholder.svg?height=40&width=40\"\r\n-    },\r\n-    comments: [\r\n-      { id: 1, user: \"María\", text: \"¡Suena genial! No puedo esperar.\" },\r\n-      { id: 2, user: \"Carlos\", text: \"¿Alguien sabe si habrá puestos de comida?\" }\r\n-    ]\r\n-  },\r\n-  {\r\n-    id: 2,\r\n-    title: \"Maratón por la Caridad\",\r\n-    description: \"Corre por una buena causa en nuestro maratón anual de 10km.\",\r\n-    date: \"05 Ago 2023\",\r\n-    time: \"08:00\",\r\n-    location: \"Plaza Mayor\",\r\n-    image: \"/placeholder.svg?height=200&width=400\",\r\n-    likes: 89,\r\n-    organization: {\r\n-      name: \"Fundación Pasos Solidarios\",\r\n-      avatar: \"/placeholder.svg?height=40&width=40\"\r\n-    },\r\n-    comments: [\r\n-      { id: 1, user: \"Ana\", text: \"Ya estoy entrenando para este evento.\" },\r\n-      { id: 2, user: \"Pedro\", text: \"¿Cuál es la cuota de inscripción?\" }\r\n-    ]\r\n-  },\r\n-  {\r\n-    id: 3,\r\n-    title: \"Exposición de Arte Moderno\",\r\n-    description: \"Explora las últimas tendencias en arte contemporáneo en nuestra galería.\",\r\n-    date: \"22 Jul 2023\",\r\n-    time: \"10:00\",\r\n-    location: \"Galería de Arte Municipal\",\r\n-    image: \"/placeholder.svg?height=200&width=400\",\r\n-    likes: 56,\r\n-    organization: {\r\n-      name: \"Colectivo Artístico Vanguardia\",\r\n-      avatar: \"/placeholder.svg?height=40&width=40\"\r\n-    },\r\n-    comments: [\r\n-      { id: 1, user: \"Laura\", text: \"¿Habrá visitas guiadas?\" },\r\n-      { id: 2, user: \"Miguel\", text: \"Me encanta el arte moderno, allí estaré.\" }\r\n-    ]\r\n-  }\r\n-]\r\n-\r\n-export function EventViewComponent() {\r\n-  const [likedEvents, setLikedEvents] = useState<number[]>([])\r\n-  const [comments, setComments] = useState<{ [key: number]: Comment[] }>({})\r\n-  const [newComments, setNewComments] = useState<{ [key: number]: string }>({})\r\n-\r\n-  const handleLike = (eventId: number) => {\r\n-    setLikedEvents(prev => \r\n-      prev.includes(eventId) \r\n-        ? prev.filter(id => id !== eventId)\r\n-        : [...prev, eventId]\r\n-    )\r\n-  }\r\n-\r\n-  const handleCommentChange = (eventId: number, text: string) => {\r\n-    setNewComments(prev => ({ ...prev, [eventId]: text }))\r\n-  }\r\n-\r\n-  const handleCommentSubmit = (eventId: number) => {\r\n-    if (newComments[eventId]?.trim()) {\r\n-      const newComment = {\r\n-        id: Date.now(),\r\n-        user: \"Usuario\",\r\n-        text: newComments[eventId].trim()\r\n-      }\r\n-      setComments(prev => ({\r\n-        ...prev,\r\n-        [eventId]: [...(prev[eventId] || []), newComment]\r\n-      }))\r\n-      setNewComments(prev => ({ ...prev, [eventId]: '' }))\r\n-    }\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\r\n-      <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\r\n-        Eventos de la Comunidad\r\n-      </h1>\r\n-      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\r\n-        {events.map(event => (\r\n-          <div key={event.id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\r\n-            <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\r\n-              <Avatar className=\"h-8 w-8\">\r\n-                <AvatarImage src={event.organization.avatar} alt={event.organization.name} />\r\n-                <AvatarFallback>{event.organization.name.charAt(0)}</AvatarFallback>\r\n-              </Avatar>\r\n-              <span className=\"font-semibold text-white\">{event.organization.name}</span>\r\n-            </div>\r\n-            <div className=\"relative\">\r\n-              <img src={event.image} alt={event.title} className=\"w-full h-56 object-cover\" />\r\n-              <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\r\n-                Nuevo\r\n-              </div>\r\n-            </div>\r\n-            <div className=\"p-6\">\r\n-              <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\r\n-              <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\r\n-              <div className=\"flex items-center mb-2 text-[#042637]\">\r\n-                <Calendar className=\"h-4 w-4 mr-2\" />\r\n-                <span className=\"text-sm\">{event.date}</span>\r\n-              </div>\r\n-              <div className=\"flex items-center mb-2 text-[#042637]\">\r\n-                <Clock className=\"h-4 w-4 mr-2\" />\r\n-                <span className=\"text-sm\">{event.time}</span>\r\n-              </div>\r\n-              <div className=\"flex items-center mb-4 text-[#042637]\">\r\n-                <MapPin className=\"h-4 w-4 mr-2\" />\r\n-                <span className=\"text-sm\">{event.location}</span>\r\n-              </div>\r\n-              <div className=\"flex items-center mb-4\">\r\n-                <button \r\n-                  onClick={() => handleLike(event.id)}\r\n-                  className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\r\n-                  aria-label={`Me gusta (${event.likes + (likedEvents.includes(event.id) ? 1 : 0)})`}\r\n-                >\r\n-                  <Heart \r\n-                    className={`h-6 w-6 ${likedEvents.includes(event.id) ? 'fill-current text-red-500' : 'text-[#042637]'}`} \r\n-                  />\r\n-                  <span className=\"text-[#042637] font-medium\">\r\n-                    {event.likes + (likedEvents.includes(event.id) ? 1 : 0)}\r\n-                  </span>\r\n-                </button>\r\n-              </div>\r\n-              <div className=\"mt-4\">\r\n-                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\r\n-                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\r\n-                  {[...(event.comments || []), ...(comments[event.id] || [])].map((comment) => (\r\n-                    <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\r\n-                      <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\r\n-                      <span className=\"text-[#042637]\">{comment.text}</span>\r\n-                    </div>\r\n-                  ))}\r\n-                </div>\r\n-                <div className=\"flex items-center mt-2\">\r\n-                  <Input\r\n-                    type=\"text\"\r\n-                    placeholder=\"Añade un comentario...\"\r\n-                    value={newComments[event.id] || ''}\r\n-                    onChange={(e) => handleCommentChange(event.id, e.target.value)}\r\n-                    className=\"flex-grow mr-2\"\r\n-                  />\r\n-                  <Button\r\n-                    onClick={() => handleCommentSubmit(event.id)}\r\n-                    size=\"icon\"\r\n-                    aria-label=\"Enviar comentario\"\r\n-                  >\r\n-                    <Send className=\"h-4 w-4\" />\r\n-                  </Button>\r\n-                </div>\r\n-              </div>\r\n-            </div>\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-    </div>\r\n-  )\r\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731813377852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+'use client';\r\n+\r\n+import React, { useState } from 'react';\r\n+import PropTypes from 'prop-types';\r\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\r\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { Input } from \"@/components/ui/input\";\r\n+\r\n+const EventViewComponent = ({ events }) => {\r\n+  const [likedEvents, setLikedEvents] = useState([]);\r\n+  const [comments, setComments] = useState({});\r\n+  const [newComments, setNewComments] = useState({});\r\n+\r\n+  const handleLike = (eventId) => {\r\n+    setLikedEvents(prev =>\r\n+      prev.includes(eventId)\r\n+        ? prev.filter(id => id !== eventId)\r\n+        : [...prev, eventId]\r\n+    );\r\n+  };\r\n+\r\n+  const handleCommentChange = (eventId, text) => {\r\n+    setNewComments(prev => ({ ...prev, [eventId]: text }));\r\n+  };\r\n+\r\n+  const handleCommentSubmit = (eventId) => {\r\n+    if (newComments[eventId]?.trim()) {\r\n+      const newComment = {\r\n+        id: Date.now(),\r\n+        user: \"Usuario\",\r\n+        text: newComments[eventId].trim()\r\n+      };\r\n+      setComments(prev => ({\r\n+        ...prev,\r\n+        [eventId]: [...(prev[eventId] || []), newComment]\r\n+      }));\r\n+      setNewComments(prev => ({ ...prev, [eventId]: '' }));\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\r\n+      <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\r\n+        Eventos de la Comunidad\r\n+      </h1>\r\n+      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\r\n+        {events.map(event => (\r\n+          <div key={event.id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\r\n+            <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\r\n+              <Avatar className=\"h-8 w-8\">\r\n+                <AvatarImage src={event.organization.avatar} alt={event.organization.name} />\r\n+                <AvatarFallback>{event.organization.name.charAt(0)}</AvatarFallback>\r\n+              </Avatar>\r\n+              <span className=\"font-semibold text-white\">{event.organization.name}</span>\r\n+            </div>\r\n+            <div className=\"relative\">\r\n+              <img src={event.image} alt={event.title} className=\"w-full h-56 object-cover\" />\r\n+              <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\r\n+                Nuevo\r\n+              </div>\r\n+            </div>\r\n+            <div className=\"p-6\">\r\n+              <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\r\n+              <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\r\n+              <div className=\"flex items-center mb-2 text-[#042637]\">\r\n+                <Calendar className=\"h-4 w-4 mr-2\" />\r\n+                <span className=\"text-sm\">{event.date}</span>\r\n+              </div>\r\n+              <div className=\"flex items-center mb-2 text-[#042637]\">\r\n+                <Clock className=\"h-4 w-4 mr-2\" />\r\n+                <span className=\"text-sm\">{event.time}</span>\r\n+              </div>\r\n+              <div className=\"flex items-center mb-4 text-[#042637]\">\r\n+                <MapPin className=\"h-4 w-4 mr-2\" />\r\n+                <span className=\"text-sm\">{event.location}</span>\r\n+              </div>\r\n+              <div className=\"flex items-center mb-4\">\r\n+                <button\r\n+                  onClick={() => handleLike(event.id)}\r\n+                  className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\r\n+                  aria-label={`Me gusta (${event.likes + (likedEvents.includes(event.id) ? 1 : 0)})`}\r\n+                >\r\n+                  <Heart\r\n+                    className={`h-6 w-6 ${likedEvents.includes(event.id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\r\n+                  />\r\n+                  <span className=\"text-[#042637] font-medium\">\r\n+                    {event.likes + (likedEvents.includes(event.id) ? 1 : 0)}\r\n+                  </span>\r\n+                </button>\r\n+              </div>\r\n+              <div className=\"mt-4\">\r\n+                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\r\n+                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\r\n+                  {[...(event.comments || []), ...(comments[event.id] || [])].map((comment) => (\r\n+                    <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\r\n+                      <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\r\n+                      <span className=\"text-[#042637]\">{comment.text}</span>\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                <div className=\"flex items-center mt-2\">\r\n+                  <Input\r\n+                    type=\"text\"\r\n+                    placeholder=\"Añade un comentario...\"\r\n+                    value={newComments[event.id] || ''}\r\n+                    onChange={(e) => handleCommentChange(event.id, e.target.value)}\r\n+                    className=\"flex-grow mr-2\"\r\n+                  />\r\n+                  <Button\r\n+                    onClick={() => handleCommentSubmit(event.id)}\r\n+                    size=\"icon\"\r\n+                    aria-label=\"Enviar comentario\"\r\n+                  >\r\n+                    <Send className=\"h-4 w-4\" />\r\n+                  </Button>\r\n+                </div>\r\n+              </div>\r\n+            </div>\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+EventViewComponent.propTypes = {\r\n+  events: PropTypes.arrayOf(PropTypes.shape({\r\n+    id: PropTypes.number.isRequired,\r\n+    organization: PropTypes.shape({\r\n+      avatar: PropTypes.string.isRequired,\r\n+      name: PropTypes.string.isRequired,\r\n+    }).isRequired,\r\n+    image: PropTypes.string.isRequired,\r\n+    title: PropTypes.string.isRequired,\r\n+    description: PropTypes.string.isRequired,\r\n+    date: PropTypes.string.isRequired,\r\n+    time: PropTypes.string.isRequired,\r\n+    location: PropTypes.string.isRequired,\r\n+    likes: PropTypes.number.isRequired,\r\n+    comments: PropTypes.arrayOf(PropTypes.shape({\r\n+      id: PropTypes.number.isRequired,\r\n+      user: PropTypes.string.isRequired,\r\n+      text: PropTypes.string.isRequired,\r\n+    })).isRequired,\r\n+  })).isRequired,\r\n+};\r\n+\r\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731813411738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,149 +1,73 @@\n-'use client';\r\n+// FILE: src/components/Publications.js\r\n+import React, { useEffect, useState } from 'react';\r\n+import axios from 'axios';\r\n+import io from 'socket.io-client';\r\n \r\n-import React, { useState } from 'react';\r\n-import PropTypes from 'prop-types';\r\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\r\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { Input } from \"@/components/ui/input\";\r\n+const socket = io('http://localhost:5000');\r\n \r\n-const EventViewComponent = ({ events }) => {\r\n-  const [likedEvents, setLikedEvents] = useState([]);\r\n-  const [comments, setComments] = useState({});\r\n-  const [newComments, setNewComments] = useState({});\r\n+const Publications = () => {\r\n+    const [publications, setPublications] = useState([]);\r\n \r\n-  const handleLike = (eventId) => {\r\n-    setLikedEvents(prev =>\r\n-      prev.includes(eventId)\r\n-        ? prev.filter(id => id !== eventId)\r\n-        : [...prev, eventId]\r\n-    );\r\n-  };\r\n+    useEffect(() => {\r\n+        const fetchPublications = async () => {\r\n+            try {\r\n+                const response = await axios.get('/api/publications');\r\n+                setPublications(response.data);\r\n+            } catch (error) {\r\n+                console.error('Error fetching publications:', error);\r\n+            }\r\n+        };\r\n \r\n-  const handleCommentChange = (eventId, text) => {\r\n-    setNewComments(prev => ({ ...prev, [eventId]: text }));\r\n-  };\r\n+        fetchPublications();\r\n \r\n-  const handleCommentSubmit = (eventId) => {\r\n-    if (newComments[eventId]?.trim()) {\r\n-      const newComment = {\r\n-        id: Date.now(),\r\n-        user: \"Usuario\",\r\n-        text: newComments[eventId].trim()\r\n-      };\r\n-      setComments(prev => ({\r\n-        ...prev,\r\n-        [eventId]: [...(prev[eventId] || []), newComment]\r\n-      }));\r\n-      setNewComments(prev => ({ ...prev, [eventId]: '' }));\r\n-    }\r\n-  };\r\n+        socket.on('newPublication', (publication) => {\r\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\r\n+        });\r\n \r\n-  return (\r\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\r\n-      <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\r\n-        Eventos de la Comunidad\r\n-      </h1>\r\n-      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\r\n-        {events.map(event => (\r\n-          <div key={event.id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\r\n-            <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\r\n-              <Avatar className=\"h-8 w-8\">\r\n-                <AvatarImage src={event.organization.avatar} alt={event.organization.name} />\r\n-                <AvatarFallback>{event.organization.name.charAt(0)}</AvatarFallback>\r\n-              </Avatar>\r\n-              <span className=\"font-semibold text-white\">{event.organization.name}</span>\r\n-            </div>\r\n-            <div className=\"relative\">\r\n-              <img src={event.image} alt={event.title} className=\"w-full h-56 object-cover\" />\r\n-              <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\r\n-                Nuevo\r\n-              </div>\r\n-            </div>\r\n-            <div className=\"p-6\">\r\n-              <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\r\n-              <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\r\n-              <div className=\"flex items-center mb-2 text-[#042637]\">\r\n-                <Calendar className=\"h-4 w-4 mr-2\" />\r\n-                <span className=\"text-sm\">{event.date}</span>\r\n-              </div>\r\n-              <div className=\"flex items-center mb-2 text-[#042637]\">\r\n-                <Clock className=\"h-4 w-4 mr-2\" />\r\n-                <span className=\"text-sm\">{event.time}</span>\r\n-              </div>\r\n-              <div className=\"flex items-center mb-4 text-[#042637]\">\r\n-                <MapPin className=\"h-4 w-4 mr-2\" />\r\n-                <span className=\"text-sm\">{event.location}</span>\r\n-              </div>\r\n-              <div className=\"flex items-center mb-4\">\r\n-                <button\r\n-                  onClick={() => handleLike(event.id)}\r\n-                  className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\r\n-                  aria-label={`Me gusta (${event.likes + (likedEvents.includes(event.id) ? 1 : 0)})`}\r\n-                >\r\n-                  <Heart\r\n-                    className={`h-6 w-6 ${likedEvents.includes(event.id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\r\n-                  />\r\n-                  <span className=\"text-[#042637] font-medium\">\r\n-                    {event.likes + (likedEvents.includes(event.id) ? 1 : 0)}\r\n-                  </span>\r\n-                </button>\r\n-              </div>\r\n-              <div className=\"mt-4\">\r\n-                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\r\n-                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\r\n-                  {[...(event.comments || []), ...(comments[event.id] || [])].map((comment) => (\r\n-                    <div key={comment.id} className=\"bg-white p-2 rounded-lg\">\r\n-                      <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\r\n-                      <span className=\"text-[#042637]\">{comment.text}</span>\r\n+        socket.on('updatePublication', (updatedPublication) => {\r\n+            setPublications((prevPublications) =>\r\n+                prevPublications.map((publication) =>\r\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\r\n+                )\r\n+            );\r\n+        });\r\n+\r\n+        socket.on('newComment', (newComment) => {\r\n+            setPublications((prevPublications) =>\r\n+                prevPublications.map((publication) =>\r\n+                    publication._id === newComment.publication\r\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\r\n+                        : publication\r\n+                )\r\n+            );\r\n+        });\r\n+\r\n+        return () => {\r\n+            socket.off('newPublication');\r\n+            socket.off('updatePublication');\r\n+            socket.off('newComment');\r\n+        };\r\n+    }, []);\r\n+\r\n+    return (\r\n+        <div>\r\n+            {publications.map(publication => (\r\n+                <div key={publication._id}>\r\n+                    <h2>{publication.title}</h2>\r\n+                    <p>{publication.description}</p>\r\n\\ No newline at end of file\n+                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\r\n+                    <p>{publication.location}</p>\r\n+                    <p>{new Date(publication.date).toLocaleString()}</p>\r\n+                    <p>Likes: {publication.likes}</p>\r\n+                    <div>\r\n+                        {publication.comments.map((comment, index) => (\r\n+                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\r\n+                        ))}\r\n                     </div>\r\n-                  ))}\r\n                 </div>\r\n-                <div className=\"flex items-center mt-2\">\r\n-                  <Input\r\n-                    type=\"text\"\r\n-                    placeholder=\"Añade un comentario...\"\r\n-                    value={newComments[event.id] || ''}\r\n-                    onChange={(e) => handleCommentChange(event.id, e.target.value)}\r\n-                    className=\"flex-grow mr-2\"\r\n-                  />\r\n-                  <Button\r\n-                    onClick={() => handleCommentSubmit(event.id)}\r\n-                    size=\"icon\"\r\n-                    aria-label=\"Enviar comentario\"\r\n-                  >\r\n-                    <Send className=\"h-4 w-4\" />\r\n-                  </Button>\r\n-                </div>\r\n-              </div>\r\n-            </div>\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n+            ))}\r\n+        </div>\r\n+    );\r\n };\r\n \r\n-EventViewComponent.propTypes = {\r\n-  events: PropTypes.arrayOf(PropTypes.shape({\r\n-    id: PropTypes.number.isRequired,\r\n-    organization: PropTypes.shape({\r\n-      avatar: PropTypes.string.isRequired,\r\n-      name: PropTypes.string.isRequired,\r\n-    }).isRequired,\r\n-    image: PropTypes.string.isRequired,\r\n-    title: PropTypes.string.isRequired,\r\n-    description: PropTypes.string.isRequired,\r\n-    date: PropTypes.string.isRequired,\r\n-    time: PropTypes.string.isRequired,\r\n-    location: PropTypes.string.isRequired,\r\n-    likes: PropTypes.number.isRequired,\r\n-    comments: PropTypes.arrayOf(PropTypes.shape({\r\n-      id: PropTypes.number.isRequired,\r\n-      user: PropTypes.string.isRequired,\r\n-      text: PropTypes.string.isRequired,\r\n-    })).isRequired,\r\n-  })).isRequired,\r\n-};\r\n-\r\n-export default EventViewComponent;\n+export default Publications;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731813456681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+// FILE: src/components/Publications.js\r\n+'use client';\r\n+\r\n+import React, { useEffect, useState } from 'react';\r\n+import axios from 'axios';\r\n+import io from 'socket.io-client';\r\n+\r\n+const socket = io('http://localhost:5000');\r\n+\r\n+const Publications = () => {\r\n+    const [publications, setPublications] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        const fetchPublications = async () => {\r\n+            try {\r\n+                const response = await axios.get('/api/publications');\r\n+                setPublications(response.data);\r\n+            } catch (error) {\r\n+                console.error('Error fetching publications:', error);\r\n+            }\r\n+        };\r\n+\r\n+        fetchPublications();\r\n+\r\n+        socket.on('newPublication', (publication) => {\r\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\r\n+        });\r\n+\r\n+        socket.on('updatePublication', (updatedPublication) => {\r\n+            setPublications((prevPublications) =>\r\n+                prevPublications.map((publication) =>\r\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\r\n+                )\r\n+            );\r\n+        });\r\n+\r\n+        socket.on('newComment', (newComment) => {\r\n+            setPublications((prevPublications) =>\r\n+                prevPublications.map((publication) =>\r\n+                    publication._id === newComment.publicationId\r\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\r\n+                        : publication\r\n+                )\r\n+            );\r\n+        });\r\n+\r\n+        return () => {\r\n+            socket.off('newPublication');\r\n+            socket.off('updatePublication');\r\n+            socket.off('newComment');\r\n+        };\r\n+    }, []);\r\n+\r\n+    return (\r\n+        <div>\r\n+            {publications.map(publication => (\r\n+                <div key={publication._id}>\r\n+                    <h2>{publication.title}</h2>\r\n+                    <p>{publication.description}</p>\r\n+                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\r\n+                    <p>{publication.location}</p>\r\n+                    <p>{new Date(publication.date).toLocaleString()}</p>\r\n+                    <p>Likes: {publication.likes}</p>\r\n+                    <div>\r\n+                        {publication.comments.map((comment, index) => (\r\n+                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\r\n+                        ))}\r\n+                    </div>\r\n+                </div>\r\n+            ))}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default Publications;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731813491117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+// FILE: src/components/Publications.js\r\n+'use client';\r\n+\r\n+import React, { useEffect, useState } from 'react';\r\n+import axios from 'axios';\r\n+import io from 'socket.io-client';\r\n+\r\n+const socket = io('http://localhost:3000');\r\n+\r\n+const Publications = () => {\r\n+    const [publications, setPublications] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        const fetchPublications = async () => {\r\n+            try {\r\n+                const response = await axios.get('/api/publications');\r\n+                setPublications(response.data);\r\n+            } catch (error) {\r\n+                console.error('Error fetching publications:', error);\r\n+            }\r\n+        };\r\n+\r\n+        fetchPublications();\r\n+\r\n+        socket.on('newPublication', (publication) => {\r\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\r\n+        });\r\n+\r\n+        socket.on('updatePublication', (updatedPublication) => {\r\n+            setPublications((prevPublications) =>\r\n+                prevPublications.map((publication) =>\r\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\r\n+                )\r\n+            );\r\n+        });\r\n+\r\n+        socket.on('newComment', (newComment) => {\r\n+            setPublications((prevPublications) =>\r\n+                prevPublications.map((publication) =>\r\n+                    publication._id === newComment.publicationId\r\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\r\n+                        : publication\r\n+                )\r\n+            );\r\n+        });\r\n+\r\n+        return () => {\r\n+            socket.off('newPublication');\r\n+            socket.off('updatePublication');\r\n+            socket.off('newComment');\r\n+        };\r\n+    }, []);\r\n+\r\n+    return (\r\n+        <div>\r\n+            {publications.map(publication => (\r\n+                <div key={publication._id}>\r\n+                    <h2>{publication.title}</h2>\r\n+                    <p>{publication.description}</p>\r\n+                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\r\n+                    <p>{publication.location}</p>\r\n+                    <p>{new Date(publication.date).toLocaleString()}</p>\r\n+                    <p>Likes: {publication.likes}</p>\r\n+                    <div>\r\n+                        {publication.comments.map((comment, index) => (\r\n+                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\r\n+                        ))}\r\n+                    </div>\r\n+                </div>\r\n+            ))}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default Publications;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731814641289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,223 +0,0 @@\n-// FILE: src/components/Publications.js\r\n-'use client';\r\n-\r\n-import React, { useEffect, useState } from 'react';\r\n-import axios from 'axios';\r\n-import io from 'socket.io-client';\r\n-\r\n-const socket = io('http://localhost:3000');\r\n-\r\n-const Publications = () => {\r\n-    const [publications, setPublications] = useState([]);\r\n-\r\n-    useEffect(() => {\r\n-        const fetchPublications = async () => {\r\n-            try {\r\n-                const response = await axios.get('/api/publications');\r\n-                setPublications(response.data);\r\n-            } catch (error) {\r\n-                console.error('Error fetching publications:', error);\r\n-            }\r\n-        };\r\n-\r\n-        fetchPublications();\r\n-\r\n-        socket.on('newPublication', (publication) => {\r\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\r\n-        });\r\n-\r\n-        socket.on('updatePublication', (updatedPublication) => {\r\n-            setPublications((prevPublications) =>\r\n-                prevPublications.map((publication) =>\r\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\r\n-                )\r\n-            );\r\n-        });\r\n-\r\n-        socket.on('newComment', (newComment) => {\r\n-            setPublications((prevPublications) =>\r\n-                prevPublications.map((publication) =>\r\n-                    publication._id === newComment.publicationId\r\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\r\n-                        : publication\r\n-                )\r\n-            );\r\n-        });\r\n-\r\n-        return () => {\r\n-            socket.off('newPublication');\r\n-            socket.off('updatePublication');\r\n-            socket.off('newComment');\r\n-        };\r\n-    }, []);\r\n-\r\n-    return (\r\n-        <div>\r\n-            {publications.map(publication => (\r\n-                <div key={publication._id}>\r\n-                    <h2>{publication.title}</h2>\r\n-                    <p>{publication.description}</p>\r\n-                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\r\n-                    <p>{publication.location}</p>\r\n-                    <p>{new Date(publication.date).toLocaleString()}</p>\r\n-                    <p>Likes: {publication.likes}</p>\r\n-                    <div>\r\n-                        {publication.comments.map((comment, index) => (\r\n-                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\r\n-                        ))}\r\n-                    </div>\r\n-                </div>\r\n-            ))}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default Publications;\n-// FILE: src/components/Publications.js\r\n-'use client';\r\n-\r\n-import React, { useEffect, useState } from 'react';\r\n-import axios from 'axios';\r\n-import io from 'socket.io-client';\r\n-\r\n-const socket = io('http://localhost:5000');\r\n-\r\n-const Publications = () => {\r\n-    const [publications, setPublications] = useState([]);\r\n-\r\n-    useEffect(() => {\r\n-        const fetchPublications = async () => {\r\n-            try {\r\n-                const response = await axios.get('/api/publications');\r\n-                setPublications(response.data);\r\n-            } catch (error) {\r\n-                console.error('Error fetching publications:', error);\r\n-            }\r\n-        };\r\n-\r\n-        fetchPublications();\r\n-\r\n-        socket.on('newPublication', (publication) => {\r\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\r\n-        });\r\n-\r\n-        socket.on('updatePublication', (updatedPublication) => {\r\n-            setPublications((prevPublications) =>\r\n-                prevPublications.map((publication) =>\r\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\r\n-                )\r\n-            );\r\n-        });\r\n-\r\n-        socket.on('newComment', (newComment) => {\r\n-            setPublications((prevPublications) =>\r\n-                prevPublications.map((publication) =>\r\n-                    publication._id === newComment.publicationId\r\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\r\n-                        : publication\r\n-                )\r\n-            );\r\n-        });\r\n-\r\n-        return () => {\r\n-            socket.off('newPublication');\r\n-            socket.off('updatePublication');\r\n-            socket.off('newComment');\r\n-        };\r\n-    }, []);\r\n-\r\n-    return (\r\n-        <div>\r\n-            {publications.map(publication => (\r\n-                <div key={publication._id}>\r\n-                    <h2>{publication.title}</h2>\r\n-                    <p>{publication.description}</p>\r\n-                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\r\n-                    <p>{publication.location}</p>\r\n-                    <p>{new Date(publication.date).toLocaleString()}</p>\r\n-                    <p>Likes: {publication.likes}</p>\r\n-                    <div>\r\n-                        {publication.comments.map((comment, index) => (\r\n-                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\r\n-                        ))}\r\n-                    </div>\r\n-                </div>\r\n-            ))}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default Publications;\n-// FILE: src/components/Publications.js\r\n-import React, { useEffect, useState } from 'react';\r\n-import axios from 'axios';\r\n-import io from 'socket.io-client';\r\n-\r\n-const socket = io('http://localhost:5000');\r\n-\r\n-const Publications = () => {\r\n-    const [publications, setPublications] = useState([]);\r\n-\r\n-    useEffect(() => {\r\n-        const fetchPublications = async () => {\r\n-            try {\r\n-                const response = await axios.get('/api/publications');\r\n-                setPublications(response.data);\r\n-            } catch (error) {\r\n-                console.error('Error fetching publications:', error);\r\n-            }\r\n-        };\r\n-\r\n-        fetchPublications();\r\n-\r\n-        socket.on('newPublication', (publication) => {\r\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\r\n-        });\r\n-\r\n-        socket.on('updatePublication', (updatedPublication) => {\r\n-            setPublications((prevPublications) =>\r\n-                prevPublications.map((publication) =>\r\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\r\n-                )\r\n-            );\r\n-        });\r\n-\r\n-        socket.on('newComment', (newComment) => {\r\n-            setPublications((prevPublications) =>\r\n-                prevPublications.map((publication) =>\r\n-                    publication._id === newComment.publication\r\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\r\n-                        : publication\r\n-                )\r\n-            );\r\n-        });\r\n-\r\n-        return () => {\r\n-            socket.off('newPublication');\r\n-            socket.off('updatePublication');\r\n-            socket.off('newComment');\r\n-        };\r\n-    }, []);\r\n-\r\n-    return (\r\n-        <div>\r\n-            {publications.map(publication => (\r\n-                <div key={publication._id}>\r\n-                    <h2>{publication.title}</h2>\r\n-                    <p>{publication.description}</p>\r\n-                    {publication.imageUrl && <img src={publication.imageUrl} alt={publication.title} />}\r\n-                    <p>{publication.location}</p>\r\n-                    <p>{new Date(publication.date).toLocaleString()}</p>\r\n-                    <p>Likes: {publication.likes}</p>\r\n-                    <div>\r\n-                        {publication.comments.map((comment, index) => (\r\n-                            <p key={index}><strong>{comment.user}:</strong> {comment.comment}</p>\r\n-                        ))}\r\n-                    </div>\r\n-                </div>\r\n-            ))}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default Publications;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731814801199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,137 @@\n+'use client';\r\n+\r\n+import React, { useState } from 'react';\r\n+import { Calendar } from 'lucide-react';\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { Input } from \"@/components/ui/input\";\r\n+import { Textarea } from \"@/components/ui/textarea\";\r\n+import { Label } from \"@/components/ui/label\";\r\n+\r\n+export function EventFormComponent() {\r\n+  const [formData, setFormData] = useState({\r\n+    title: '',\r\n+    description: '',\r\n+    date: '',\r\n+    time: '',\r\n+    location: '',\r\n+    organizationName: '',\r\n+    image: null\r\n+  });\r\n+\r\n+  const handleChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    setFormData(prev => ({ ...prev, [name]: value }));\r\n+  };\r\n+\r\n+  const handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+    // Aquí iría la lógica para enviar los datos del formulario\r\n+    console.log('Datos del formulario:', {\r\n+      ...formData,\r\n+      image: formData.image ? formData.image.name : null\r\n+    });\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\r\n+      <div className=\"max-w-2xl mx-auto\">\r\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\r\n+          Crear Nuevo Evento\r\n+        </h1>\r\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\r\n+          <div>\r\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\r\n+            <Input\r\n+              id=\"title\"\r\n+              name=\"title\"\r\n+              value={formData.title}\r\n+              onChange={handleChange}\r\n+              required\r\n+              className=\"mt-1\"\r\n+            />\r\n+          </div>\r\n+          <div>\r\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\r\n+            <Textarea\r\n+              id=\"description\"\r\n+              name=\"description\"\r\n+              value={formData.description}\r\n+              onChange={handleChange}\r\n+              required\r\n+              className=\"mt-1\"\r\n+            />\r\n+          </div>\r\n+          <div className=\"grid grid-cols-2 gap-4\">\r\n+            <div>\r\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\r\n+              <div className=\"relative\">\r\n+                <Input\r\n+                  id=\"date\"\r\n+                  name=\"date\"\r\n+                  type=\"date\"\r\n+                  value={formData.date}\r\n+                  onChange={handleChange}\r\n+                  required\r\n+                  className=\"mt-1\"\r\n+                />\r\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\r\n+              </div>\r\n+            </div>\r\n+            <div>\r\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\r\n+              <Input\r\n+                id=\"time\"\r\n+                name=\"time\"\r\n+                type=\"time\"\r\n+                value={formData.time}\r\n+                onChange={handleChange}\r\n+                required\r\n+                className=\"mt-1\"\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+          <div>\r\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\r\n+            <Input\r\n+              id=\"location\"\r\n+              name=\"location\"\r\n+              value={formData.location}\r\n+              onChange={handleChange}\r\n+              required\r\n+              className=\"mt-1\"\r\n+            />\r\n+          </div>\r\n+          <div>\r\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\r\n+            <Input\r\n+              id=\"image\"\r\n+              name=\"image\"\r\n+              type=\"file\"\r\n+              accept=\"image/*\"\r\n+              onChange={(e) => {\r\n+                const file = e.target.files?.[0] || null;\r\n+                setFormData(prev => ({ ...prev, image: file }));\r\n+              }}\r\n+              required\r\n+              className=\"mt-1\"\r\n+            />\r\n+          </div>\r\n+          <div>\r\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\r\n+            <Input\r\n+              id=\"organizationName\"\r\n+              name=\"organizationName\"\r\n+              value={formData.organizationName}\r\n+              onChange={handleChange}\r\n+              required\r\n+              className=\"mt-1\"\r\n+            />\r\n+          </div>\r\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\r\n+            Crear Evento\r\n+          </Button>\r\n+        </form>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731815020539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { Label } from \"@/components/ui/label\";\r\n \r\n-export function EventFormComponent() {\r\n+export function PostComponent() {\r\n   const [formData, setFormData] = useState({\r\n     title: '',\r\n     description: '',\r\n     date: '',\r\n"
                },
                {
                    "date": 1731815029347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,137 @@\n+'use client';\r\n+\r\n+import React, { useState } from 'react';\r\n+import { Calendar } from 'lucide-react';\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { Input } from \"@/components/ui/input\";\r\n+import { Textarea } from \"@/components/ui/textarea\";\r\n+import { Label } from \"@/components/ui/label\";\r\n+\r\n+export function EventFormComponent() {\r\n+  const [formData, setFormData] = useState({\r\n+    title: '',\r\n+    description: '',\r\n+    date: '',\r\n+    time: '',\r\n+    location: '',\r\n+    organizationName: '',\r\n+    image: null\r\n+  });\r\n+\r\n+  const handleChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    setFormData(prev => ({ ...prev, [name]: value }));\r\n+  };\r\n+\r\n+  const handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+    // Aquí iría la lógica para enviar los datos del formulario\r\n+    console.log('Datos del formulario:', {\r\n+      ...formData,\r\n+      image: formData.image ? formData.image.name : null\r\n+    });\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\r\n+      <div className=\"max-w-2xl mx-auto\">\r\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\r\n+          Crear Nuevo Evento\r\n+        </h1>\r\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\r\n+          <div>\r\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\r\n+            <Input\r\n+              id=\"title\"\r\n+              name=\"title\"\r\n+              value={formData.title}\r\n+              onChange={handleChange}\r\n+              required\r\n+              className=\"mt-1\"\r\n+            />\r\n+          </div>\r\n+          <div>\r\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\r\n+            <Textarea\r\n+              id=\"description\"\r\n+              name=\"description\"\r\n+              value={formData.description}\r\n+              onChange={handleChange}\r\n+              required\r\n+              className=\"mt-1\"\r\n+            />\r\n+          </div>\r\n+          <div className=\"grid grid-cols-2 gap-4\">\r\n+            <div>\r\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\r\n+              <div className=\"relative\">\r\n+                <Input\r\n+                  id=\"date\"\r\n+                  name=\"date\"\r\n+                  type=\"date\"\r\n+                  value={formData.date}\r\n+                  onChange={handleChange}\r\n+                  required\r\n+                  className=\"mt-1\"\r\n+                />\r\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\r\n+              </div>\r\n+            </div>\r\n+            <div>\r\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\r\n+              <Input\r\n+                id=\"time\"\r\n+                name=\"time\"\r\n+                type=\"time\"\r\n+                value={formData.time}\r\n+                onChange={handleChange}\r\n+                required\r\n+                className=\"mt-1\"\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+          <div>\r\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\r\n+            <Input\r\n+              id=\"location\"\r\n+              name=\"location\"\r\n+              value={formData.location}\r\n+              onChange={handleChange}\r\n+              required\r\n+              className=\"mt-1\"\r\n+            />\r\n+          </div>\r\n+          <div>\r\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\r\n+            <Input\r\n+              id=\"image\"\r\n+              name=\"image\"\r\n+              type=\"file\"\r\n+              accept=\"image/*\"\r\n+              onChange={(e) => {\r\n+                const file = e.target.files?.[0] || null;\r\n+                setFormData(prev => ({ ...prev, image: file }));\r\n+              }}\r\n+              required\r\n+              className=\"mt-1\"\r\n+            />\r\n+          </div>\r\n+          <div>\r\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\r\n+            <Input\r\n+              id=\"organizationName\"\r\n+              name=\"organizationName\"\r\n+              value={formData.organizationName}\r\n+              onChange={handleChange}\r\n+              required\r\n+              className=\"mt-1\"\r\n+            />\r\n+          </div>\r\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\r\n+            Crear Evento\r\n+          </Button>\r\n+        </form>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731024358198,
            "name": "Commit-0",
            "content": ""
        }
    ]
}