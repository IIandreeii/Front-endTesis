{
    "sourceFile": "src/components/component/event-form.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 40,
            "patches": [
                {
                    "date": 1731815467853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731815717001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:5000');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.charity) {\n+          setFormData(prev => ({ ...prev, organizationName: data.charity.name }));\n+          setIsOrganization(true);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = new FormData();\n+    formDataToSend.append('title', formData.title);\n+    formDataToSend.append('description', formData.description);\n+    formDataToSend.append('date', formData.date);\n+    formDataToSend.append('time', formData.time);\n+    formDataToSend.append('location', formData.location);\n+    formDataToSend.append('organizationName', formData.organizationName);\n+    if (formData.image) {\n+      formDataToSend.append('image', formData.image);\n+    }\n+\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', formDataToSend);\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.organizationName}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+              disabled\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731815747499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n             <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n             <Input\n               id=\"organizationName\"\n               name=\"organizationName\"\n-              value={formData.organizationName}\n+              value={formData.no}\n               onChange={handleChange}\n               required\n               className=\"mt-1\"\n               disabled\n@@ -190,154 +190,5 @@\n         </form>\n       </div>\n     </div>\n   );\n-}\n-'use client';\n-\n-import React, { useState } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:5000');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    image: null\n-  });\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = new FormData();\n-    formDataToSend.append('title', formData.title);\n-    formDataToSend.append('description', formData.description);\n-    formDataToSend.append('date', formData.date);\n-    formDataToSend.append('time', formData.time);\n-    formDataToSend.append('location', formData.location);\n-    formDataToSend.append('organizationName', formData.organizationName);\n-    if (formData.image) {\n-      formDataToSend.append('image', formData.image);\n-    }\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend);\n-  };\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.organizationName}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731815786424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:5000');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.charity) {\n+          setFormData(prev => ({ ...prev, organizationName: data.charity.name }));\n+          setIsOrganization(true);\n+          console.log('Organization:', data.charity);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = new FormData();\n+    formDataToSend.append('title', formData.title);\n+    formDataToSend.append('description', formData.description);\n+    formDataToSend.append('date', formData.date);\n+    formDataToSend.append('time', formData.time);\n+    formDataToSend.append('location', formData.location);\n+    formDataToSend.append('organizationName', formData.organizationName);\n+    if (formData.image) {\n+      formDataToSend.append('image', formData.image);\n+    }\n+\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', formDataToSend);\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.nombre}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+              disabled\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731815796833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.charity) {\n+          setFormData(prev => ({ ...prev, organizationName: data.charity.name }));\n+          setIsOrganization(true);\n+          console.log('Organization:', data.charity);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = new FormData();\n+    formDataToSend.append('title', formData.title);\n+    formDataToSend.append('description', formData.description);\n+    formDataToSend.append('date', formData.date);\n+    formDataToSend.append('time', formData.time);\n+    formDataToSend.append('location', formData.location);\n+    formDataToSend.append('organizationName', formData.organizationName);\n+    if (formData.image) {\n+      formDataToSend.append('image', formData.image);\n+    }\n+\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', formDataToSend);\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.nombre}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+              disabled\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731815858106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.charity) {\n+          setFormData(prev => ({ ...prev, organizationName: data.charity.name }));\n+          setIsOrganization(true);\n+          console.log('Organization:', data.);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = new FormData();\n+    formDataToSend.append('title', formData.title);\n+    formDataToSend.append('description', formData.description);\n+    formDataToSend.append('date', formData.date);\n+    formDataToSend.append('time', formData.time);\n+    formDataToSend.append('location', formData.location);\n+    formDataToSend.append('organizationName', formData.organizationName);\n+    if (formData.image) {\n+      formDataToSend.append('image', formData.image);\n+    }\n+\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', formDataToSend);\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.nombre}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+              disabled\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731815879703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.charity) {\n+          setFormData(prev => ({ ...prev, organizationName: data.charity.name }));\n+          setIsOrganization(true);\n+          console.log('Organization:', data.name);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = new FormData();\n+    formDataToSend.append('title', formData.title);\n+    formDataToSend.append('description', formData.description);\n+    formDataToSend.append('date', formData.date);\n+    formDataToSend.append('time', formData.time);\n+    formDataToSend.append('location', formData.location);\n+    formDataToSend.append('organizationName', formData.organizationName);\n+    if (formData.image) {\n+      formDataToSend.append('image', formData.image);\n+    }\n+\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', formDataToSend);\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.nombre}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+              disabled\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731815891722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.charity) {\n+          setFormData(prev => ({ ...prev, organizationName: data.charity.name }));\n+          setIsOrganization(true);\n+          console.log('Organization:', data.charity);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = new FormData();\n+    formDataToSend.append('title', formData.title);\n+    formDataToSend.append('description', formData.description);\n+    formDataToSend.append('date', formData.date);\n+    formDataToSend.append('time', formData.time);\n+    formDataToSend.append('location', formData.location);\n+    formDataToSend.append('organizationName', formData.organizationName);\n+    if (formData.image) {\n+      formDataToSend.append('image', formData.image);\n+    }\n+\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', formDataToSend);\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.nombre}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+              disabled\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731815974816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,8 @@\n         const data = await res.json();\n         if (data.charity) {\n           setFormData(prev => ({ ...prev, organizationName: data.charity.name }));\n           setIsOrganization(true);\n-          console.log('Organization:', data.charity);\n         }\n       } catch (error) {\n         console.error('Error:', error);\n       } finally {\n@@ -191,979 +190,5 @@\n         </form>\n       </div>\n     </div>\n   );\n-}\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.charity) {\n-          setFormData(prev => ({ ...prev, organizationName: data.charity.name }));\n-          setIsOrganization(true);\n-          console.log('Organization:', data.name);\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = new FormData();\n-    formDataToSend.append('title', formData.title);\n-    formDataToSend.append('description', formData.description);\n-    formDataToSend.append('date', formData.date);\n-    formDataToSend.append('time', formData.time);\n-    formDataToSend.append('location', formData.location);\n-    formDataToSend.append('organizationName', formData.organizationName);\n-    if (formData.image) {\n-      formDataToSend.append('image', formData.image);\n-    }\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend);\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.nombre}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-              disabled\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.charity) {\n-          setFormData(prev => ({ ...prev, organizationName: data.charity.name }));\n-          setIsOrganization(true);\n-          console.log('Organization:', data.);\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = new FormData();\n-    formDataToSend.append('title', formData.title);\n-    formDataToSend.append('description', formData.description);\n-    formDataToSend.append('date', formData.date);\n-    formDataToSend.append('time', formData.time);\n-    formDataToSend.append('location', formData.location);\n-    formDataToSend.append('organizationName', formData.organizationName);\n-    if (formData.image) {\n-      formDataToSend.append('image', formData.image);\n-    }\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend);\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.nombre}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-              disabled\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.charity) {\n-          setFormData(prev => ({ ...prev, organizationName: data.charity.name }));\n-          setIsOrganization(true);\n-          console.log('Organization:', data.charity);\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = new FormData();\n-    formDataToSend.append('title', formData.title);\n-    formDataToSend.append('description', formData.description);\n-    formDataToSend.append('date', formData.date);\n-    formDataToSend.append('time', formData.time);\n-    formDataToSend.append('location', formData.location);\n-    formDataToSend.append('organizationName', formData.organizationName);\n-    if (formData.image) {\n-      formDataToSend.append('image', formData.image);\n-    }\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend);\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.nombre}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-              disabled\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:5000');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.charity) {\n-          setFormData(prev => ({ ...prev, organizationName: data.charity.name }));\n-          setIsOrganization(true);\n-          console.log('Organization:', data.charity);\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = new FormData();\n-    formDataToSend.append('title', formData.title);\n-    formDataToSend.append('description', formData.description);\n-    formDataToSend.append('date', formData.date);\n-    formDataToSend.append('time', formData.time);\n-    formDataToSend.append('location', formData.location);\n-    formDataToSend.append('organizationName', formData.organizationName);\n-    if (formData.image) {\n-      formDataToSend.append('image', formData.image);\n-    }\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend);\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.nombre}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-              disabled\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:5000');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.charity) {\n-          setFormData(prev => ({ ...prev, organizationName: data.charity.name }));\n-          setIsOrganization(true);\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = new FormData();\n-    formDataToSend.append('title', formData.title);\n-    formDataToSend.append('description', formData.description);\n-    formDataToSend.append('date', formData.date);\n-    formDataToSend.append('time', formData.time);\n-    formDataToSend.append('location', formData.location);\n-    formDataToSend.append('organizationName', formData.organizationName);\n-    if (formData.image) {\n-      formDataToSend.append('image', formData.image);\n-    }\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend);\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.no}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-              disabled\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731816010768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { Textarea } from \"@/components/ui/textarea\";\n import { Label } from \"@/components/ui/label\";\n import io from 'socket.io-client';\n \n-const socket = io('http://localhost:3001');\n+const socket = io('http://localhost:5000');\n \n export function EventFormComponent() {\n   const [formData, setFormData] = useState({\n     title: '',\n@@ -17,8 +17,9 @@\n     date: '',\n     time: '',\n     location: '',\n     organizationName: '',\n+    organizationId: '',\n     image: null\n   });\n   const [isOrganization, setIsOrganization] = useState(false);\n   const [loading, setLoading] = useState(true);\n@@ -43,9 +44,9 @@\n           throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n         }\n         const data = await res.json();\n         if (data.charity) {\n-          setFormData(prev => ({ ...prev, organizationName: data.charity.name }));\n+          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity.id }));\n           setIsOrganization(true);\n         }\n       } catch (error) {\n         console.error('Error:', error);\n@@ -71,8 +72,9 @@\n     formDataToSend.append('date', formData.date);\n     formDataToSend.append('time', formData.time);\n     formDataToSend.append('location', formData.location);\n     formDataToSend.append('organizationName', formData.organizationName);\n+    formDataToSend.append('organizationId', formData.organizationId);\n     if (formData.image) {\n       formDataToSend.append('image', formData.image);\n     }\n \n@@ -176,9 +178,9 @@\n             <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n             <Input\n               id=\"organizationName\"\n               name=\"organizationName\"\n-              value={formData.nombre}\n+              value={formData.organizationName}\n               onChange={handleChange}\n               required\n               className=\"mt-1\"\n               disabled\n"
                },
                {
                    "date": 1731816021140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,196 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3000');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    organizationId: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.charity) {\n+          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity.id }));\n+          setIsOrganization(true);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = new FormData();\n+    formDataToSend.append('title', formData.title);\n+    formDataToSend.append('description', formData.description);\n+    formDataToSend.append('date', formData.date);\n+    formDataToSend.append('time', formData.time);\n+    formDataToSend.append('location', formData.location);\n+    formDataToSend.append('organizationName', formData.organizationName);\n+    formDataToSend.append('organizationId', formData.organizationId);\n+    if (formData.image) {\n+      formDataToSend.append('image', formData.image);\n+    }\n+\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', formDataToSend);\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.organizationName}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+              disabled\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731816351327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    organizationId: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.charity) {\n+          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity.id }));\n+          setIsOrganization(true);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = new FormData();\n+    formDataToSend.append('title', formData.title);\n+    formDataToSend.append('description', formData.description);\n+    formDataToSend.append('date', formData.date);\n+    formDataToSend.append('time', formData.time);\n+    formDataToSend.append('location', formData.location);\n+    formDataToSend.append('organizationName', formData.organizationName);\n+    formDataToSend.append('organizationId', formData.organizationId);\n+    if (formData.image) {\n+      formDataToSend.append('image', formData.image);\n+    }\n+\n+    // Log the form data to the console\n+    console.log('Datos del formulario a enviar:', {\n+      title: formData.title,\n+      description: formData.description,\n+      date: formData.date,\n+      time: formData.time,\n+      location: formData.location,\n+      organizationName: formData.organizationName,\n+      organizationId: formData.organizationId,\n+      image: formData.image ? formData.image.name : null\n+    });\n+\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', formDataToSend);\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.organizationName}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+              disabled\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731816552135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,600 +0,0 @@\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    organizationId: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.charity) {\n-          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity.id }));\n-          setIsOrganization(true);\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = new FormData();\n-    formDataToSend.append('title', formData.title);\n-    formDataToSend.append('description', formData.description);\n-    formDataToSend.append('date', formData.date);\n-    formDataToSend.append('time', formData.time);\n-    formDataToSend.append('location', formData.location);\n-    formDataToSend.append('organizationName', formData.organizationName);\n-    formDataToSend.append('organizationId', formData.organizationId);\n-    if (formData.image) {\n-      formDataToSend.append('image', formData.image);\n-    }\n-\n-    // Log the form data to the console\n-    console.log('Datos del formulario a enviar:', {\n-      title: formData.title,\n-      description: formData.description,\n-      date: formData.date,\n-      time: formData.time,\n-      location: formData.location,\n-      organizationName: formData.organizationName,\n-      organizationId: formData.organizationId,\n-      image: formData.image ? formData.image.name : null\n-    });\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend);\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.organizationName}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-              disabled\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3000');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    organizationId: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.charity) {\n-          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity.id }));\n-          setIsOrganization(true);\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = new FormData();\n-    formDataToSend.append('title', formData.title);\n-    formDataToSend.append('description', formData.description);\n-    formDataToSend.append('date', formData.date);\n-    formDataToSend.append('time', formData.time);\n-    formDataToSend.append('location', formData.location);\n-    formDataToSend.append('organizationName', formData.organizationName);\n-    formDataToSend.append('organizationId', formData.organizationId);\n-    if (formData.image) {\n-      formDataToSend.append('image', formData.image);\n-    }\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend);\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.organizationName}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-              disabled\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:5000');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    organizationId: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.charity) {\n-          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity.id }));\n-          setIsOrganization(true);\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = new FormData();\n-    formDataToSend.append('title', formData.title);\n-    formDataToSend.append('description', formData.description);\n-    formDataToSend.append('date', formData.date);\n-    formDataToSend.append('time', formData.time);\n-    formDataToSend.append('location', formData.location);\n-    formDataToSend.append('organizationName', formData.organizationName);\n-    formDataToSend.append('organizationId', formData.organizationId);\n-    if (formData.image) {\n-      formDataToSend.append('image', formData.image);\n-    }\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend);\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.organizationName}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-              disabled\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731816572510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+'use client';\n+\n+import React, { useState } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationId: '', // Asegúrate de usar el ID de la organización\n+    image: null\n+  });\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = new FormData();\n+    formDataToSend.append('title', formData.title);\n+    formDataToSend.append('description', formData.description);\n+    formDataToSend.append('date', formData.date);\n+    formDataToSend.append('time', formData.time);\n+    formDataToSend.append('location', formData.location);\n+    formDataToSend.append('organizationId', formData.organizationId); // Enviar el ID de la organización\n+    if (formData.image) {\n+      formDataToSend.append('image', formData.image);\n+    }\n+\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', formDataToSend);\n+  };\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationId\" className=\"text-[#042637]\">ID de la Organización</Label>\n+            <Input\n+              id=\"organizationId\"\n+              name=\"organizationId\"\n+              value={formData.organizationId}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731816621858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    organizationId: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.charity) {\n+          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity.id }));\n+          setIsOrganization(true);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = new FormData();\n+    formDataToSend.append('title', formData.title);\n+    formDataToSend.append('description', formData.description);\n+    formDataToSend.append('date', formData.date);\n+    formDataToSend.append('time', formData.time);\n+    formDataToSend.append('location', formData.location);\n+    formDataToSend.append('organizationName', formData.organizationName);\n+    formDataToSend.append('organizationId', formData.organizationId);\n+    if (formData.image) {\n+      formDataToSend.append('image', formData.image);\n+    }\n+\n+    // Log the form data to the console\n+    console.log('Datos del formulario a enviar:', {\n+      title: formData.title,\n+      description: formData.description,\n+      date: formData.date,\n+      time: formData.time,\n+      location: formData.location,\n+      organizationName: formData.organizationName,\n+      organizationId: formData.organizationId,\n+      image: formData.image ? formData.image.name : null\n+    });\n+\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', formDataToSend);\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.organizationName}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+              disabled\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731816682360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,154 +204,5 @@\n         </form>\n       </div>\n     </div>\n   );\n-}\n-'use client';\n-\n-import React, { useState } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationId: '', // Asegúrate de usar el ID de la organización\n-    image: null\n-  });\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = new FormData();\n-    formDataToSend.append('title', formData.title);\n-    formDataToSend.append('description', formData.description);\n-    formDataToSend.append('date', formData.date);\n-    formDataToSend.append('time', formData.time);\n-    formDataToSend.append('location', formData.location);\n-    formDataToSend.append('organizationId', formData.organizationId); // Enviar el ID de la organización\n-    if (formData.image) {\n-      formDataToSend.append('image', formData.image);\n-    }\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend);\n-  };\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationId\" className=\"text-[#042637]\">ID de la Organización</Label>\n-            <Input\n-              id=\"organizationId\"\n-              name=\"organizationId\"\n-              value={formData.organizationId}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731816808322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,22 +77,30 @@\n     if (formData.image) {\n       formDataToSend.append('image', formData.image);\n     }\n \n-    // Log the form data to the console\n-    console.log('Datos del formulario a enviar:', {\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', {\n       title: formData.title,\n       description: formData.description,\n       date: formData.date,\n       time: formData.time,\n       location: formData.location,\n-      organizationName: formData.organizationName,\n       organizationId: formData.organizationId,\n       image: formData.image ? formData.image.name : null\n     });\n \n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend);\n+    // Emitir evento de subida de imagen a través de socket.io\n+    if (formData.image) {\n+      const reader = new FileReader();\n+      reader.onload = () => {\n+        socket.emit('uploadImage', {\n+          image: reader.result,\n+          imageName: formData.image.name\n+        });\n+      };\n+      reader.readAsDataURL(formData.image);\n+    }\n   };\n \n   if (loading) {\n     return <div>Cargando...</div>;\n"
                },
                {
                    "date": 1731817166307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    organizationId: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const [message, setMessage] = useState('');\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.charity) {\n+          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity.id }));\n+          setIsOrganization(true);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = new FormData();\n+    formDataToSend.append('title', formData.title);\n+    formDataToSend.append('description', formData.description);\n+    formDataToSend.append('date', formData.date);\n+    formDataToSend.append('time', formData.time);\n+    formDataToSend.append('location', formData.location);\n+    formDataToSend.append('organizationName', formData.organizationName);\n+    formDataToSend.append('organizationId', formData.organizationId);\n+    if (formData.image) {\n+      formDataToSend.append('image', formData.image);\n+    }\n+\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', formDataToSend, (response) => {\n+      if (response.success) {\n+        setMessage('Publicación creada exitosamente');\n+      } else {\n+        setMessage(`Error: ${response.message}`);\n+      }\n+    });\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.organizationName}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+              disabled\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731817630160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,8 +78,20 @@\n     if (formData.image) {\n       formDataToSend.append('image', formData.image);\n     }\n \n+    // Log the form data to the console\n+    console.log('Datos del formulario a enviar:', {\n+      title: formData.title,\n+      description: formData.description,\n+      date: formData.date,\n+      time: formData.time,\n+      location: formData.location,\n+      organizationName: formData.organizationName,\n+      organizationId: formData.organizationId,\n+      image: formData.image ? formData.image.name : null\n+    });\n+\n     // Emitir evento de creación de publicación a través de socket.io\n     socket.emit('createPublication', formDataToSend, (response) => {\n       if (response.success) {\n         setMessage('Publicación creada exitosamente');\n@@ -200,221 +212,5 @@\n         </form>\n       </div>\n     </div>\n   );\n-}\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    organizationId: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.charity) {\n-          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity.id }));\n-          setIsOrganization(true);\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = new FormData();\n-    formDataToSend.append('title', formData.title);\n-    formDataToSend.append('description', formData.description);\n-    formDataToSend.append('date', formData.date);\n-    formDataToSend.append('time', formData.time);\n-    formDataToSend.append('location', formData.location);\n-    formDataToSend.append('organizationName', formData.organizationName);\n-    formDataToSend.append('organizationId', formData.organizationId);\n-    if (formData.image) {\n-      formDataToSend.append('image', formData.image);\n-    }\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', {\n-      title: formData.title,\n-      description: formData.description,\n-      date: formData.date,\n-      time: formData.time,\n-      location: formData.location,\n-      organizationId: formData.organizationId,\n-      image: formData.image ? formData.image.name : null\n-    });\n-\n-    // Emitir evento de subida de imagen a través de socket.io\n-    if (formData.image) {\n-      const reader = new FileReader();\n-      reader.onload = () => {\n-        socket.emit('uploadImage', {\n-          image: reader.result,\n-          imageName: formData.image.name\n-        });\n-      };\n-      reader.readAsDataURL(formData.image);\n-    }\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.organizationName}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-              disabled\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731817927180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,216 +1,26 @@\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    organizationId: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const [message, setMessage] = useState('');\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.charity) {\n-          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity.id }));\n-          setIsOrganization(true);\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = new FormData();\n-    formDataToSend.append('title', formData.title);\n-    formDataToSend.append('description', formData.description);\n-    formDataToSend.append('date', formData.date);\n-    formDataToSend.append('time', formData.time);\n-    formDataToSend.append('location', formData.location);\n-    formDataToSend.append('organizationName', formData.organizationName);\n-    formDataToSend.append('organizationId', formData.organizationId);\n-    if (formData.image) {\n-      formDataToSend.append('image', formData.image);\n-    }\n-\n-    // Log the form data to the console\n-    console.log('Datos del formulario a enviar:', {\n-      title: formData.title,\n-      description: formData.description,\n-      date: formData.date,\n-      time: formData.time,\n-      location: formData.location,\n-      organizationName: formData.organizationName,\n-      organizationId: formData.organizationId,\n-      image: formData.image ? formData.image.name : null\n-    });\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend, (response) => {\n-      if (response.success) {\n-        setMessage('Publicación creada exitosamente');\n-      } else {\n-        setMessage(`Error: ${response.message}`);\n-      }\n-    });\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.organizationName}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-              disabled\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n\\ No newline at end of file\n+Datos del formulario a enviar: \n+{title: 'ds', description: 'asd', date: '2024-11-21', time: '03:24', location: 'asdasdasd', …}\n+date\n+: \n+\"2024-11-21\"\n+description\n+: \n+\"asd\"\n+image\n+: \n+\"b816630d-e0af-4dae-a054-2b650c72911a.jpg\"\n+location\n+: \n+\"asdasdasd\"\n+organizationId\n+: \n+\"670447d138c6cbf0d6bc255e\"\n+organizationName\n+: \n+\"monstritosnnnnnn\"\n+time\n+: \n+\"03:24\"\n+title\n+: \n+\"ds\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731817940346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    organizationId: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const [message, setMessage] = useState('');\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.charity) {\n+          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity._id }));\n+          setIsOrganization(true);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = {\n+      title: formData.title,\n+      description: formData.description,\n+      date: formData.date,\n+      time: formData.time,\n+      location: formData.location,\n+      organizationId: formData.organizationId,\n+      image: formData.image ? formData.image.name : null\n+    };\n+\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', formDataToSend, (response) => {\n+      if (response.success) {\n+        setMessage('Publicación creada exitosamente');\n+      } else {\n+        setMessage(`Error: ${response.message}`);\n+      }\n+    });\n+\n+    // Emitir evento de subida de imagen a través de socket.io\n+    if (formData.image) {\n+      const reader = new FileReader();\n+      reader.onload = () => {\n+        socket.emit('uploadImage', {\n+          image: reader.result,\n+          imageName: formData.image.name\n+        });\n+      };\n+      reader.readAsDataURL(formData.image);\n+    }\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.organizationName}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+              disabled\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731818048743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,14 +156,14 @@\n             <div>\n               <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n               <Input\n                 id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n+                  name=\"time\"\n+                  type=\"time\"\n+                  value={formData.time}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n               />\n             </div>\n           </div>\n           <div>\n@@ -210,31 +210,5 @@\n         </form>\n       </div>\n     </div>\n   );\n-}\n-Datos del formulario a enviar: \n-{title: 'ds', description: 'asd', date: '2024-11-21', time: '03:24', location: 'asdasdasd', …}\n-date\n-: \n-\"2024-11-21\"\n-description\n-: \n-\"asd\"\n-image\n-: \n-\"b816630d-e0af-4dae-a054-2b650c72911a.jpg\"\n-location\n-: \n-\"asdasdasd\"\n-organizationId\n-: \n-\"670447d138c6cbf0d6bc255e\"\n-organizationName\n-: \n-\"monstritosnnnnnn\"\n-time\n-: \n-\"03:24\"\n-title\n-: \n-\"ds\"\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731818218866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,14 +156,14 @@\n             <div>\n               <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n               <Input\n                 id=\"time\"\n-                  name=\"time\"\n-                  type=\"time\"\n-                  value={formData.time}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n               />\n             </div>\n           </div>\n           <div>\n"
                },
                {
                    "date": 1731818342280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    organizationId: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const [message, setMessage] = useState('');\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        if (data.charity) {\n+          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity._id }));\n+          setIsOrganization(true);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = {\n+      title: formData.title,\n+      description: formData.description,\n+      date: formData.date,\n+      time: formData.time,\n+      location: formData.location,\n+      organizationId: formData.organizationId,\n+      image: formData.image ? formData.image.name : null\n+    };\n+\n+    // Emitir evento de creación de publicación a través de socket.io\n+    socket.emit('createPublication', formDataToSend, (response) => {\n+      if (response.success) {\n+        setMessage('Publicación creada exitosamente');\n+      } else {\n+        setMessage(`Error: ${response.message}`);\n+      }\n+    });\n+\n+    // Emitir evento de subida de imagen a través de socket.io\n+    if (formData.image) {\n+      const reader = new FileReader();\n+      reader.onload = () => {\n+        socket.emit('uploadImage', {\n+          image: reader.result,\n+          imageName: formData.image.name\n+        });\n+      };\n+      reader.readAsDataURL(formData.image);\n+    }\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.organizationName}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+              disabled\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731818640334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    organizationId: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const [message, setMessage] = useState('');\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+        const data = await res.json();\n+        console.log('Datos del perfil:', data); // Log para debug\n+        if (data.charity) {\n+          setFormData(prev => ({\n+            ...prev,\n+            organizationName: data.charity.nombre,\n+            organizationId: data.charity._id\n+          }));\n+          setIsOrganization(true);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = {\n+      title: formData.title,\n+      description: formData.description,\n+      date: formData.date,\n+      time: formData.time,\n+      location: formData.location,\n+      organizationId: formData.organizationId,\n+      image: formData.image ? formData.image.name : null\n+    };\n+\n+    console.log('Datos enviados:', formDataToSend); // Log para debug\n+\n+    // Emitir evento de creación de publicación\n+    socket.emit('createPublication', formDataToSend, (response) => {\n+      if (response.success) {\n+        setMessage('Publicación creada exitosamente');\n+      } else {\n+        setMessage(`Error: ${response.message}`);\n+      }\n+    });\n+\n+    // Emitir evento de subida de imagen\n+    if (formData.image) {\n+      const reader = new FileReader();\n+      reader.onload = () => {\n+        socket.emit('uploadImage', {\n+          image: reader.result,\n+          imageName: formData.image.name\n+        });\n+      };\n+      reader.readAsDataURL(formData.image);\n+    }\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.organizationName}\n+              disabled\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1731819277245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    organizationId: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const [message, setMessage] = useState('');\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+\n+        const data = await res.json();\n+        console.log('Datos del perfil:', data);\n+\n+        if (data.charity) {\n+          setFormData(prev => ({\n+            ...prev,\n+            organizationName: data.charity.nombre || '',\n+            organizationId: data.charity.id || data.charity._id || ''\n+          }));\n+          setIsOrganization(true);\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    if (!formData.organizationId) {\n+      console.error('El ID de la organización no está definido.');\n+      return setMessage('Error: No se pudo determinar la organización.');\n+    }\n+\n+    const formDataToSend = {\n+      title: formData.title,\n+      description: formData.description,\n+      date: formData.date,\n+      time: formData.time,\n+      location: formData.location,\n+      organizationId: formData.organizationId,\n+      image: formData.image ? formData.image.name : null\n+    };\n+\n+    console.log('Datos enviados:', formDataToSend);\n+\n+    // Emitir evento de creación de publicación\n+    socket.emit('createPublication', formDataToSend, (response) => {\n+      if (response.success) {\n+        setMessage('Publicación creada exitosamente');\n+      } else {\n+        setMessage(`Error: ${response.message}`);\n+      }\n+    });\n+\n+    // Emitir evento de subida de imagen\n+    if (formData.image) {\n+      const reader = new FileReader();\n+      reader.onload = () => {\n+        socket.emit('uploadImage', {\n+          image: reader.result,\n+          imageName: formData.image.name\n+        });\n+      };\n+      reader.readAsDataURL(formData.image);\n+    }\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.organizationName}\n+              disabled\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1731819463146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,239 +49,22 @@\n         const data = await res.json();\n         console.log('Datos del perfil:', data);\n \n         if (data.charity) {\n-          setFormData(prev => ({\n-            ...prev,\n-            organizationName: data.charity.nombre || '',\n-            organizationId: data.charity.id || data.charity._id || ''\n-          }));\n-          setIsOrganization(true);\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n+          // Aseguramos que `id` esté presente en `charity`\n+          const charityId = data.charity.id || data.charity._id;\n \n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    if (!formData.organizationId) {\n-      console.error('El ID de la organización no está definido.');\n-      return setMessage('Error: No se pudo determinar la organización.');\n-    }\n-\n-    const formDataToSend = {\n-      title: formData.title,\n-      description: formData.description,\n-      date: formData.date,\n-      time: formData.time,\n-      location: formData.location,\n-      organizationId: formData.organizationId,\n-      image: formData.image ? formData.image.name : null\n-    };\n-\n-    console.log('Datos enviados:', formDataToSend);\n-\n-    // Emitir evento de creación de publicación\n-    socket.emit('createPublication', formDataToSend, (response) => {\n-      if (response.success) {\n-        setMessage('Publicación creada exitosamente');\n-      } else {\n-        setMessage(`Error: ${response.message}`);\n-      }\n-    });\n-\n-    // Emitir evento de subida de imagen\n-    if (formData.image) {\n-      const reader = new FileReader();\n-      reader.onload = () => {\n-        socket.emit('uploadImage', {\n-          image: reader.result,\n-          imageName: formData.image.name\n-        });\n-      };\n-      reader.readAsDataURL(formData.image);\n-    }\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.organizationName}\n-              disabled\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    organizationId: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const [message, setMessage] = useState('');\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+          if (charityId) {\n+            setFormData(prev => ({\n+              ...prev,\n+              organizationName: data.charity.nombre || '', // Asignar nombre de la organización\n+              organizationId: charityId  // Asignamos correctamente el id de la organización\n+            }));\n+            setIsOrganization(true);\n+          } else {\n+            console.error('No se encontró ID para la organización.');\n+          }\n         }\n-        const data = await res.json();\n-        console.log('Datos del perfil:', data); // Log para debug\n-        if (data.charity) {\n-          setFormData(prev => ({\n-            ...prev,\n-            organizationName: data.charity.nombre,\n-            organizationId: data.charity._id\n-          }));\n-          setIsOrganization(true);\n-        }\n       } catch (error) {\n         console.error('Error:', error);\n       } finally {\n         setLoading(false);\n@@ -443,432 +226,4 @@\n       </div>\n     </div>\n   );\n }\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    organizationId: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const [message, setMessage] = useState('');\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.charity) {\n-          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity._id }));\n-          setIsOrganization(true);\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = {\n-      title: formData.title,\n-      description: formData.description,\n-      date: formData.date,\n-      time: formData.time,\n-      location: formData.location,\n-      organizationId: formData.organizationId,\n-      image: formData.image ? formData.image.name : null\n-    };\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend, (response) => {\n-      if (response.success) {\n-        setMessage('Publicación creada exitosamente');\n-      } else {\n-        setMessage(`Error: ${response.message}`);\n-      }\n-    });\n-\n-    // Emitir evento de subida de imagen a través de socket.io\n-    if (formData.image) {\n-      const reader = new FileReader();\n-      reader.onload = () => {\n-        socket.emit('uploadImage', {\n-          image: reader.result,\n-          imageName: formData.image.name\n-        });\n-      };\n-      reader.readAsDataURL(formData.image);\n-    }\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.organizationName}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-              disabled\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    organizationId: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const [message, setMessage] = useState('');\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-        const data = await res.json();\n-        if (data.charity) {\n-          setFormData(prev => ({ ...prev, organizationName: data.charity.nombre, organizationId: data.charity._id }));\n-          setIsOrganization(true);\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = {\n-      title: formData.title,\n-      description: formData.description,\n-      date: formData.date,\n-      time: formData.time,\n-      location: formData.location,\n-      organizationId: formData.organizationId,\n-      image: formData.image ? formData.image.name : null\n-    };\n-\n-    // Emitir evento de creación de publicación a través de socket.io\n-    socket.emit('createPublication', formDataToSend, (response) => {\n-      if (response.success) {\n-        setMessage('Publicación creada exitosamente');\n-      } else {\n-        setMessage(`Error: ${response.message}`);\n-      }\n-    });\n-\n-    // Emitir evento de subida de imagen a través de socket.io\n-    if (formData.image) {\n-      const reader = new FileReader();\n-      reader.onload = () => {\n-        socket.emit('uploadImage', {\n-          image: reader.result,\n-          imageName: formData.image.name\n-        });\n-      };\n-      reader.readAsDataURL(formData.image);\n-    }\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.organizationName}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-              disabled\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731825971010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,228 @@\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n+\n+const socket = io('http://localhost:3001');\n+\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    organizationId: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const [message, setMessage] = useState('');\n+\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n+\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n+        });\n+\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+        }\n+\n+        const data = await res.json();\n+\n+        if (data.charity) {\n+          // Aseguramos que `id` esté presente en `charity`\n+          const charityId = data.charity.id || data.charity._id;\n+\n+          if (charityId) {\n+            setFormData(prev => ({\n+              ...prev,\n+              organizationName: data.charity.nombre || '', // Asignar nombre de la organización\n+              organizationId: charityId  // Asignamos correctamente el id de la organización\n+            }));\n+            setIsOrganization(true);\n+          } else {\n+            console.error('No se encontró ID para la organización.');\n+          }\n+        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchProfile();\n+  }, []);\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+\n+    const formDataToSend = {\n+      title: formData.title,\n+      description: formData.description,\n+      date: formData.date,\n+      time: formData.time,\n+      location: formData.location,\n+      organizationId: formData.organizationId,\n+      image: formData.image ? formData.image.name : null\n+    };\n+\n+    console.log('Datos enviados:', formDataToSend); // Log para debug\n+\n+    // Emitir evento de creación de publicación\n+    socket.emit('createPublication', formDataToSend, (response) => {\n+      if (response.success) {\n+        setMessage('Publicación creada exitosamente');\n+      } else {\n+        setMessage(`Error: ${response.message}`);\n+      }\n+    });\n+\n+    // Emitir evento de subida de imagen\n+    if (formData.image) {\n+      const reader = new FileReader();\n+      reader.onload = () => {\n+        socket.emit('uploadImage', {\n+          image: reader.result,\n+          imageName: formData.image.name\n+        });\n+      };\n+      reader.readAsDataURL(formData.image);\n+    }\n+  };\n+\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n+\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.organizationName}\n+              disabled\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1731826002846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,457 +0,0 @@\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    organizationId: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const [message, setMessage] = useState('');\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-\n-        const data = await res.json();\n-\n-        if (data.charity) {\n-          // Aseguramos que `id` esté presente en `charity`\n-          const charityId = data.charity.id || data.charity._id;\n-\n-          if (charityId) {\n-            setFormData(prev => ({\n-              ...prev,\n-              organizationName: data.charity.nombre || '', // Asignar nombre de la organización\n-              organizationId: charityId  // Asignamos correctamente el id de la organización\n-            }));\n-            setIsOrganization(true);\n-          } else {\n-            console.error('No se encontró ID para la organización.');\n-          }\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = {\n-      title: formData.title,\n-      description: formData.description,\n-      date: formData.date,\n-      time: formData.time,\n-      location: formData.location,\n-      organizationId: formData.organizationId,\n-      image: formData.image ? formData.image.name : null\n-    };\n-\n-    console.log('Datos enviados:', formDataToSend); // Log para debug\n-\n-    // Emitir evento de creación de publicación\n-    socket.emit('createPublication', formDataToSend, (response) => {\n-      if (response.success) {\n-        setMessage('Publicación creada exitosamente');\n-      } else {\n-        setMessage(`Error: ${response.message}`);\n-      }\n-    });\n-\n-    // Emitir evento de subida de imagen\n-    if (formData.image) {\n-      const reader = new FileReader();\n-      reader.onload = () => {\n-        socket.emit('uploadImage', {\n-          image: reader.result,\n-          imageName: formData.image.name\n-        });\n-      };\n-      reader.readAsDataURL(formData.image);\n-    }\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.organizationName}\n-              disabled\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    organizationId: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const [message, setMessage] = useState('');\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-\n-        const data = await res.json();\n-        console.log('Datos del perfil:', data);\n-\n-        if (data.charity) {\n-          // Aseguramos que `id` esté presente en `charity`\n-          const charityId = data.charity.id || data.charity._id;\n-\n-          if (charityId) {\n-            setFormData(prev => ({\n-              ...prev,\n-              organizationName: data.charity.nombre || '', // Asignar nombre de la organización\n-              organizationId: charityId  // Asignamos correctamente el id de la organización\n-            }));\n-            setIsOrganization(true);\n-          } else {\n-            console.error('No se encontró ID para la organización.');\n-          }\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = {\n-      title: formData.title,\n-      description: formData.description,\n-      date: formData.date,\n-      time: formData.time,\n-      location: formData.location,\n-      organizationId: formData.organizationId,\n-      image: formData.image ? formData.image.name : null\n-    };\n-\n-    console.log('Datos enviados:', formDataToSend); // Log para debug\n-\n-    // Emitir evento de creación de publicación\n-    socket.emit('createPublication', formDataToSend, (response) => {\n-      if (response.success) {\n-        setMessage('Publicación creada exitosamente');\n-      } else {\n-        setMessage(`Error: ${response.message}`);\n-      }\n-    });\n-\n-    // Emitir evento de subida de imagen\n-    if (formData.image) {\n-      const reader = new FileReader();\n-      reader.onload = () => {\n-        socket.emit('uploadImage', {\n-          image: reader.result,\n-          imageName: formData.image.name\n-        });\n-      };\n-      reader.readAsDataURL(formData.image);\n-    }\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.organizationName}\n-              disabled\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826026386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data; // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user.id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826101249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,28 @@\n+const handleCommentSubmit = async (eventId) => {\n+  if (!isAuthenticated()) {\n+      router.push('/logind'); // Redirige al login si no está autenticado\n+      return;\n+  }\n+\n+  const user = await getUserFromToken();\n+  if (!user) return;\n+\n+  if (newComments[eventId]?.trim()) {\n+      const newComment = {\n+          id: Date.now(),\n+          user: {\n+              _id: user._id,\n+              nombre: user.nombre,\n+              apellido: user.apellido,\n+              email: user.email\n+          },\n+          comment: newComments[eventId].trim(),\n+          publicationId: eventId\n+      };\n+\n+      console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+      socket.emit('addComment', newComment);\n+      setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+  }\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826112942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,4 @@\n-const handleCommentSubmit = async (eventId) => {\n-  if (!isAuthenticated()) {\n-      router.push('/logind'); // Redirige al login si no está autenticado\n-      return;\n-  }\n-\n-  const user = await getUserFromToken();\n-  if (!user) return;\n-\n-  if (newComments[eventId]?.trim()) {\n-      const newComment = {\n-          id: Date.now(),\n-          user: {\n-              _id: user._id,\n-              nombre: user.nombre,\n-              apellido: user.apellido,\n-              email: user.email\n-          },\n-          comment: newComments[eventId].trim(),\n-          publicationId: eventId\n-      };\n-\n-      console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-      socket.emit('addComment', newComment);\n-      setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-  }\n-};\n \"use client\";\n \n import React, { useEffect, useState } from 'react';\n import axios from 'axios';\n@@ -141,9 +113,9 @@\n         if (newComments[eventId]?.trim()) {\n             const newComment = {\n                 id: Date.now(),\n                 user: {\n-                    _id: user.id,\n+                    _id: user._id,\n                     nombre: user.nombre,\n                     apellido: user.apellido,\n                     email: user.email\n                 },\n"
                },
                {
                    "date": 1731826136844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+      console\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data; // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826158024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        console.log('authToken:', localStorage.getItem('authToken'));\n+        return localStorage.getItem('authToken');\n+    };\n+\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data; // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826164305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        console.log('authToken:', localStorage.getItem('authToken'));\n+        return localStorage.getItem('authToken');\n+    };\n+    console\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data; // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826175107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        console.log('authToken:', localStorage.getItem('authToken'));\n+        return localStorage.getItem('authToken');\n+    };\n+    console.log('authToken:'));\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data; // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826181694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     const isAuthenticated = () => {\n         console.log('authToken:', localStorage.getItem('authToken'));\n         return localStorage.getItem('authToken');\n     };\n-    console.log('authToken:'));\n+    console.log('');\n     const getUserFromToken = async () => {\n         const token = localStorage.getItem('authToken');\n         if (!token) return null;\n         try {\n@@ -215,880 +215,5 @@\n         </div>\n     );\n };\n \n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        console.log('authToken:', localStorage.getItem('authToken'));\n-        return localStorage.getItem('authToken');\n-    };\n-    console\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data; // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        console.log('authToken:', localStorage.getItem('authToken'));\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data; // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-      console\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data; // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-\n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        return localStorage.getItem('authToken');\n-    };\n-\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n-\n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data; // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n-        });\n-\n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n-\n export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826398197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+\"use client\";\n+\n+import React, { useEffect, useState } from 'react';\n+import axios from 'axios';\n+import io from 'socket.io-client';\n+import { useRouter } from 'next/navigation';\n+import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+\n+const socket = io('http://localhost:3001');\n+\n+const EventViewComponent = () => {\n+    const [publications, setPublications] = useState([]);\n+    const [likedEvents, setLikedEvents] = useState([]);\n+    const [comments, setComments] = useState({});\n+    const [newComments, setNewComments] = useState({});\n+    const router = useRouter();\n+\n+    const isAuthenticated = () => {\n+        console.log('authToken:', localStorage.getItem('authToken'));\n+        return localStorage.getItem('authToken');\n+    };\n+    const getUserFromToken = async () => {\n+        const token = localStorage.getItem('authToken');\n+        if (!token) return null;\n+        try {\n+            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+                method: 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json',\n+                    'Authorization': `Bearer ${token}`\n+                },\n+            });\n+\n+            if (!res.ok) {\n+                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n+            }\n+\n+            const data = await res.json();\n+            console.log('Datos del perfil:', data);\n+            return data; // Asumiendo que la respuesta tiene los campos del usuario\n+        } catch (error) {\n+            console.error('Error obteniendo el usuario:', error);\n+            return null;\n+        }\n+    };\n+\n+    useEffect(() => {\n+        const fetchPublications = async () => {\n+            try {\n+                const response = await axios.get('http://localhost:3001');\n+                setPublications(response.data);\n+            } catch (error) {\n+                console.error('Error fetching publications:', error);\n+            }\n+        };\n+\n+        fetchPublications();\n+\n+        socket.on('newPublication', (publication) => {\n+            setPublications((prevPublications) => [publication, ...prevPublications]);\n+        });\n+\n+        socket.on('updatePublication', (updatedPublication) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === updatedPublication._id ? updatedPublication : publication\n+                )\n+            );\n+        });\n+\n+        socket.on('newComment', (newComment) => {\n+            setPublications((prevPublications) =>\n+                prevPublications.map((publication) =>\n+                    publication._id === newComment.publicationId\n+                        ? { ...publication, comments: [...publication.comments, newComment] }\n+                        : publication\n+                )\n+            );\n+        });\n+\n+        return () => {\n+            socket.off('newPublication');\n+            socket.off('updatePublication');\n+            socket.off('newComment');\n+        };\n+    }, []);\n+\n+    const handleLike = (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        socket.emit('likePublication', eventId);\n+    };\n+\n+    const handleCommentChange = (eventId, text) => {\n+        setNewComments(prev => ({ ...prev, [eventId]: text }));\n+    };\n+\n+    const handleCommentSubmit = async (eventId) => {\n+        if (!isAuthenticated()) {\n+            router.push('/logind'); // Redirige al login si no está autenticado\n+            return;\n+        }\n+\n+        const user = await getUserFromToken();\n+        if (!user) return;\n+\n+        if (newComments[eventId]?.trim()) {\n+            const newComment = {\n+                id: Date.now(),\n+                user: {\n+                    _id: user._id,\n+                    nombre: user.nombre,\n+                    apellido: user.apellido,\n+                    email: user.email\n+                },\n+                comment: newComments[eventId].trim(),\n+                publicationId: eventId\n+            };\n+\n+            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+            socket.emit('addComment', newComment);\n+            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+        }\n+    };\n+\n+    return (\n+        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n+                Eventos de la Comunidad\n+            </h1>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n+                {publications.map(event => (\n+                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n+                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n+                            <Avatar className=\"h-8 w-8\">\n+                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n+                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n+                            </Avatar>\n+                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n+                        </div>\n+                        <div className=\"relative\">\n+                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n+                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n+                                Nuevo\n+                            </div>\n+                        </div>\n+                        <div className=\"p-6\">\n+                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n+                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Calendar className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-2 text-[#042637]\">\n+                                <Clock className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4 text-[#042637]\">\n+                                <MapPin className=\"h-4 w-4 mr-2\" />\n+                                <span className=\"text-sm\">{event.location}</span>\n+                            </div>\n+                            <div className=\"flex items-center mb-4\">\n+                                <button\n+                                    onClick={() => handleLike(event._id)}\n+                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n+                                    aria-label={`Me gusta (${event.likes})`}\n+                                >\n+                                    <Heart\n+                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n+                                    />\n+                                    <span className=\"text-[#042637] font-medium\">\n+                                        {event.likes}\n+                                    </span>\n+                                </button>\n+                            </div>\n+                            <div className=\"mt-4\">\n+                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n+                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n+                                    {event.comments.map((comment) => (\n+                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n+                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n+                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n+                                        </div>\n+                                    ))}\n+                                </div>\n+                                <div className=\"flex items-center mt-2\">\n+                                    <Input\n+                                        type=\"text\"\n+                                        placeholder=\"Añade un comentario...\"\n+                                        value={newComments[event._id] || ''}\n+                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n+                                        className=\"flex-grow mr-2\"\n+                                    />\n+                                    <Button\n+                                        onClick={() => handleCommentSubmit(event._id)}\n+                                        size=\"icon\"\n+                                        aria-label=\"Enviar comentario\"\n+                                    >\n+                                        <Send className=\"h-4 w-4\" />\n+                                    </Button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                ))}\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default EventViewComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826446952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,28 @@\n+const handleCommentSubmit = async (eventId) => {\n+  if (!isAuthenticated()) {\n+      router.push('/logind'); // Redirige al login si no está autenticado\n+      return;\n+  }\n+\n+  const user = await getUserFromToken();\n+  if (!user) return;\n+\n+  if (newComments[eventId]?.trim()) {\n+      const newComment = {\n+          id: Date.now(),\n+          user: {\n+              _id: user._id,\n+              nombre: user.nombre,\n+              apellido: user.apellido,\n+              email: user.email\n+          },\n+          comment: newComments[eventId].trim(),\n+          publicationId: eventId\n+      };\n+\n+      console.log('Nuevo comentario:', newComment); // Agrega este console.log\n+\n+      socket.emit('addComment', newComment);\n+      setNewComments(prev => ({ ...prev, [eventId]: '' }));\n+  }\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731826462491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,465 +1,228 @@\n-const handleCommentSubmit = async (eventId) => {\n-  if (!isAuthenticated()) {\n-      router.push('/logind'); // Redirige al login si no está autenticado\n-      return;\n-  }\n+'use client';\n \n-  const user = await getUserFromToken();\n-  if (!user) return;\n-\n-  if (newComments[eventId]?.trim()) {\n-      const newComment = {\n-          id: Date.now(),\n-          user: {\n-              _id: user._id,\n-              nombre: user.nombre,\n-              apellido: user.apellido,\n-              email: user.email\n-          },\n-          comment: newComments[eventId].trim(),\n-          publicationId: eventId\n-      };\n-\n-      console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-      socket.emit('addComment', newComment);\n-      setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-  }\n-};\n-\"use client\";\n-\n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n+import React, { useState, useEffect } from 'react';\n+import { Calendar } from 'lucide-react';\n import { Button } from \"@/components/ui/button\";\n import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Label } from \"@/components/ui/label\";\n+import io from 'socket.io-client';\n \n const socket = io('http://localhost:3001');\n \n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n+export function EventFormComponent() {\n+  const [formData, setFormData] = useState({\n+    title: '',\n+    description: '',\n+    date: '',\n+    time: '',\n+    location: '',\n+    organizationName: '',\n+    organizationId: '',\n+    image: null\n+  });\n+  const [isOrganization, setIsOrganization] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const [message, setMessage] = useState('');\n \n-    const isAuthenticated = () => {\n-        console.log('authToken:', localStorage.getItem('authToken'));\n-        return localStorage.getItem('authToken');\n-    };\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n+  useEffect(() => {\n+    const token = localStorage.getItem('authToken');\n+    if (!token) {\n+      setLoading(false);\n+      return;\n+    }\n \n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n-\n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data; // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n-\n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n+    const fetchProfile = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json',\n+            'Authorization': `Bearer ${token}`\n+          },\n         });\n \n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n-\n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n-\n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n+        if (!res.ok) {\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n         }\n \n-        socket.emit('likePublication', eventId);\n-    };\n+        const data = await res.json();\n \n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n+        if (data.charity) {\n+          // Aseguramos que `id` esté presente en `charity`\n+          const charityId = data.charity.id || data.charity._id;\n \n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n+          if (charityId) {\n+            setFormData(prev => ({\n+              ...prev,\n+              organizationName: data.charity.nombre || '', // Asignar nombre de la organización\n+              organizationId: charityId  // Asignamos correctamente el id de la organización\n+            }));\n+            setIsOrganization(true);\n+          } else {\n+            console.error('No se encontró ID para la organización.');\n+          }\n         }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n+      } catch (error) {\n+        console.error('Error:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n     };\n \n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n-            </div>\n-        </div>\n-    );\n-};\n+    fetchProfile();\n+  }, []);\n \n-export default EventViewComponent;\n-\"use client\";\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setFormData(prev => ({ ...prev, [name]: value }));\n+  };\n \n-import React, { useEffect, useState } from 'react';\n-import axios from 'axios';\n-import io from 'socket.io-client';\n-import { useRouter } from 'next/navigation';\n-import { Heart, Calendar, Clock, MapPin, Send } from 'lucide-react';\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n \n-const socket = io('http://localhost:3001');\n-\n-const EventViewComponent = () => {\n-    const [publications, setPublications] = useState([]);\n-    const [likedEvents, setLikedEvents] = useState([]);\n-    const [comments, setComments] = useState({});\n-    const [newComments, setNewComments] = useState({});\n-    const router = useRouter();\n-\n-    const isAuthenticated = () => {\n-        console.log('authToken:', localStorage.getItem('authToken'));\n-        return localStorage.getItem('authToken');\n+    const formDataToSend = {\n+      title: formData.title,\n+      description: formData.description,\n+      date: formData.date,\n+      time: formData.time,\n+      location: formData.location,\n+      organizationId: formData.organizationId,\n+      image: formData.image ? formData.image.name : null\n     };\n-    console.log('');\n-    const getUserFromToken = async () => {\n-        const token = localStorage.getItem('authToken');\n-        if (!token) return null;\n-        try {\n-            const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-                method: 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json',\n-                    'Authorization': `Bearer ${token}`\n-                },\n-            });\n \n-            if (!res.ok) {\n-                throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-            }\n+    console.log('Datos enviados:', formDataToSend); // Log para debug\n \n-            const data = await res.json();\n-            console.log('Datos del perfil:', data);\n-            return data; // Asumiendo que la respuesta tiene los campos del usuario\n-        } catch (error) {\n-            console.error('Error obteniendo el usuario:', error);\n-            return null;\n-        }\n-    };\n+    // Emitir evento de creación de publicación\n+    socket.emit('createPublication', formDataToSend, (response) => {\n+      if (response.success) {\n+        setMessage('Publicación creada exitosamente');\n+      } else {\n+        setMessage(`Error: ${response.message}`);\n+      }\n+    });\n \n-    useEffect(() => {\n-        const fetchPublications = async () => {\n-            try {\n-                const response = await axios.get('http://localhost:3001');\n-                setPublications(response.data);\n-            } catch (error) {\n-                console.error('Error fetching publications:', error);\n-            }\n-        };\n-\n-        fetchPublications();\n-\n-        socket.on('newPublication', (publication) => {\n-            setPublications((prevPublications) => [publication, ...prevPublications]);\n+    // Emitir evento de subida de imagen\n+    if (formData.image) {\n+      const reader = new FileReader();\n+      reader.onload = () => {\n+        socket.emit('uploadImage', {\n+          image: reader.result,\n+          imageName: formData.image.name\n         });\n+      };\n+      reader.readAsDataURL(formData.image);\n+    }\n+  };\n \n-        socket.on('updatePublication', (updatedPublication) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === updatedPublication._id ? updatedPublication : publication\n-                )\n-            );\n-        });\n+  if (loading) {\n+    return <div>Cargando...</div>;\n+  }\n \n-        socket.on('newComment', (newComment) => {\n-            setPublications((prevPublications) =>\n-                prevPublications.map((publication) =>\n-                    publication._id === newComment.publicationId\n-                        ? { ...publication, comments: [...publication.comments, newComment] }\n-                        : publication\n-                )\n-            );\n-        });\n+  if (!isOrganization) {\n+    return <div>No tienes permiso para crear publicaciones.</div>;\n+  }\n \n-        return () => {\n-            socket.off('newPublication');\n-            socket.off('updatePublication');\n-            socket.off('newComment');\n-        };\n-    }, []);\n-\n-    const handleLike = (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        socket.emit('likePublication', eventId);\n-    };\n-\n-    const handleCommentChange = (eventId, text) => {\n-        setNewComments(prev => ({ ...prev, [eventId]: text }));\n-    };\n-\n-    const handleCommentSubmit = async (eventId) => {\n-        if (!isAuthenticated()) {\n-            router.push('/logind'); // Redirige al login si no está autenticado\n-            return;\n-        }\n-\n-        const user = await getUserFromToken();\n-        if (!user) return;\n-\n-        if (newComments[eventId]?.trim()) {\n-            const newComment = {\n-                id: Date.now(),\n-                user: {\n-                    _id: user._id,\n-                    nombre: user.nombre,\n-                    apellido: user.apellido,\n-                    email: user.email\n-                },\n\\ No newline at end of file\n-                comment: newComments[eventId].trim(),\n-                publicationId: eventId\n-            };\n-\n-            console.log('Nuevo comentario:', newComment); // Agrega este console.log\n-\n-            socket.emit('addComment', newComment);\n-            setNewComments(prev => ({ ...prev, [eventId]: '' }));\n-        }\n-    };\n-\n-    return (\n-        <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-            <h1 className=\"text-5xl font-bold mb-12 text-center text-[#042637] drop-shadow-lg\">\n-                Eventos de la Comunidad\n-            </h1>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n-                {publications.map(event => (\n-                    <div key={event._id} className=\"rounded-xl overflow-hidden shadow-lg transform transition duration-300 hover:scale-105\" style={{ backgroundColor: '#E1DDBF' }}>\n-                        <div className=\"p-4 flex items-center space-x-2 bg-[#042637]\">\n-                            <Avatar className=\"h-8 w-8\">\n-                                <AvatarImage src={event.charity?.avatar || '/placeholder.svg'} alt={event.charity?.nombre || 'Organización'} />\n-                                <AvatarFallback>{event.charity?.nombre?.charAt(0) || 'O'}</AvatarFallback>\n-                            </Avatar>\n-                            <span className=\"font-semibold text-white\">{event.charity?.nombre || 'Organización'}</span>\n-                        </div>\n-                        <div className=\"relative\">\n-                            <img src={`http://localhost:3001${event.imageUrl}`} alt={event.title} className=\"w-full h-56 object-cover\" />\n-                            <div className=\"absolute top-0 right-0 bg-[#042637] text-white px-3 py-1 m-2 rounded-full text-sm font-semibold\">\n-                                Nuevo\n-                            </div>\n-                        </div>\n-                        <div className=\"p-6\">\n-                            <h2 className=\"text-2xl font-semibold mb-3 text-[#042637]\">{event.title}</h2>\n-                            <p className=\"text-sm mb-4 text-[#042637] opacity-80\">{event.description}</p>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Calendar className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleDateString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-2 text-[#042637]\">\n-                                <Clock className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{new Date(event.date).toLocaleTimeString()}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4 text-[#042637]\">\n-                                <MapPin className=\"h-4 w-4 mr-2\" />\n-                                <span className=\"text-sm\">{event.location}</span>\n-                            </div>\n-                            <div className=\"flex items-center mb-4\">\n-                                <button\n-                                    onClick={() => handleLike(event._id)}\n-                                    className=\"flex items-center space-x-1 focus:outline-none transition duration-300 ease-in-out transform hover:scale-110 w-full\"\n-                                    aria-label={`Me gusta (${event.likes})`}\n-                                >\n-                                    <Heart\n-                                        className={`h-6 w-6 ${likedEvents.includes(event._id) ? 'fill-current text-red-500' : 'text-[#042637]'}`}\n-                                    />\n-                                    <span className=\"text-[#042637] font-medium\">\n-                                        {event.likes}\n-                                    </span>\n-                                </button>\n-                            </div>\n-                            <div className=\"mt-4\">\n-                                <h3 className=\"text-lg font-semibold mb-2 text-[#042637]\">Comentarios</h3>\n-                                <div className=\"space-y-2 max-h-32 overflow-y-auto mb-2\">\n-                                    {event.comments.map((comment) => (\n-                                        <div key={comment._id} className=\"bg-white p-2 rounded-lg\">\n-                                            <span className=\"font-semibold text-[#042637]\">{comment.user}: </span>\n-                                            <span className=\"text-[#042637]\">{comment.comment}</span>\n-                                        </div>\n-                                    ))}\n-                                </div>\n-                                <div className=\"flex items-center mt-2\">\n-                                    <Input\n-                                        type=\"text\"\n-                                        placeholder=\"Añade un comentario...\"\n-                                        value={newComments[event._id] || ''}\n-                                        onChange={(e) => handleCommentChange(event._id, e.target.value)}\n-                                        className=\"flex-grow mr-2\"\n-                                    />\n-                                    <Button\n-                                        onClick={() => handleCommentSubmit(event._id)}\n-                                        size=\"icon\"\n-                                        aria-label=\"Enviar comentario\"\n-                                    >\n-                                        <Send className=\"h-4 w-4\" />\n-                                    </Button>\n-                                </div>\n-                            </div>\n-                        </div>\n-                    </div>\n-                ))}\n+  return (\n+    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n+      <div className=\"max-w-2xl mx-auto\">\n+        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n+          Crear Nuevo Evento\n+        </h1>\n+        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n+        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n+          <div>\n+            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n+            <Input\n+              id=\"title\"\n+              name=\"title\"\n+              value={formData.title}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={formData.description}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"grid grid-cols-2 gap-4\">\n+            <div>\n+              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n+              <div className=\"relative\">\n+                <Input\n+                  id=\"date\"\n+                  name=\"date\"\n+                  type=\"date\"\n+                  value={formData.date}\n+                  onChange={handleChange}\n+                  required\n+                  className=\"mt-1\"\n+                />\n+                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n+              </div>\n             </div>\n-        </div>\n-    );\n-};\n-\n-export default EventViewComponent;\n+            <div>\n+              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n+              <Input\n+                id=\"time\"\n+                name=\"time\"\n+                type=\"time\"\n+                value={formData.time}\n+                onChange={handleChange}\n+                required\n+                className=\"mt-1\"\n+              />\n+            </div>\n+          </div>\n+          <div>\n+            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n+            <Input\n+              id=\"location\"\n+              name=\"location\"\n+              value={formData.location}\n+              onChange={handleChange}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n+            <Input\n+              id=\"image\"\n+              name=\"image\"\n+              type=\"file\"\n+              accept=\"image/*\"\n+              onChange={(e) => {\n+                const file = e.target.files?.[0] || null;\n+                setFormData(prev => ({ ...prev, image: file }));\n+              }}\n+              required\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n+            <Input\n+              id=\"organizationName\"\n+              name=\"organizationName\"\n+              value={formData.organizationName}\n+              disabled\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n+            Crear Evento\n+          </Button>\n+        </form>\n+      </div>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1731826468593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,228 +0,0 @@\n-'use client';\n-\n-import React, { useState, useEffect } from 'react';\n-import { Calendar } from 'lucide-react';\n-import { Button } from \"@/components/ui/button\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Label } from \"@/components/ui/label\";\n-import io from 'socket.io-client';\n-\n-const socket = io('http://localhost:3001');\n-\n-export function EventFormComponent() {\n-  const [formData, setFormData] = useState({\n-    title: '',\n-    description: '',\n-    date: '',\n-    time: '',\n-    location: '',\n-    organizationName: '',\n-    organizationId: '',\n-    image: null\n-  });\n-  const [isOrganization, setIsOrganization] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const [message, setMessage] = useState('');\n-\n-  useEffect(() => {\n-    const token = localStorage.getItem('authToken');\n-    if (!token) {\n-      setLoading(false);\n-      return;\n-    }\n-\n-    const fetchProfile = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'Authorization': `Bearer ${token}`\n-          },\n-        });\n-\n-        if (!res.ok) {\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\n-        }\n-\n-        const data = await res.json();\n-\n-        if (data.charity) {\n-          // Aseguramos que `id` esté presente en `charity`\n-          const charityId = data.charity.id || data.charity._id;\n-\n-          if (charityId) {\n-            setFormData(prev => ({\n-              ...prev,\n-              organizationName: data.charity.nombre || '', // Asignar nombre de la organización\n-              organizationId: charityId  // Asignamos correctamente el id de la organización\n-            }));\n-            setIsOrganization(true);\n-          } else {\n-            console.error('No se encontró ID para la organización.');\n-          }\n-        }\n-      } catch (error) {\n-        console.error('Error:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchProfile();\n-  }, []);\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-\n-    const formDataToSend = {\n-      title: formData.title,\n-      description: formData.description,\n-      date: formData.date,\n-      time: formData.time,\n-      location: formData.location,\n-      organizationId: formData.organizationId,\n-      image: formData.image ? formData.image.name : null\n-    };\n-\n-    console.log('Datos enviados:', formDataToSend); // Log para debug\n-\n-    // Emitir evento de creación de publicación\n-    socket.emit('createPublication', formDataToSend, (response) => {\n-      if (response.success) {\n-        setMessage('Publicación creada exitosamente');\n-      } else {\n-        setMessage(`Error: ${response.message}`);\n-      }\n-    });\n-\n-    // Emitir evento de subida de imagen\n-    if (formData.image) {\n-      const reader = new FileReader();\n-      reader.onload = () => {\n-        socket.emit('uploadImage', {\n-          image: reader.result,\n-          imageName: formData.image.name\n-        });\n-      };\n-      reader.readAsDataURL(formData.image);\n-    }\n-  };\n-\n-  if (loading) {\n-    return <div>Cargando...</div>;\n-  }\n-\n-  if (!isOrganization) {\n-    return <div>No tienes permiso para crear publicaciones.</div>;\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n-      <div className=\"max-w-2xl mx-auto\">\n-        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n-          Crear Nuevo Evento\n-        </h1>\n-        {message && <div className=\"mb-4 text-center text-green-600\">{message}</div>}\n-        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n-          <div>\n-            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n-            <Input\n-              id=\"title\"\n-              name=\"title\"\n-              value={formData.title}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={formData.description}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"grid grid-cols-2 gap-4\">\n-            <div>\n-              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n-              <div className=\"relative\">\n-                <Input\n-                  id=\"date\"\n-                  name=\"date\"\n-                  type=\"date\"\n-                  value={formData.date}\n-                  onChange={handleChange}\n-                  required\n-                  className=\"mt-1\"\n-                />\n-                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n-              </div>\n-            </div>\n-            <div>\n-              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n-              <Input\n-                id=\"time\"\n-                name=\"time\"\n-                type=\"time\"\n-                value={formData.time}\n-                onChange={handleChange}\n-                required\n-                className=\"mt-1\"\n-              />\n-            </div>\n-          </div>\n-          <div>\n-            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n-            <Input\n-              id=\"location\"\n-              name=\"location\"\n-              value={formData.location}\n-              onChange={handleChange}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n-            <Input\n-              id=\"image\"\n-              name=\"image\"\n-              type=\"file\"\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                const file = e.target.files?.[0] || null;\n-                setFormData(prev => ({ ...prev, image: file }));\n-              }}\n-              required\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n-            <Input\n-              id=\"organizationName\"\n-              name=\"organizationName\"\n-              value={formData.organizationName}\n-              disabled\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n-            Crear Evento\n-          </Button>\n-        </form>\n-      </div>\n-    </div>\n-  );\n-}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731815467853,
            "name": "Commit-0",
            "content": "'use client';\n\nimport React, { useState } from 'react';\nimport { Calendar } from 'lucide-react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:5000');\n\nexport function EventFormComponent() {\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    date: '',\n    time: '',\n    location: '',\n    organizationName: '',\n    image: null\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const formDataToSend = new FormData();\n    formDataToSend.append('title', formData.title);\n    formDataToSend.append('description', formData.description);\n    formDataToSend.append('date', formData.date);\n    formDataToSend.append('time', formData.time);\n    formDataToSend.append('location', formData.location);\n    formDataToSend.append('organizationName', formData.organizationName);\n    if (formData.image) {\n      formDataToSend.append('image', formData.image);\n    }\n\n    // Emitir evento de creación de publicación a través de socket.io\n    socket.emit('createPublication', formDataToSend);\n  };\n\n  return (\n    <div className=\"min-h-screen p-8 bg-gradient-to-br from-[#D8C7A9] to-[#ECE3D4]\">\n      <div className=\"max-w-2xl mx-auto\">\n        <h1 className=\"text-4xl font-bold mb-8 text-center text-[#042637] drop-shadow-lg\">\n          Crear Nuevo Evento\n        </h1>\n        <form onSubmit={handleSubmit} className=\"space-y-6 bg-[#E1DDBF] p-6 rounded-xl shadow-lg\">\n          <div>\n            <Label htmlFor=\"title\" className=\"text-[#042637]\">Título del Evento</Label>\n            <Input\n              id=\"title\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleChange}\n              required\n              className=\"mt-1\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"description\" className=\"text-[#042637]\">Descripción</Label>\n            <Textarea\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleChange}\n              required\n              className=\"mt-1\"\n            />\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"date\" className=\"text-[#042637]\">Fecha</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"date\"\n                  name=\"date\"\n                  type=\"date\"\n                  value={formData.date}\n                  onChange={handleChange}\n                  required\n                  className=\"mt-1\"\n                />\n                <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#042637]\" size={20} />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"time\" className=\"text-[#042637]\">Hora</Label>\n              <Input\n                id=\"time\"\n                name=\"time\"\n                type=\"time\"\n                value={formData.time}\n                onChange={handleChange}\n                required\n                className=\"mt-1\"\n              />\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"location\" className=\"text-[#042637]\">Ubicación</Label>\n            <Input\n              id=\"location\"\n              name=\"location\"\n              value={formData.location}\n              onChange={handleChange}\n              required\n              className=\"mt-1\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"image\" className=\"text-[#042637]\">Imagen del Evento</Label>\n            <Input\n              id=\"image\"\n              name=\"image\"\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={(e) => {\n                const file = e.target.files?.[0] || null;\n                setFormData(prev => ({ ...prev, image: file }));\n              }}\n              required\n              className=\"mt-1\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"organizationName\" className=\"text-[#042637]\">Nombre de la Organización</Label>\n            <Input\n              id=\"organizationName\"\n              name=\"organizationName\"\n              value={formData.organizationName}\n              onChange={handleChange}\n              required\n              className=\"mt-1\"\n            />\n          </div>\n          <Button type=\"submit\" className=\"w-full bg-[#042637] hover:bg-[#042637]/90 text-white\">\n            Crear Evento\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n}"
        }
    ]
}