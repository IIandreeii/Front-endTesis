{
    "sourceFile": "src/components/component/organizaciones.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1731376508578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731376520058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\"; // Importa el componente Button\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css'; // Importa los estilos de react-toastify\r\n+import DonationForm from './donationsform'; // Importa el componente DonationForm\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731376674890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './messengerChat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      setReceiverId(charityId);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731376724222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import { Button } from \"@/components/ui/button\";\r\n import { ToastContainer, toast } from 'react-toastify';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n import DonationForm from './donationsform';\r\n-import MessengerChat from './messengerChat'; // Importa el componente MessengerChat\r\n+import MessengerChat from './messengerchat'; // Importa el componente MessengerChat\r\n \r\n export default function Organizaciones() {\r\n   const [charities, setCharities] = useState([]);\r\n   const [error, setError] = useState('');\r\n@@ -160,313 +160,5 @@\n       )}\r\n       <ToastContainer />\r\n     </div>\r\n   );\r\n-}\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\"; // Importa el componente Button\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css'; // Importa los estilos de react-toastify\r\n-import DonationForm from './donationsform'; // Importa el componente DonationForm\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './MessengerChat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      setReceiverId(charityId);\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731377633515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+      router.push('/login'); // Redirige a la página de inicio de sesión\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+      router.push('/login'); // Redirige a la página de inicio de sesión\r\n+    } else {\r\n+      setReceiverId(charityId);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731377646012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,169 +164,5 @@\n       )}\r\n       <ToastContainer />\r\n     </div>\r\n   );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messengerchat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      setReceiverId(charityId);\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731377676698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,31 +138,5 @@\n                   <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n                   <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n                     {charity.descripcion || \"No hay descripción disponible.\"}\r\n                   </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n-}\n\\ No newline at end of file\n+                  <Separator className=\"my-\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731377683346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+      router.push('/login'); // Redirige a la página de inicio de sesión\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+      router.push('/login'); // Redirige a la página de inicio de sesión\r\n+    } else {\r\n+      setReceiverId(charityId);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731377700027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      setReceiverId(charityId);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731377950014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './MessengerChat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      setReceiverId(charityId);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731377959176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import { Button } from \"@/components/ui/button\";\r\n import { ToastContainer, toast } from 'react-toastify';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n import DonationForm from './donationsform';\r\n-import MessengerChat from './MessengerChat'; // Importa el componente MessengerChat\r\n+import MessengerChat from './messengerChat'; // Importa el componente MessengerChat\r\n \r\n export default function Organizaciones() {\r\n   const [charities, setCharities] = useState([]);\r\n   const [error, setError] = useState('');\r\n@@ -160,479 +160,5 @@\n       )}\r\n       <ToastContainer />\r\n     </div>\r\n   );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      setReceiverId(charityId);\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-      router.push('/login'); // Redirige a la página de inicio de sesión\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-      router.push('/login'); // Redirige a la página de inicio de sesión\r\n-    } else {\r\n-      setReceiverId(charityId);\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-      router.push('/login'); // Redirige a la página de inicio de sesión\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-      router.push('/login'); // Redirige a la página de inicio de sesión\r\n-    } else {\r\n-      setReceiverId(charityId);\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731377964688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './messengerchat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      setReceiverId(charityId);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731377970250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import { Button } from \"@/components/ui/button\";\r\n import { ToastContainer, toast } from 'react-toastify';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n import DonationForm from './donationsform';\r\n-import MessengerChat from './messengerchat'; // Importa el componente MessengerChat\r\n+import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n \r\n export default function Organizaciones() {\r\n   const [charities, setCharities] = useState([]);\r\n   const [error, setError] = useState('');\r\n@@ -160,169 +160,5 @@\n       )}\r\n       <ToastContainer />\r\n     </div>\r\n   );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messengerChat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      setReceiverId(charityId);\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731380625316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      setReceiverId(charityId);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731380836702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      setReceiverId(charityId);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731383917824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = async (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/chats', {\r\n+          method: 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          },\r\n+          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n+        });\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n+        }\r\n+        const newChat = await res.json();\r\n+        console.log('New chat created:', newChat); // Log the new chat\r\n+        router.push(`/fb-messenger?receiverId=${charityId}`);\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        toast.error('Error creating chat');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731383931857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n           throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n         }\r\n         const newChat = await res.json();\r\n         console.log('New chat created:', newChat); // Log the new chat\r\n-        router.push(`/fb-messenger?receiverId=${charityId}`);\r\n+        router.push(`/men?receiverId=${charityId}`);\r\n       } catch (error) {\r\n         console.error('Error:', error);\r\n         toast.error('Error creating chat');\r\n       }\r\n@@ -179,497 +179,5 @@\n       )}\r\n       <ToastContainer />\r\n     </div>\r\n   );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      setReceiverId(charityId);\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      setReceiverId(charityId);\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      setReceiverId(charityId);\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731383938710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = async (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/chats', {\r\n+          method: 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          },\r\n+          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n+        });\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n+        }\r\n+        const newChat = await res.json();\r\n+        console.log('New chat created:', newChat); // Log the new chat\r\n+        router.push(`/mensajes?receiverId=${charityId}`);\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        toast.error('Error creating chat');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731383958740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,182 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = async (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/chats', {\r\n+          method: 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          },\r\n+          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n+        });\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n+        }\r\n+        const newChat = await res.json();\r\n+        console.log('New chat created:', newChat); // Log the new chat\r\n+        router.push(`/mensajes?receiverId=${charityId}`);\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        toast.error('Error creating chat');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731384064429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = async (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/chats', {\r\n+          method: 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          },\r\n+          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n+        });\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n+        }\r\n+        const newChat = await res.json();\r\n+        console.log('New chat created:', newChat); // Log the new chat\r\n+        router.push(`/fb-messenger?receiverId=${charityId}`);\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        toast.error('Error creating chat');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731384075526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = async (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/chats', {\r\n+          method: 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          },\r\n+          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n+        });\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n+        }\r\n+        const newChat = await res.json();\r\n+        console.log('New chat created:', newChat); // Log the new chat\r\n+        router.push(`/mensajes?receiverId=${charityId}`);\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        toast.error('Error creating chat');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731384081090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = async (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/chats', {\r\n+          method: 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          },\r\n+          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n+        });\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n+        }\r\n+        const newChat = await res.json();\r\n+        console.log('New chat created:', newChat); // Log the new chat\r\n+        router.push(`/men?receiverId=${charityId}`);\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        toast.error('Error creating chat');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : receiverId ? (\r\n+        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731384221425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,180 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = async (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/chats', {\r\n+          method: 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          },\r\n+          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n+        });\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n+        }\r\n+        const newChat = await res.json();\r\n+        console.log('New chat created:', newChat); // Log the new chat\r\n+        router.push(`/fb-messenger?receiverId=${charityId}`);\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        toast.error('Error creating chat');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731384300088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,180 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = async (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/chats', {\r\n+          method: 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          },\r\n+          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n+        });\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n+        }\r\n+        const newChat = await res.json();\r\n+        console.log('New chat created:', newChat); // Log the new chat\r\n+        router.push(`/fb-messenger?receiverId=${charityId}`);\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        toast.error('Error creating chat');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731384360818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // FILE: Organizaciones.js\r\n \"use client\";\r\n \r\n import React, { useState, useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n+import { useRouter } from 'next/navigation';\r\n import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n import { Separator } from \"@/components/ui/separator\";\r\n import { Button } from \"@/components/ui/button\";\r\n@@ -109,9 +109,9 @@\n           throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n         }\r\n         const newChat = await res.json();\r\n         console.log('New chat created:', newChat); // Log the new chat\r\n-        router.push(`/fb-messenger?receiverId=${charityId}`);\r\n+        router.push(`/mensajes?receiverId=${charityId}`);\r\n       } catch (error) {\r\n         console.error('Error:', error);\r\n         toast.error('Error creating chat');\r\n       }\r\n"
                },
                {
                    "date": 1731384547373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,180 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { useRouter } from 'next/navigation';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = async (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/chats', {\r\n+          method: 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          },\r\n+          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n+        });\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error creating or fetching chat: ${res.status} ${res.statusText}`);\r\n+        }\r\n+        const chat = await res.json();\r\n+        console.log('Chat:', chat); // Log the chat\r\n+        router.push(`/mensajes?receiverId=${charityId}`);\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        toast.error('Error creating or fetching chat');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731384706105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,1462 +176,5 @@\n       )}\r\n       <ToastContainer />\r\n     </div>\r\n   );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useRouter } from 'next/navigation';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = async (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/chats', {\r\n-          method: 'POST',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          },\r\n-          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n-        });\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n-        }\r\n-        const newChat = await res.json();\r\n-        console.log('New chat created:', newChat); // Log the new chat\r\n-        router.push(`/mensajes?receiverId=${charityId}`);\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        toast.error('Error creating chat');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = async (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/chats', {\r\n-          method: 'POST',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          },\r\n-          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n-        });\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n-        }\r\n-        const newChat = await res.json();\r\n-        console.log('New chat created:', newChat); // Log the new chat\r\n-        router.push(`/fb-messenger?receiverId=${charityId}`);\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        toast.error('Error creating chat');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = async (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/chats', {\r\n-          method: 'POST',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          },\r\n-          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n-        });\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n-        }\r\n-        const newChat = await res.json();\r\n-        console.log('New chat created:', newChat); // Log the new chat\r\n-        router.push(`/men?receiverId=${charityId}`);\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        toast.error('Error creating chat');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = async (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/chats', {\r\n-          method: 'POST',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          },\r\n-          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n-        });\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n-        }\r\n-        const newChat = await res.json();\r\n-        console.log('New chat created:', newChat); // Log the new chat\r\n-        router.push(`/mensajes?receiverId=${charityId}`);\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        toast.error('Error creating chat');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = async (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/chats', {\r\n-          method: 'POST',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          },\r\n-          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n-        });\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n-        }\r\n-        const newChat = await res.json();\r\n-        console.log('New chat created:', newChat); // Log the new chat\r\n-        router.push(`/fb-messenger?receiverId=${charityId}`);\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        toast.error('Error creating chat');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = async (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/chats', {\r\n-          method: 'POST',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          },\r\n-          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n-        });\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n-        }\r\n-        const newChat = await res.json();\r\n-        console.log('New chat created:', newChat); // Log the new chat\r\n-        router.push(`/mensajes?receiverId=${charityId}`);\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        toast.error('Error creating chat');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = async (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/chats', {\r\n-          method: 'POST',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          },\r\n-          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n-        });\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n-        }\r\n-        const newChat = await res.json();\r\n-        console.log('New chat created:', newChat); // Log the new chat\r\n-        router.push(`/mensajes?receiverId=${charityId}`);\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        toast.error('Error creating chat');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n-}\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-import MessengerChat from './messenger-chat'; // Importa el componente MessengerChat\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = async (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/chats', {\r\n-          method: 'POST',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          },\r\n-          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n-        });\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`);\r\n-        }\r\n-        const newChat = await res.json();\r\n-        console.log('New chat created:', newChat); // Log the new chat\r\n-        router.push(`/men?receiverId=${charityId}`);\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        toast.error('Error creating chat');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : receiverId ? (\r\n-        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731387709777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+'use client'\r\n+\r\n+import React, { useState, useEffect } from 'react'\r\n+import dynamic from 'next/dynamic'\r\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\r\n+import io from 'socket.io-client'\r\n+\r\n+const socket = io('http://localhost:3001')\r\n+\r\n+const FbMessengerComplete = ({ user, receiverId }) => {\r\n+  const [activeChat, setActiveChat] = useState(null)\r\n+  const [message, setMessage] = useState('')\r\n+  const [messages, setMessages] = useState([])\r\n+  const [chatPreviews, setChatPreviews] = useState([])\r\n+  const [showChatList, setShowChatList] = useState(true)\r\n+  const [showSidebar, setShowSidebar] = useState(false)\r\n+\r\n+  useEffect(() => {\r\n+    if (!user) return\r\n+\r\n+    // Fetch initial chat previews\r\n+    const fetchChatPreviews = async () => {\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        })\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\r\n+        }\r\n+        const data = await res.json()\r\n+        console.log('Chat previews:', data) // Log the chat previews\r\n+        setChatPreviews(data)\r\n+      } catch (error) {\r\n+        console.error('Error:', error)\r\n+      }\r\n+    }\r\n+\r\n+    fetchChatPreviews()\r\n+  }, [user])\r\n+\r\n+  useEffect(() => {\r\n+    if (!user || !receiverId || activeChat) return\r\n+\r\n+    // Crear un nuevo chat si se proporciona un receiverId\r\n+    const createChat = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/chats', {\r\n+          method: 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          },\r\n+          body: JSON.stringify({ userId: user.id, receiverId })\r\n+        })\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\r\n+        }\r\n+        const newChat = await res.json()\r\n+        console.log('New chat created:', newChat) // Log the new chat\r\n+        setActiveChat(newChat)\r\n+      } catch (error) {\r\n+        console.error('Error:', error)\r\n+      }\r\n+    }\r\n+\r\n+    createChat()\r\n+  }, [receiverId, user, activeChat])\r\n+\r\n+  useEffect(() => {\r\n+    if (!user || !activeChat) return\r\n+\r\n+    // Unirse a la sala específica del usuario\r\n+    socket.emit('joinRoom', activeChat._id)\r\n+\r\n+    // Fetch initial messages for the active chat\r\n+    const fetchMessages = async () => {\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\r\n+        }\r\n+        const data = await res.json()\r\n+        console.log('Messages:', data) // Log the messages\r\n+        setMessages(data)\r\n+      } catch (error) {\r\n+        console.error('Error:', error)\r\n+      }\r\n+    }\r\n+\r\n+    fetchMessages()\r\n+\r\n+    // Escuchar mensajes recibidos\r\n+    const handleReceiveMessage = (message) => {\r\n+      console.log('Received message:', message) // Log the received message\r\n+      setMessages((prevMessages) => [...prevMessages, message])\r\n+    }\r\n+    socket.on('receiveMessage', handleReceiveMessage)\r\n+\r\n+    // Limpiar el evento cuando el componente se desmonta\r\n+    return () => {\r\n+      socket.emit('leaveRoom', activeChat._id)\r\n+      socket.off('receiveMessage', handleReceiveMessage)\r\n+    }\r\n+  }, [activeChat, user])\r\n+\r\n+  const handleSend = () => {\r\n+    if (message.trim()) {\r\n+      const newMessage = {\r\n+        senderId: user.id,\r\n+        receiverId: activeChat._id,\r\n+        text: message,\r\n+      }\r\n+      console.log('Sending message:', newMessage) // Log the message being sent\r\n+      socket.emit('sendMessage', newMessage)\r\n+      setMessages([...messages, newMessage])\r\n+      setMessage('')\r\n+    }\r\n+  }\r\n+\r\n+  const toggleChatList = () => {\r\n+    setShowChatList(!showChatList)\r\n+  }\r\n+\r\n+  const toggleSidebar = () => {\r\n+    setShowSidebar(!showSidebar)\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\r\n+      {/* Lista de chats */}\r\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\r\n+        <div className=\"p-4 bg-[#D8C7A9]\">\r\n+          <div className=\"flex justify-between items-center mb-4\">\r\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\r\n+            <div className=\"flex space-x-2\">\r\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n+                <MoreHorizontal size={20} />\r\n+                <span className=\"sr-only\">Más opciones</span>\r\n+              </button>\r\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n+                <Edit size={20} />\r\n+                <span className=\"sr-only\">Nuevo mensaje</span>\r\n+              </button>\r\n+            </div>\r\n+          </div>\r\n+          <div className=\"relative\">\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Buscar en Messenger\"\r\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\r\n+            />\r\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\r\n+          </div>\r\n+        </div>\r\n+        <div className=\"flex-1 overflow-y-auto\">\r\n+          {chatPreviews.map((chat) => (\r\n+            <div\r\n+              key={chat.id}\r\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\r\n+              onClick={() => {\r\n+                setActiveChat(chat)\r\n+                if (window.innerWidth < 768) {\r\n+                  setShowChatList(false)\r\n+                }\r\n+              }}\r\n+            >\r\n+              <div className=\"relative mr-3\">\r\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\r\n+                {chat.isActive && (\r\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\r\n+                )}\r\n+              </div>\r\n+              <div className=\"flex-1 min-w-0\">\r\n+                <div className=\"flex justify-between items-baseline\">\r\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\r\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\r\n+                </div>\r\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\r\n+              </div>\r\n+              {chat.unread > 0 && (\r\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\r\n+                  {chat.unread}\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </div>\r\n+\r\n+      {/* Ventana de chat activa */}\r\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\r\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\r\n+          <div className=\"flex items-center\">\r\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\r\n+              <ArrowLeft size={20} />\r\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\r\n+            </button>\r\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\r\n+            <div>\r\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\r\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\r\n+            </div>\r\n+          </div>\r\n+          <div className=\"flex space-x-2\">\r\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n+              <Phone size={20} />\r\n+              <span className=\"sr-only\">Llamar</span>\r\n+            </button>\r\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n+              <Video size={20} />\r\n+              <span className=\"sr-only\">Video llamada</span>\r\n+            </button>\r\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n+              <Settings size={20} />\r\n+              <span className=\"sr-only\">Ajustes</span>\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+\r\n+        <div className=\"flex-1 overflow-y-auto p-4\">\r\n+          {messages.map((msg, index) => (\r\n+            <div key={index} className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'} mb-3`}>\r\n+              <div\r\n+                className={`rounded-xl p-3 max-w-xs ${msg.senderId === user.id ? 'bg-[#D8C7A9] text-[#042637]' : 'bg-[#ECE3D4] text-[#042637]'}`}\r\n+              >\r\n+                <p className=\"text-sm\">{msg.text}</p>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+\r\n+        <div className=\"p-4 border-t border-[#E1DDBF] bg-[#D8C7A9]\">\r\n+          <div className=\"flex items-center\">\r\n+            <Smile className=\"text-[#042637]/70\" size={20} />\r\n+            <input\r\n+              type=\"text\"\r\n+              value={message}\r\n+              onChange={(e) => setMessage(e.target.value)}\r\n+              placeholder=\"Escribe un mensaje\"\r\n+              className=\"flex-1 p-2 pl-4 bg-[#ECE3D4] rounded-full text-[#042637] placeholder-[#042637]/70 focus:outline-none\"\r\n+            />\r\n+            <button\r\n+              onClick={handleSend}\r\n+              className=\"ml-2 text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\"\r\n+            >\r\n+              <Send size={20} />\r\n+              <span className=\"sr-only\">Enviar mensaje</span>\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  )\r\n+}\r\n+\r\n+export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false })\r\n"
                },
                {
                    "date": 1731398151873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,181 @@\n+// FILE: Organizaciones.js\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from 'react';\r\n+import { useRouter } from 'next/navigation';\r\n+import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n+import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n+import { Separator } from \"@/components/ui/separator\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import DonationForm from './donationsform';\r\n+\r\n+export default function Organizaciones() {\r\n+  const [charities, setCharities] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [selectedCharity, setSelectedCharity] = useState(null);\r\n+  const [user, setUser] = useState(null);\r\n+  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    const fetchCharities = async () => {\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/charities', {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+        if (data) {\r\n+          setCharities(data);\r\n+        } else {\r\n+          setCharities([]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching charities');\r\n+      }\r\n+    };\r\n+\r\n+    const fetchProfile = async () => {\r\n+      const token = localStorage.getItem('authToken');\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n+        }\r\n+\r\n+        const data = await res.json();\r\n+\r\n+        if (data.user) {\r\n+          setUser(data.user);\r\n+          setIsLoggedIn(true);\r\n+        } else if (data.charity) {\r\n+          setUser(data.charity);\r\n+          setIsLoggedIn(true);\r\n+        } else {\r\n+          throw new Error('Error fetching profile');\r\n+        }\r\n+\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        setError('Error fetching profile');\r\n+      }\r\n+    };\r\n+\r\n+    fetchCharities();\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n+  if (charities.length === 0) return <p>Loading...</p>;\r\n+\r\n+  const handleDonateClick = (charity) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para poder donar.');\r\n+    } else {\r\n+      setSelectedCharity(charity);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessageClick = async (charityId) => {\r\n+    if (!isLoggedIn) {\r\n+      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n+    } else {\r\n+      setReceiverId(charityId); // Establecer el ID del receptor\r\n+      try {\r\n+        const res = await fetch('http://localhost:3001/chats', {\r\n+          method: 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          },\r\n+          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n+        });\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error creating or fetching chat: ${res.status} ${res.statusText}`);\r\n+        }\r\n+        const chat = await res.json();\r\n+        console.log('Chat:', chat); // Log the chat\r\n+        router.push(`/mensajes?receiverId=${charityId}`);\r\n+      } catch (error) {\r\n+        console.error('Error:', error);\r\n+        toast.error('Error creating or fetching chat');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleCancel = () => {\r\n+    setSelectedCharity(null);\r\n+    setReceiverId(null); // Restablecer el ID del receptor\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-4\">\r\n+      {selectedCharity ? (\r\n+        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n+      ) : (\r\n+        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n+          {charities.map((charity) => (\r\n+            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n+              <CardHeader className=\"p-6\">\r\n+                <div className=\"flex items-center gap-4\">\r\n+                  <Avatar className=\"h-16 w-16\">\r\n+                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n+                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n+                  </Avatar>\r\n+                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n+                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n+                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n+                  </div>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n+                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n+                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n+                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n+                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n+                  </p>\r\n+                  <Separator className=\"my-6\" />\r\n+                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n+                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n+                  </p>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n+                    disabled={!charity.accessToken}\r\n+                    onClick={() => handleDonateClick(charity)}\r\n+                  >\r\n+                    Donar\r\n+                  </Button>\r\n+                  <Button\r\n+                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n+                    onClick={() => handleSendMessageClick(charity._id)}\r\n+                  >\r\n+                    Enviar mensaje\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+      <ToastContainer />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731398304943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,12 @@\n import { Button } from \"@/components/ui/button\";\r\n import { ToastContainer, toast } from 'react-toastify';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n import DonationForm from './donationsform';\r\n+import dynamic from 'next/dynamic';\r\n \r\n+const FbMessengerSimple = dynamic(() => import('./fb-messenger-complete'), { ssr: false });\r\n+\r\n export default function Organizaciones() {\r\n   const [charities, setCharities] = useState([]);\r\n   const [error, setError] = useState('');\r\n   const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n@@ -175,445 +178,8 @@\n           ))}\r\n         </div>\r\n       )}\r\n       <ToastContainer />\r\n+      {receiverId && <FbMessengerSimple receiverId={receiverId} />}\r\n     </div>\r\n   );\r\n-}\n-'use client'\r\n-\r\n-import React, { useState, useEffect } from 'react'\r\n-import dynamic from 'next/dynamic'\r\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft, Info } from 'lucide-react'\r\n-import io from 'socket.io-client'\r\n-\r\n-const socket = io('http://localhost:3001')\r\n-\r\n-const FbMessengerComplete = ({ user, receiverId }) => {\r\n-  const [activeChat, setActiveChat] = useState(null)\r\n-  const [message, setMessage] = useState('')\r\n-  const [messages, setMessages] = useState([])\r\n-  const [chatPreviews, setChatPreviews] = useState([])\r\n-  const [showChatList, setShowChatList] = useState(true)\r\n-  const [showSidebar, setShowSidebar] = useState(false)\r\n-\r\n-  useEffect(() => {\r\n-    if (!user) return\r\n-\r\n-    // Fetch initial chat previews\r\n-    const fetchChatPreviews = async () => {\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        })\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\r\n-        }\r\n-        const data = await res.json()\r\n-        console.log('Chat previews:', data) // Log the chat previews\r\n-        setChatPreviews(data)\r\n-      } catch (error) {\r\n-        console.error('Error:', error)\r\n-      }\r\n-    }\r\n-\r\n-    fetchChatPreviews()\r\n-  }, [user])\r\n-\r\n-  useEffect(() => {\r\n-    if (!user || !receiverId || activeChat) return\r\n-\r\n-    // Crear un nuevo chat si se proporciona un receiverId\r\n-    const createChat = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/chats', {\r\n-          method: 'POST',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          },\r\n-          body: JSON.stringify({ userId: user.id, receiverId })\r\n-        })\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\r\n-        }\r\n-        const newChat = await res.json()\r\n-        console.log('New chat created:', newChat) // Log the new chat\r\n-        setActiveChat(newChat)\r\n-      } catch (error) {\r\n-        console.error('Error:', error)\r\n-      }\r\n-    }\r\n-\r\n-    createChat()\r\n-  }, [receiverId, user, activeChat])\r\n-\r\n-  useEffect(() => {\r\n-    if (!user || !activeChat) return\r\n-\r\n-    // Unirse a la sala específica del usuario\r\n-    socket.emit('joinRoom', activeChat._id)\r\n-\r\n-    // Fetch initial messages for the active chat\r\n-    const fetchMessages = async () => {\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat._id}&senderId=${user.id}`)\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\r\n-        }\r\n-        const data = await res.json()\r\n-        console.log('Messages:', data) // Log the messages\r\n-        setMessages(data)\r\n-      } catch (error) {\r\n-        console.error('Error:', error)\r\n-      }\r\n-    }\r\n-\r\n-    fetchMessages()\r\n-\r\n-    // Escuchar mensajes recibidos\r\n-    const handleReceiveMessage = (message) => {\r\n-      console.log('Received message:', message) // Log the received message\r\n-      setMessages((prevMessages) => [...prevMessages, message])\r\n-    }\r\n-    socket.on('receiveMessage', handleReceiveMessage)\r\n-\r\n-    // Limpiar el evento cuando el componente se desmonta\r\n-    return () => {\r\n-      socket.emit('leaveRoom', activeChat._id)\r\n-      socket.off('receiveMessage', handleReceiveMessage)\r\n-    }\r\n-  }, [activeChat, user])\r\n-\r\n-  const handleSend = () => {\r\n-    if (message.trim()) {\r\n-      const newMessage = {\r\n-        senderId: user.id,\r\n-        receiverId: activeChat._id,\r\n-        text: message,\r\n-      }\r\n-      console.log('Sending message:', newMessage) // Log the message being sent\r\n-      socket.emit('sendMessage', newMessage)\r\n-      setMessages([...messages, newMessage])\r\n-      setMessage('')\r\n-    }\r\n-  }\r\n-\r\n-  const toggleChatList = () => {\r\n-    setShowChatList(!showChatList)\r\n-  }\r\n-\r\n-  const toggleSidebar = () => {\r\n-    setShowSidebar(!showSidebar)\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\r\n-      {/* Lista de chats */}\r\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\r\n-        <div className=\"p-4 bg-[#D8C7A9]\">\r\n-          <div className=\"flex justify-between items-center mb-4\">\r\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\r\n-            <div className=\"flex space-x-2\">\r\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n-                <MoreHorizontal size={20} />\r\n-                <span className=\"sr-only\">Más opciones</span>\r\n-              </button>\r\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n-                <Edit size={20} />\r\n-                <span className=\"sr-only\">Nuevo mensaje</span>\r\n-              </button>\r\n-            </div>\r\n-          </div>\r\n-          <div className=\"relative\">\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Buscar en Messenger\"\r\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\r\n-            />\r\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\r\n-          </div>\r\n-        </div>\r\n-        <div className=\"flex-1 overflow-y-auto\">\r\n-          {chatPreviews.map((chat) => (\r\n-            <div\r\n-              key={chat.id}\r\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'}`}\r\n-              onClick={() => {\r\n-                setActiveChat(chat)\r\n-                if (window.innerWidth < 768) {\r\n-                  setShowChatList(false)\r\n-                }\r\n-              }}\r\n-            >\r\n-              <div className=\"relative mr-3\">\r\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\r\n-                {chat.isActive && (\r\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\r\n-                )}\r\n-              </div>\r\n-              <div className=\"flex-1 min-w-0\">\r\n-                <div className=\"flex justify-between items-baseline\">\r\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\r\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\r\n-                </div>\r\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\r\n-              </div>\r\n-              {chat.unread > 0 && (\r\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\r\n-                  {chat.unread}\r\n-                </div>\r\n-              )}\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </div>\r\n-\r\n-      {/* Ventana de chat activa */}\r\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\r\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\r\n-          <div className=\"flex items-center\">\r\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\r\n-              <ArrowLeft size={20} />\r\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\r\n-            </button>\r\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\r\n-            <div>\r\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\r\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\r\n-            </div>\r\n-          </div>\r\n-          <div className=\"flex space-x-2\">\r\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n-              <Phone size={20} />\r\n-              <span className=\"sr-only\">Llamar</span>\r\n-            </button>\r\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n-              <Video size={20} />\r\n-              <span className=\"sr-only\">Video llamada</span>\r\n-            </button>\r\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n-              <Settings size={20} />\r\n-              <span className=\"sr-only\">Ajustes</span>\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-\r\n-        <div className=\"flex-1 overflow-y-auto p-4\">\r\n-          {messages.map((msg, index) => (\r\n-            <div key={index} className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'} mb-3`}>\r\n-              <div\r\n-                className={`rounded-xl p-3 max-w-xs ${msg.senderId === user.id ? 'bg-[#D8C7A9] text-[#042637]' : 'bg-[#ECE3D4] text-[#042637]'}`}\r\n-              >\r\n-                <p className=\"text-sm\">{msg.text}</p>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-\r\n-        <div className=\"p-4 border-t border-[#E1DDBF] bg-[#D8C7A9]\">\r\n-          <div className=\"flex items-center\">\r\n-            <Smile className=\"text-[#042637]/70\" size={20} />\r\n-            <input\r\n-              type=\"text\"\r\n-              value={message}\r\n-              onChange={(e) => setMessage(e.target.value)}\r\n-              placeholder=\"Escribe un mensaje\"\r\n-              className=\"flex-1 p-2 pl-4 bg-[#ECE3D4] rounded-full text-[#042637] placeholder-[#042637]/70 focus:outline-none\"\r\n-            />\r\n-            <button\r\n-              onClick={handleSend}\r\n-              className=\"ml-2 text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\"\r\n-            >\r\n-              <Send size={20} />\r\n-              <span className=\"sr-only\">Enviar mensaje</span>\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  )\r\n-}\r\n-\r\n-export default dynamic(() => Promise.resolve(FbMessengerComplete), { ssr: false })\r\n-// FILE: Organizaciones.js\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useRouter } from 'next/navigation';\r\n-import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\n-import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\n-import { Separator } from \"@/components/ui/separator\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import DonationForm from './donationsform';\r\n-\r\n-export default function Organizaciones() {\r\n-  const [charities, setCharities] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedCharity, setSelectedCharity] = useState(null);\r\n-  const [user, setUser] = useState(null);\r\n-  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchCharities = async () => {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/charities', {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-        if (data) {\r\n-          setCharities(data);\r\n-        } else {\r\n-          setCharities([]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching charities');\r\n-      }\r\n-    };\r\n-\r\n-    const fetchProfile = async () => {\r\n-      const token = localStorage.getItem('authToken');\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n-        }\r\n-\r\n-        const data = await res.json();\r\n-\r\n-        if (data.user) {\r\n-          setUser(data.user);\r\n-          setIsLoggedIn(true);\r\n-        } else if (data.charity) {\r\n-          setUser(data.charity);\r\n-          setIsLoggedIn(true);\r\n-        } else {\r\n-          throw new Error('Error fetching profile');\r\n-        }\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        setError('Error fetching profile');\r\n-      }\r\n-    };\r\n-\r\n-    fetchCharities();\r\n-    fetchProfile();\r\n-  }, []);\r\n-\r\n-  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n-  if (charities.length === 0) return <p>Loading...</p>;\r\n-\r\n-  const handleDonateClick = (charity) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para poder donar.');\r\n-    } else {\r\n-      setSelectedCharity(charity);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessageClick = async (charityId) => {\r\n-    if (!isLoggedIn) {\r\n-      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n-    } else {\r\n-      try {\r\n-        const res = await fetch('http://localhost:3001/chats', {\r\n-          method: 'POST',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          },\r\n-          body: JSON.stringify({ userId: user.id, receiverId: charityId })\r\n-        });\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error creating or fetching chat: ${res.status} ${res.statusText}`);\r\n-        }\r\n-        const chat = await res.json();\r\n-        console.log('Chat:', chat); // Log the chat\r\n-        router.push(`/mensajes?receiverId=${charityId}`);\r\n-      } catch (error) {\r\n-        console.error('Error:', error);\r\n-        toast.error('Error creating or fetching chat');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleCancel = () => {\r\n-    setSelectedCharity(null);\r\n-    setReceiverId(null); // Restablecer el ID del receptor\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-4\">\r\n-      {selectedCharity ? (\r\n-        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n-      ) : (\r\n-        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n-          {charities.map((charity) => (\r\n-            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n-              <CardHeader className=\"p-6\">\r\n-                <div className=\"flex items-center gap-4\">\r\n-                  <Avatar className=\"h-16 w-16\">\r\n-                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n-                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n-                  </Avatar>\r\n-                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n-                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n-                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n-                  </div>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n-                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n-                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n-                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n-                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n-                  </p>\r\n-                  <Separator className=\"my-6\" />\r\n-                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n-                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n-                  </p>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n-                    disabled={!charity.accessToken}\r\n-                    onClick={() => handleDonateClick(charity)}\r\n-                  >\r\n-                    Donar\r\n-                  </Button>\r\n-                  <Button\r\n-                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n-                    onClick={() => handleSendMessageClick(charity._id)}\r\n-                  >\r\n-                    Enviar mensaje\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-      <ToastContainer />\r\n-    </div>\r\n-  );\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731376508578,
            "name": "Commit-0",
            "content": "// FILE: Organizaciones.js\r\n\"use client\";\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\r\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport DonationForm from './donationsform';\r\nimport MessengerChat from './MessengerChat'; // Importa el componente MessengerChat\r\n\r\nexport default function Organizaciones() {\r\n  const [charities, setCharities] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [selectedCharity, setSelectedCharity] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n  const [receiverId, setReceiverId] = useState(null); // Nuevo estado para el ID del receptor\r\n\r\n  useEffect(() => {\r\n    const fetchCharities = async () => {\r\n      try {\r\n        const res = await fetch('http://localhost:3001/charities', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n\r\n        if (!res.ok) {\r\n          throw new Error(`Error fetching charities: ${res.status} ${res.statusText}`);\r\n        }\r\n\r\n        const data = await res.json();\r\n        if (data) {\r\n          setCharities(data);\r\n        } else {\r\n          setCharities([]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n        setError('Error fetching charities');\r\n      }\r\n    };\r\n\r\n    const fetchProfile = async () => {\r\n      const token = localStorage.getItem('authToken');\r\n      try {\r\n        const res = await fetch(`http://localhost:3001/profile?secret_token=${token}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n\r\n        if (!res.ok) {\r\n          throw new Error(`Error fetching profile: ${res.status} ${res.statusText}`);\r\n        }\r\n\r\n        const data = await res.json();\r\n\r\n        if (data.user) {\r\n          setUser(data.user);\r\n          setIsLoggedIn(true);\r\n        } else if (data.charity) {\r\n          setUser(data.charity);\r\n          setIsLoggedIn(true);\r\n        } else {\r\n          throw new Error('Error fetching profile');\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n        setError('Error fetching profile');\r\n      }\r\n    };\r\n\r\n    fetchCharities();\r\n    fetchProfile();\r\n  }, []);\r\n\r\n  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n  if (charities.length === 0) return <p>Loading...</p>;\r\n\r\n  const handleDonateClick = (charity) => {\r\n    if (!isLoggedIn) {\r\n      toast.error('Debes iniciar sesión para poder donar.');\r\n    } else {\r\n      setSelectedCharity(charity);\r\n    }\r\n  };\r\n\r\n  const handleSendMessageClick = (charityId) => {\r\n    if (!isLoggedIn) {\r\n      toast.error('Debes iniciar sesión para enviar un mensaje.');\r\n    } else {\r\n      setReceiverId(charityId);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setSelectedCharity(null);\r\n    setReceiverId(null); // Restablecer el ID del receptor\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4\">\r\n      {selectedCharity ? (\r\n        <DonationForm charity={selectedCharity} user={user} onCancel={handleCancel} />\r\n      ) : receiverId ? (\r\n        <MessengerChat receiverId={receiverId} user={user} onCancel={handleCancel} />\r\n      ) : (\r\n        <div className=\"flex flex-wrap gap-4 mt-10\">\r\n          {charities.map((charity) => (\r\n            <Card key={charity._id} className=\"w-full max-w-md flex-shrink-0 mx-2\">\r\n              <CardHeader className=\"p-6\">\r\n                <div className=\"flex items-center gap-4\">\r\n                  <Avatar className=\"h-16 w-16\">\r\n                    <AvatarImage src=\"/placeholder-charity.jpg\" />\r\n                    <AvatarFallback>{charity.nombre[0]}</AvatarFallback>\r\n                  </Avatar>\r\n                  <div className=\"text-[#e1ddbf] grid gap-1\">\r\n                    <h2 className=\"text-2xl font-bold\">{charity.nombre}</h2>\r\n                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.email}</p>\r\n                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.telefono}</p>\r\n                    <p className=\"text-[#4c7d78] text-muted-foreground\">{charity.direccion}</p>\r\n                  </div>\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent className=\"bg-[#e1ddbf] p-6\">\r\n                <div className=\"bg-[#e1ddbf] grid gap-4\">\r\n                  <h3 className=\"text-lg font-semibold text-[#042637]\">Descripción</h3>\r\n                  <p className=\"text-[#4c7d78] text-muted-foreground\">\r\n                    {charity.descripcion || \"No hay descripción disponible.\"}\r\n                  </p>\r\n                  <Separator className=\"my-6\" />\r\n                  <p className={`text-sm ${charity.accessToken ? 'text-green-500' : 'text-red-500'}`}>\r\n                    {charity.accessToken ? 'Se puede donar a esta organización.' : 'No se puede donar a esta organización.'}\r\n                  </p>\r\n                  <Button\r\n                    className=\"mt-2 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\r\n                    disabled={!charity.accessToken}\r\n                    onClick={() => handleDonateClick(charity)}\r\n                  >\r\n                    Donar\r\n                  </Button>\r\n                  <Button\r\n                    className=\"mt-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 transition-colors\"\r\n                    onClick={() => handleSendMessageClick(charity._id)}\r\n                  >\r\n                    Enviar mensaje\r\n                  </Button>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      )}\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}"
        }
    ]
}